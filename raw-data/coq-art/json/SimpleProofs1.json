[
    {
        "lemma_name": "var_name_goodness_is_not_42",
        "proof": [
            {
                "tactic_sig": "Lemma var_name_goodness_is_not_42 : forall v , var_name_goodness v <> 42 .",
                "tactic_sig_no_out_arg": "Lemma var_name_goodness_is_not_42 : forall v , var_name_goodness v <> 42 .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall v : var,\nnot\n  (eq (var_name_goodness v)\n     (S\n        (S\n           (S\n              (S\n                 (S\n                    (S\n                       (S\n                          (S\n                             (S\n                                (S\n                                   (S\n                                      (S\n                                         (S\n                                            (S\n                                               (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S (S (S (S (S O)))))))))))))))))))))))))))))))))))))))))))"
                ]
            },
            {
                "tactic_sig": "unfold var_name_goodness .",
                "tactic_sig_no_out_arg": "unfold var_name_goodness .",
                "tactic_args": [
                    "c1_goal : forall v : var,\nnot\n  (eq (var_name_goodness v)\n     (S\n        (S\n           (S\n              (S\n                 (S\n                    (S\n                       (S\n                          (S\n                             (S\n                                (S\n                                   (S\n                                      (S\n                                         (S\n                                            (S\n                                               (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S (S (S (S (S O)))))))))))))))))))))))))))))))))))))))))))"
                ],
                "tactic_res": [
                    "c2_goal : forall v : var,\nnot\n  (eq\n     (if\n       var_eq v\n         (String\n            (Ascii.Ascii true false false true false true true false)\n            EmptyString)\n      then O\n      else\n       if\n        var_eq v\n          (String\n             (Ascii.Ascii false true false true false true true false)\n             (String\n                (Ascii.Ascii true false false false false true true\n                   false)\n                (String\n                   (Ascii.Ascii true false true true false true true\n                      false)\n                   (String\n                      (Ascii.Ascii true false true false false true\n                         true false)\n                      (String\n                         (Ascii.Ascii true true false false true true\n                            true false) EmptyString)))))\n       then\n        S\n          (S\n             (S\n                (S\n                   (S\n                      (S\n                         (S\n                            (S\n                               (S\n                                  (S\n                                     (S\n                                        (S\n                                           (S\n                                              (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S (S (S (S (S O)))))))))))))))))))))))))))))))))))))))))))))))))\n       else S (S (S (S (S (S (S (S (S (S O))))))))))\n     (S\n        (S\n           (S\n              (S\n                 (S\n                    (S\n                       (S\n                          (S\n                             (S\n                                (S\n                                   (S\n                                      (S\n                                         (S\n                                            (S\n                                               (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S (S (S (S (S O)))))))))))))))))))))))))))))))))))))))))))"
                ]
            },
            {
                "tactic_sig": "intro _o .",
                "tactic_sig_no_out_arg": "intro v .",
                "tactic_args": [
                    "c2_goal : forall v : var,\nnot\n  (eq\n     (if\n       var_eq v\n         (String\n            (Ascii.Ascii true false false true false true true false)\n            EmptyString)\n      then O\n      else\n       if\n        var_eq v\n          (String\n             (Ascii.Ascii false true false true false true true false)\n             (String\n                (Ascii.Ascii true false false false false true true\n                   false)\n                (String\n                   (Ascii.Ascii true false true true false true true\n                      false)\n                   (String\n                      (Ascii.Ascii true false true false false true\n                         true false)\n                      (String\n                         (Ascii.Ascii true true false false true true\n                            true false) EmptyString)))))\n       then\n        S\n          (S\n             (S\n                (S\n                   (S\n                      (S\n                         (S\n                            (S\n                               (S\n                                  (S\n                                     (S\n                                        (S\n                                           (S\n                                              (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S (S (S (S (S O)))))))))))))))))))))))))))))))))))))))))))))))))\n       else S (S (S (S (S (S (S (S (S (S O))))))))))\n     (S\n        (S\n           (S\n              (S\n                 (S\n                    (S\n                       (S\n                          (S\n                             (S\n                                (S\n                                   (S\n                                      (S\n                                         (S\n                                            (S\n                                               (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S (S (S (S (S O)))))))))))))))))))))))))))))))))))))))))))"
                ],
                "tactic_res": [
                    "c3_goal : not\n  (eq\n     (if\n       var_eq v\n         (String\n            (Ascii.Ascii true false false true false true true false)\n            EmptyString)\n      then O\n      else\n       if\n        var_eq v\n          (String\n             (Ascii.Ascii false true false true false true true false)\n             (String\n                (Ascii.Ascii true false false false false true true\n                   false)\n                (String\n                   (Ascii.Ascii true false true true false true true\n                      false)\n                   (String\n                      (Ascii.Ascii true false true false false true\n                         true false)\n                      (String\n                         (Ascii.Ascii true true false false true true\n                            true false) EmptyString)))))\n       then\n        S\n          (S\n             (S\n                (S\n                   (S\n                      (S\n                         (S\n                            (S\n                               (S\n                                  (S\n                                     (S\n                                        (S\n                                           (S\n                                              (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S (S (S (S (S O)))))))))))))))))))))))))))))))))))))))))))))))))\n       else S (S (S (S (S (S (S (S (S (S O))))))))))\n     (S\n        (S\n           (S\n              (S\n                 (S\n                    (S\n                       (S\n                          (S\n                             (S\n                                (S\n                                   (S\n                                      (S\n                                         (S\n                                            (S\n                                               (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S (S (S (S (S O)))))))))))))))))))))))))))))))))))))))))))",
                    "c3_v : var"
                ]
            },
            {
                "tactic_sig": "destruct ( var_eq _i \"i\" % string ) as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct ( var_eq _i \"i\" % string ) .",
                "tactic_args": [
                    "c3_goal : not\n  (eq\n     (if\n       var_eq v\n         (String\n            (Ascii.Ascii true false false true false true true false)\n            EmptyString)\n      then O\n      else\n       if\n        var_eq v\n          (String\n             (Ascii.Ascii false true false true false true true false)\n             (String\n                (Ascii.Ascii true false false false false true true\n                   false)\n                (String\n                   (Ascii.Ascii true false true true false true true\n                      false)\n                   (String\n                      (Ascii.Ascii true false true false false true\n                         true false)\n                      (String\n                         (Ascii.Ascii true true false false true true\n                            true false) EmptyString)))))\n       then\n        S\n          (S\n             (S\n                (S\n                   (S\n                      (S\n                         (S\n                            (S\n                               (S\n                                  (S\n                                     (S\n                                        (S\n                                           (S\n                                              (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S (S (S (S (S O)))))))))))))))))))))))))))))))))))))))))))))))))\n       else S (S (S (S (S (S (S (S (S (S O))))))))))\n     (S\n        (S\n           (S\n              (S\n                 (S\n                    (S\n                       (S\n                          (S\n                             (S\n                                (S\n                                   (S\n                                      (S\n                                         (S\n                                            (S\n                                               (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S (S (S (S (S O)))))))))))))))))))))))))))))))))))))))))))",
                    "c3_v : var"
                ],
                "tactic_res": [
                    "c4_goal : not\n  (eq O\n     (S\n        (S\n           (S\n              (S\n                 (S\n                    (S\n                       (S\n                          (S\n                             (S\n                                (S\n                                   (S\n                                      (S\n                                         (S\n                                            (S\n                                               (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S (S (S (S (S O)))))))))))))))))))))))))))))))))))))))))))",
                    "c4_e : eq v\n  (String (Ascii.Ascii true false false true false true true false)\n     EmptyString)",
                    "c5_goal : not\n  (eq\n     (if\n       var_eq v\n         (String\n            (Ascii.Ascii false true false true false true true false)\n            (String\n               (Ascii.Ascii true false false false false true true\n                  false)\n               (String\n                  (Ascii.Ascii true false true true false true true\n                     false)\n                  (String\n                     (Ascii.Ascii true false true false false true true\n                        false)\n                     (String\n                        (Ascii.Ascii true true false false true true\n                           true false) EmptyString)))))\n      then\n       S\n         (S\n            (S\n               (S\n                  (S\n                     (S\n                        (S\n                           (S\n                              (S\n                                 (S\n                                    (S\n                                       (S\n                                          (S\n                                             (S\n                                                (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S (S (S (S (S O)))))))))))))))))))))))))))))))))))))))))))))))))\n      else S (S (S (S (S (S (S (S (S (S O))))))))))\n     (S\n        (S\n           (S\n              (S\n                 (S\n                    (S\n                       (S\n                          (S\n                             (S\n                                (S\n                                   (S\n                                      (S\n                                         (S\n                                            (S\n                                               (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S (S (S (S (S O)))))))))))))))))))))))))))))))))))))))))))",
                    "c5_n : not\n  (eq v\n     (String (Ascii.Ascii true false false true false true true false)\n        EmptyString))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c4_goal : not\n  (eq O\n     (S\n        (S\n           (S\n              (S\n                 (S\n                    (S\n                       (S\n                          (S\n                             (S\n                                (S\n                                   (S\n                                      (S\n                                         (S\n                                            (S\n                                               (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S (S (S (S (S O)))))))))))))))))))))))))))))))))))))))))))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct ( var_eq _i \"james\" % string ) as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct ( var_eq _i \"james\" % string ) .",
                "tactic_args": [
                    "c5_goal : not\n  (eq\n     (if\n       var_eq v\n         (String\n            (Ascii.Ascii false true false true false true true false)\n            (String\n               (Ascii.Ascii true false false false false true true\n                  false)\n               (String\n                  (Ascii.Ascii true false true true false true true\n                     false)\n                  (String\n                     (Ascii.Ascii true false true false false true true\n                        false)\n                     (String\n                        (Ascii.Ascii true true false false true true\n                           true false) EmptyString)))))\n      then\n       S\n         (S\n            (S\n               (S\n                  (S\n                     (S\n                        (S\n                           (S\n                              (S\n                                 (S\n                                    (S\n                                       (S\n                                          (S\n                                             (S\n                                                (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S (S (S (S (S O)))))))))))))))))))))))))))))))))))))))))))))))))\n      else S (S (S (S (S (S (S (S (S (S O))))))))))\n     (S\n        (S\n           (S\n              (S\n                 (S\n                    (S\n                       (S\n                          (S\n                             (S\n                                (S\n                                   (S\n                                      (S\n                                         (S\n                                            (S\n                                               (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S (S (S (S (S O)))))))))))))))))))))))))))))))))))))))))))",
                    "c3_v : var"
                ],
                "tactic_res": [
                    "c6_goal : not\n  (eq\n     (S\n        (S\n           (S\n              (S\n                 (S\n                    (S\n                       (S\n                          (S\n                             (S\n                                (S\n                                   (S\n                                      (S\n                                         (S\n                                            (S\n                                               (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S (S (S (S (S O))))))))))))))))))))))))))))))))))))))))))))))))))\n     (S\n        (S\n           (S\n              (S\n                 (S\n                    (S\n                       (S\n                          (S\n                             (S\n                                (S\n                                   (S\n                                      (S\n                                         (S\n                                            (S\n                                               (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S (S (S (S (S O)))))))))))))))))))))))))))))))))))))))))))",
                    "c6_e : eq v\n  (String (Ascii.Ascii false true false true false true true false)\n     (String (Ascii.Ascii true false false false false true true false)\n        (String\n           (Ascii.Ascii true false true true false true true false)\n           (String\n              (Ascii.Ascii true false true false false true true false)\n              (String\n                 (Ascii.Ascii true true false false true true true\n                    false) EmptyString)))))",
                    "c7_goal : not\n  (eq (S (S (S (S (S (S (S (S (S (S O))))))))))\n     (S\n        (S\n           (S\n              (S\n                 (S\n                    (S\n                       (S\n                          (S\n                             (S\n                                (S\n                                   (S\n                                      (S\n                                         (S\n                                            (S\n                                               (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S (S (S (S (S O)))))))))))))))))))))))))))))))))))))))))))",
                    "c7_n0 : not\n  (eq v\n     (String (Ascii.Ascii false true false true false true true false)\n        (String\n           (Ascii.Ascii true false false false false true true false)\n           (String\n              (Ascii.Ascii true false true true false true true false)\n              (String\n                 (Ascii.Ascii true false true false false true true\n                    false)\n                 (String\n                    (Ascii.Ascii true true false false true true true\n                       false) EmptyString))))))"
                ]
            },
            {
                "tactic_sig": "discriminate .",
                "tactic_sig_no_out_arg": "discriminate .",
                "tactic_args": [
                    "c6_goal : not\n  (eq\n     (S\n        (S\n           (S\n              (S\n                 (S\n                    (S\n                       (S\n                          (S\n                             (S\n                                (S\n                                   (S\n                                      (S\n                                         (S\n                                            (S\n                                               (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S (S (S (S (S O))))))))))))))))))))))))))))))))))))))))))))))))))\n     (S\n        (S\n           (S\n              (S\n                 (S\n                    (S\n                       (S\n                          (S\n                             (S\n                                (S\n                                   (S\n                                      (S\n                                         (S\n                                            (S\n                                               (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S (S (S (S (S O)))))))))))))))))))))))))))))))))))))))))))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "discriminate .",
                "tactic_sig_no_out_arg": "discriminate .",
                "tactic_args": [
                    "c7_goal : not\n  (eq (S (S (S (S (S (S (S (S (S (S O))))))))))\n     (S\n        (S\n           (S\n              (S\n                 (S\n                    (S\n                       (S\n                          (S\n                             (S\n                                (S\n                                   (S\n                                      (S\n                                         (S\n                                            (S\n                                               (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S (S (S (S (S O)))))))))))))))))))))))))))))))))))))))))))"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "read_var",
        "proof": [
            {
                "tactic_sig": "Example read_var : ( const_map 5 ) \"x\" % string = 5 .",
                "tactic_sig_no_out_arg": "Example read_var : ( const_map 5 ) \"x\" % string = 5 .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : eq\n  (const_map (S (S (S (S (S O)))))\n     (String (Ascii.Ascii false false false true true true true false)\n        EmptyString)) (S (S (S (S (S O)))))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c1_goal : eq\n  (const_map (S (S (S (S (S O)))))\n     (String (Ascii.Ascii false false false true true true true false)\n        EmptyString)) (S (S (S (S (S O)))))"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "set_map_unchanged",
        "proof": [
            {
                "tactic_sig": "Lemma set_map_unchanged : forall map var1 var2 value , var1 <> var2 -> ( set_map map var1 value ) var2 = map var2 .",
                "tactic_sig_no_out_arg": "Lemma set_map_unchanged : forall map var1 var2 value , var1 <> var2 -> ( set_map map var1 value ) var2 = map var2 .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (map : var_map) (var1 var2 : var) (value : nat)\n  (_ : not (eq var1 var2)), eq (set_map map var1 value var2) (map var2)"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c1_goal : forall (map : var_map) (var1 var2 : var) (value : nat)\n  (_ : not (eq var1 var2)), eq (set_map map var1 value var2) (map var2)"
                ],
                "tactic_res": [
                    "c2_goal : eq (set_map map var1 value var2) (map var2)",
                    "c2_map : var_map",
                    "c2_var1 : var",
                    "c2_var2 : var",
                    "c2_value : nat",
                    "c2_H : not (eq var1 var2)"
                ]
            },
            {
                "tactic_sig": "unfold set_map .",
                "tactic_sig_no_out_arg": "unfold set_map .",
                "tactic_args": [
                    "c2_goal : eq (set_map map var1 value var2) (map var2)"
                ],
                "tactic_res": [
                    "c3_goal : eq (if var_eq var1 var2 then value else map var2) (map var2)"
                ]
            },
            {
                "tactic_sig": "destruct ( var_eq _i _i ) as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct ( var_eq _i _i ) .",
                "tactic_args": [
                    "c3_goal : eq (if var_eq var1 var2 then value else map var2) (map var2)",
                    "c2_var1 : var",
                    "c2_var2 : var"
                ],
                "tactic_res": [
                    "c4_goal : eq value (map var2)",
                    "c4_e : eq var1 var2",
                    "c5_goal : eq (map var2) (map var2)",
                    "c5_n : not (eq var1 var2)"
                ]
            },
            {
                "tactic_sig": "contradiction .",
                "tactic_sig_no_out_arg": "contradiction .",
                "tactic_args": [
                    "c4_goal : eq value (map var2)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "reflexivity .",
                "tactic_sig_no_out_arg": "reflexivity .",
                "tactic_args": [
                    "c5_goal : eq (map var2) (map var2)"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "flip_involutive",
        "proof": [
            {
                "tactic_sig": "Lemma flip_involutive : forall e , flip ( flip e ) = e .",
                "tactic_sig_no_out_arg": "Lemma flip_involutive : forall e , flip ( flip e ) = e .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall e : expr, eq (flip (flip e)) e"
                ]
            },
            {
                "tactic_sig": "intros _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c1_goal : forall e : expr, eq (flip (flip e)) e"
                ],
                "tactic_res": [
                    "c2_goal : eq (flip (flip e)) e",
                    "c2_e : expr"
                ]
            },
            {
                "tactic_sig": "induction _i .",
                "tactic_sig_no_out_arg": "induction _i .",
                "tactic_args": [
                    "c2_goal : eq (flip (flip e)) e",
                    "c2_e : expr"
                ],
                "tactic_res": [
                    "c3_goal : eq (flip (flip (Const n))) (Const n)",
                    "c3_n : nat",
                    "c4_goal : eq (flip (flip (Var v))) (Var v)",
                    "c4_v : var",
                    "c5_goal : eq (flip (flip (Plus e1 e2))) (Plus e1 e2)",
                    "c5_IHe2 : eq (flip (flip e2)) e2",
                    "c5_IHe1 : eq (flip (flip e1)) e1",
                    "c5_e2 : expr",
                    "c5_e1 : expr",
                    "c6_goal : eq (flip (flip (Times e1 e2))) (Times e1 e2)",
                    "c6_IHe2 : eq (flip (flip e2)) e2",
                    "c6_IHe1 : eq (flip (flip e1)) e1",
                    "c6_e2 : expr",
                    "c6_e1 : expr"
                ]
            },
            {
                "tactic_sig": "firstorder .",
                "tactic_sig_no_out_arg": "firstorder .",
                "tactic_args": [
                    "c3_goal : eq (flip (flip (Const n))) (Const n)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "firstorder .",
                "tactic_sig_no_out_arg": "firstorder .",
                "tactic_args": [
                    "c4_goal : eq (flip (flip (Var v))) (Var v)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c5_goal : eq (flip (flip (Plus e1 e2))) (Plus e1 e2)"
                ],
                "tactic_res": [
                    "c7_goal : eq (Plus (flip (flip e1)) (flip (flip e2))) (Plus e1 e2)"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c7_goal : eq (Plus (flip (flip e1)) (flip (flip e2))) (Plus e1 e2)",
                    "c5_IHe1 : eq (flip (flip e1)) e1"
                ],
                "tactic_res": [
                    "c8_goal : eq (Plus e1 (flip (flip e2))) (Plus e1 e2)"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c8_goal : eq (Plus e1 (flip (flip e2))) (Plus e1 e2)",
                    "c5_IHe2 : eq (flip (flip e2)) e2"
                ],
                "tactic_res": [
                    "c9_goal : eq (Plus e1 e2) (Plus e1 e2)"
                ]
            },
            {
                "tactic_sig": "reflexivity .",
                "tactic_sig_no_out_arg": "reflexivity .",
                "tactic_args": [
                    "c9_goal : eq (Plus e1 e2) (Plus e1 e2)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c6_goal : eq (flip (flip (Times e1 e2))) (Times e1 e2)"
                ],
                "tactic_res": [
                    "c10_goal : eq (Times (flip (flip e1)) (flip (flip e2))) (Times e1 e2)"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c10_goal : eq (Times (flip (flip e1)) (flip (flip e2))) (Times e1 e2)",
                    "c5_IHe1 : eq (flip (flip e1)) e1"
                ],
                "tactic_res": [
                    "c11_goal : eq (Times e1 (flip (flip e2))) (Times e1 e2)"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c11_goal : eq (Times e1 (flip (flip e2))) (Times e1 e2)",
                    "c5_IHe2 : eq (flip (flip e2)) e2"
                ],
                "tactic_res": [
                    "c12_goal : eq (Times e1 e2) (Times e1 e2)"
                ]
            },
            {
                "tactic_sig": "reflexivity .",
                "tactic_sig_no_out_arg": "reflexivity .",
                "tactic_args": [
                    "c12_goal : eq (Times e1 e2) (Times e1 e2)"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "flip_preserves_count_vars",
        "proof": [
            {
                "tactic_sig": "Lemma flip_preserves_count_vars : forall e , count_vars e = count_vars ( flip e ) .",
                "tactic_sig_no_out_arg": "Lemma flip_preserves_count_vars : forall e , count_vars e = count_vars ( flip e ) .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall e : expr, eq (count_vars e) (count_vars (flip e))"
                ]
            },
            {
                "tactic_sig": "induction e .",
                "tactic_sig_no_out_arg": "induction e .",
                "tactic_args": [
                    "c1_goal : forall e : expr, eq (count_vars e) (count_vars (flip e))"
                ],
                "tactic_res": [
                    "c2_goal : eq (count_vars (Const n)) (count_vars (flip (Const n)))",
                    "c2_n : nat",
                    "c3_goal : eq (count_vars (Var v)) (count_vars (flip (Var v)))",
                    "c3_v : var",
                    "c4_goal : eq (count_vars (Plus e1 e2)) (count_vars (flip (Plus e1 e2)))",
                    "c4_IHe2 : eq (count_vars e2) (count_vars (flip e2))",
                    "c4_IHe1 : eq (count_vars e1) (count_vars (flip e1))",
                    "c4_e2 : expr",
                    "c4_e1 : expr",
                    "c5_goal : eq (count_vars (Times e1 e2)) (count_vars (flip (Times e1 e2)))",
                    "c5_IHe2 : eq (count_vars e2) (count_vars (flip e2))",
                    "c5_IHe1 : eq (count_vars e1) (count_vars (flip e1))",
                    "c5_e2 : expr",
                    "c5_e1 : expr"
                ]
            },
            {
                "tactic_sig": "firstorder .",
                "tactic_sig_no_out_arg": "firstorder .",
                "tactic_args": [
                    "c2_goal : eq (count_vars (Const n)) (count_vars (flip (Const n)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "firstorder .",
                "tactic_sig_no_out_arg": "firstorder .",
                "tactic_args": [
                    "c3_goal : eq (count_vars (Var v)) (count_vars (flip (Var v)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c4_goal : eq (count_vars (Plus e1 e2)) (count_vars (flip (Plus e1 e2)))"
                ],
                "tactic_res": [
                    "c6_goal : eq (Init.Nat.add (count_vars e1) (count_vars e2))\n  (Init.Nat.add (count_vars (flip e2)) (count_vars (flip e1)))"
                ]
            },
            {
                "tactic_sig": "rewrite <- _i .",
                "tactic_sig_no_out_arg": "rewrite <- _i .",
                "tactic_args": [
                    "c6_goal : eq (Init.Nat.add (count_vars e1) (count_vars e2))\n  (Init.Nat.add (count_vars (flip e2)) (count_vars (flip e1)))",
                    "c4_IHe1 : eq (count_vars e1) (count_vars (flip e1))"
                ],
                "tactic_res": [
                    "c7_goal : eq (Init.Nat.add (count_vars e1) (count_vars e2))\n  (Init.Nat.add (count_vars (flip e2)) (count_vars e1))"
                ]
            },
            {
                "tactic_sig": "rewrite <- _i .",
                "tactic_sig_no_out_arg": "rewrite <- _i .",
                "tactic_args": [
                    "c7_goal : eq (Init.Nat.add (count_vars e1) (count_vars e2))\n  (Init.Nat.add (count_vars (flip e2)) (count_vars e1))",
                    "c4_IHe2 : eq (count_vars e2) (count_vars (flip e2))"
                ],
                "tactic_res": [
                    "c8_goal : eq (Init.Nat.add (count_vars e1) (count_vars e2))\n  (Init.Nat.add (count_vars e2) (count_vars e1))"
                ]
            },
            {
                "tactic_sig": "apply Nat.add_comm .",
                "tactic_sig_no_out_arg": "apply Nat.add_comm .",
                "tactic_args": [
                    "c8_goal : eq (Init.Nat.add (count_vars e1) (count_vars e2))\n  (Init.Nat.add (count_vars e2) (count_vars e1))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c5_goal : eq (count_vars (Times e1 e2)) (count_vars (flip (Times e1 e2)))"
                ],
                "tactic_res": [
                    "c9_goal : eq (Init.Nat.add (count_vars e1) (count_vars e2))\n  (Init.Nat.add (count_vars (flip e2)) (count_vars (flip e1)))"
                ]
            },
            {
                "tactic_sig": "rewrite <- _i .",
                "tactic_sig_no_out_arg": "rewrite <- _i .",
                "tactic_args": [
                    "c9_goal : eq (Init.Nat.add (count_vars e1) (count_vars e2))\n  (Init.Nat.add (count_vars (flip e2)) (count_vars (flip e1)))",
                    "c4_IHe1 : eq (count_vars e1) (count_vars (flip e1))"
                ],
                "tactic_res": [
                    "c10_goal : eq (Init.Nat.add (count_vars e1) (count_vars e2))\n  (Init.Nat.add (count_vars (flip e2)) (count_vars e1))"
                ]
            },
            {
                "tactic_sig": "rewrite <- _i .",
                "tactic_sig_no_out_arg": "rewrite <- _i .",
                "tactic_args": [
                    "c10_goal : eq (Init.Nat.add (count_vars e1) (count_vars e2))\n  (Init.Nat.add (count_vars (flip e2)) (count_vars e1))",
                    "c4_IHe2 : eq (count_vars e2) (count_vars (flip e2))"
                ],
                "tactic_res": [
                    "c11_goal : eq (Init.Nat.add (count_vars e1) (count_vars e2))\n  (Init.Nat.add (count_vars e2) (count_vars e1))"
                ]
            },
            {
                "tactic_sig": "apply Nat.add_comm .",
                "tactic_sig_no_out_arg": "apply Nat.add_comm .",
                "tactic_args": [
                    "c11_goal : eq (Init.Nat.add (count_vars e1) (count_vars e2))\n  (Init.Nat.add (count_vars e2) (count_vars e1))"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "count_vars_bounded_by_size",
        "proof": [
            {
                "tactic_sig": "Lemma count_vars_bounded_by_size : forall e , count_vars e <= size e .",
                "tactic_sig_no_out_arg": "Lemma count_vars_bounded_by_size : forall e , count_vars e <= size e .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall e : expr, le (count_vars e) (size e)"
                ]
            },
            {
                "tactic_sig": "induction e .",
                "tactic_sig_no_out_arg": "induction e .",
                "tactic_args": [
                    "c1_goal : forall e : expr, le (count_vars e) (size e)"
                ],
                "tactic_res": [
                    "c2_goal : le (count_vars (Const n)) (size (Const n))",
                    "c2_n : nat",
                    "c3_goal : le (count_vars (Var v)) (size (Var v))",
                    "c3_v : var",
                    "c4_goal : le (count_vars (Plus e1 e2)) (size (Plus e1 e2))",
                    "c4_IHe2 : le (count_vars e2) (size e2)",
                    "c4_IHe1 : le (count_vars e1) (size e1)",
                    "c4_e2 : expr",
                    "c4_e1 : expr",
                    "c5_goal : le (count_vars (Times e1 e2)) (size (Times e1 e2))",
                    "c5_IHe2 : le (count_vars e2) (size e2)",
                    "c5_IHe1 : le (count_vars e1) (size e1)",
                    "c5_e2 : expr",
                    "c5_e1 : expr"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c2_goal : le (count_vars (Const n)) (size (Const n))"
                ],
                "tactic_res": [
                    "c6_goal : le O (S O)"
                ]
            },
            {
                "tactic_sig": "firstorder .",
                "tactic_sig_no_out_arg": "firstorder .",
                "tactic_args": [
                    "c6_goal : le O (S O)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c3_goal : le (count_vars (Var v)) (size (Var v))"
                ],
                "tactic_res": [
                    "c7_goal : le (S O) (S O)"
                ]
            },
            {
                "tactic_sig": "firstorder .",
                "tactic_sig_no_out_arg": "firstorder .",
                "tactic_args": [
                    "c7_goal : le (S O) (S O)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c4_goal : le (count_vars (Plus e1 e2)) (size (Plus e1 e2))"
                ],
                "tactic_res": [
                    "c8_goal : le (Init.Nat.add (count_vars e1) (count_vars e2))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "firstorder .",
                "tactic_sig_no_out_arg": "firstorder .",
                "tactic_args": [
                    "c8_goal : le (Init.Nat.add (count_vars e1) (count_vars e2))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c5_goal : le (count_vars (Times e1 e2)) (size (Times e1 e2))"
                ],
                "tactic_res": [
                    "c9_goal : le (Init.Nat.add (count_vars e1) (count_vars e2))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "firstorder .",
                "tactic_sig_no_out_arg": "firstorder .",
                "tactic_args": [
                    "c9_goal : le (Init.Nat.add (count_vars e1) (count_vars e2))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "zero_vars_independent",
        "proof": [
            {
                "tactic_sig": "Lemma zero_vars_independent : forall e , count_vars e = 0 -> ( forall m1 m2 , eval_expr e m1 = eval_expr e m2 ) .",
                "tactic_sig_no_out_arg": "Lemma zero_vars_independent : forall e , count_vars e = 0 -> ( forall m1 m2 , eval_expr e m1 = eval_expr e m2 ) .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (e : expr) (_ : eq (count_vars e) O) (m1 m2 : var_map),\neq (eval_expr e m1) (eval_expr e m2)"
                ]
            },
            {
                "tactic_sig": "induction e .",
                "tactic_sig_no_out_arg": "induction e .",
                "tactic_args": [
                    "c1_goal : forall (e : expr) (_ : eq (count_vars e) O) (m1 m2 : var_map),\neq (eval_expr e m1) (eval_expr e m2)"
                ],
                "tactic_res": [
                    "c2_goal : forall (_ : eq (count_vars (Const n)) O) (m1 m2 : var_map),\neq (eval_expr (Const n) m1) (eval_expr (Const n) m2)",
                    "c2_n : nat",
                    "c3_goal : forall (_ : eq (count_vars (Var v)) O) (m1 m2 : var_map),\neq (eval_expr (Var v) m1) (eval_expr (Var v) m2)",
                    "c3_v : var",
                    "c4_goal : forall (_ : eq (count_vars (Plus e1 e2)) O) (m1 m2 : var_map),\neq (eval_expr (Plus e1 e2) m1) (eval_expr (Plus e1 e2) m2)",
                    "c4_IHe2 : forall (_ : eq (count_vars e2) O) (m1 m2 : var_map),\neq (eval_expr e2 m1) (eval_expr e2 m2)",
                    "c4_IHe1 : forall (_ : eq (count_vars e1) O) (m1 m2 : var_map),\neq (eval_expr e1 m1) (eval_expr e1 m2)",
                    "c4_e2 : expr",
                    "c4_e1 : expr",
                    "c5_goal : forall (_ : eq (count_vars (Times e1 e2)) O) (m1 m2 : var_map),\neq (eval_expr (Times e1 e2) m1) (eval_expr (Times e1 e2) m2)",
                    "c5_IHe2 : forall (_ : eq (count_vars e2) O) (m1 m2 : var_map),\neq (eval_expr e2 m1) (eval_expr e2 m2)",
                    "c5_IHe1 : forall (_ : eq (count_vars e1) O) (m1 m2 : var_map),\neq (eval_expr e1 m1) (eval_expr e1 m2)",
                    "c5_e2 : expr",
                    "c5_e1 : expr"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c2_goal : forall (_ : eq (count_vars (Const n)) O) (m1 m2 : var_map),\neq (eval_expr (Const n) m1) (eval_expr (Const n) m2)"
                ],
                "tactic_res": [
                    "c6_goal : eq (eval_expr (Const n) m1) (eval_expr (Const n) m2)",
                    "c6_H : eq (count_vars (Const n)) O",
                    "c6_m1 : var_map",
                    "c6_m2 : var_map"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c6_goal : eq (eval_expr (Const n) m1) (eval_expr (Const n) m2)"
                ],
                "tactic_res": [
                    "c7_goal : eq n n"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c7_goal : eq n n"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c3_goal : forall (_ : eq (count_vars (Var v)) O) (m1 m2 : var_map),\neq (eval_expr (Var v) m1) (eval_expr (Var v) m2)"
                ],
                "tactic_res": [
                    "c8_goal : forall (_ : eq (S O) O) (m1 m2 : var_map), eq (m1 v) (m2 v)"
                ]
            },
            {
                "tactic_sig": "discriminate .",
                "tactic_sig_no_out_arg": "discriminate .",
                "tactic_args": [
                    "c8_goal : forall (_ : eq (S O) O) (m1 m2 : var_map), eq (m1 v) (m2 v)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c4_goal : forall (_ : eq (count_vars (Plus e1 e2)) O) (m1 m2 : var_map),\neq (eval_expr (Plus e1 e2) m1) (eval_expr (Plus e1 e2) m2)"
                ],
                "tactic_res": [
                    "c9_goal : eq (eval_expr (Plus e1 e2) m1) (eval_expr (Plus e1 e2) m2)",
                    "c9_H : eq (count_vars (Plus e1 e2)) O",
                    "c9_m1 : var_map",
                    "c9_m2 : var_map"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c9_goal : eq (eval_expr (Plus e1 e2) m1) (eval_expr (Plus e1 e2) m2)"
                ],
                "tactic_res": [
                    "c10_goal : eq (Init.Nat.add (eval_expr e1 m1) (eval_expr e2 m1))\n  (Init.Nat.add (eval_expr e1 m2) (eval_expr e2 m2))"
                ]
            },
            {
                "tactic_sig": "assert ( count_vars _i + count_vars _i = 0 -> ( count_vars _i = 0 /\\ count_vars _i = 0 ) ) .",
                "tactic_sig_no_out_arg": "assert ( count_vars _i + count_vars _i = 0 -> ( count_vars _i = 0 /\\ count_vars _i = 0 ) ) .",
                "tactic_args": [
                    "c10_goal : eq (Init.Nat.add (eval_expr e1 m1) (eval_expr e2 m1))\n  (Init.Nat.add (eval_expr e1 m2) (eval_expr e2 m2))",
                    "c4_e1 : expr",
                    "c4_e2 : expr",
                    "c4_e1 : expr",
                    "c4_e2 : expr"
                ],
                "tactic_res": [
                    "c11_goal : forall _ : eq (Init.Nat.add (count_vars e1) (count_vars e2)) O,\nand (eq (count_vars e1) O) (eq (count_vars e2) O)",
                    "c12_goal : eq (Init.Nat.add (eval_expr e1 m1) (eval_expr e2 m1))\n  (Init.Nat.add (eval_expr e1 m2) (eval_expr e2 m2))",
                    "c12_H0 : forall _ : eq (Init.Nat.add (count_vars e1) (count_vars e2)) O,\nand (eq (count_vars e1) O) (eq (count_vars e2) O)"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c11_goal : forall _ : eq (Init.Nat.add (count_vars e1) (count_vars e2)) O,\nand (eq (count_vars e1) O) (eq (count_vars e2) O)",
                    "_global_plus_is_O : forall (n m : nat) (_ : eq (Init.Nat.add n m) O),\n       and (eq n O) (eq m O)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "specialize ( _i _i ) .",
                "tactic_sig_no_out_arg": "specialize ( _i _i ) .",
                "tactic_args": [
                    "c12_H0 : forall _ : eq (Init.Nat.add (count_vars e1) (count_vars e2)) O,\nand (eq (count_vars e1) O) (eq (count_vars e2) O)",
                    "c9_H : eq (count_vars (Plus e1 e2)) O"
                ],
                "tactic_res": [
                    "c12_H0 : and (eq (count_vars e1) O) (eq (count_vars e2) O)"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c12_H0 : forall _ : eq (Init.Nat.add (count_vars e1) (count_vars e2)) O,\nand (eq (count_vars e1) O) (eq (count_vars e2) O)"
                ],
                "tactic_res": [
                    "c12_H1 : eq (count_vars e2) O",
                    "c12_H0 : eq (count_vars e1) O"
                ]
            },
            {
                "tactic_sig": "specialize ( _i _i ) .",
                "tactic_sig_no_out_arg": "specialize ( _i _i ) .",
                "tactic_args": [
                    "c4_IHe1 : forall (_ : eq (count_vars e1) O) (m1 m2 : var_map),\neq (eval_expr e1 m1) (eval_expr e1 m2)",
                    "c12_H0 : forall _ : eq (Init.Nat.add (count_vars e1) (count_vars e2)) O,\nand (eq (count_vars e1) O) (eq (count_vars e2) O)"
                ],
                "tactic_res": [
                    "c12_IHe1 : forall m1 m2 : var_map, eq (eval_expr e1 m1) (eval_expr e1 m2)"
                ]
            },
            {
                "tactic_sig": "specialize ( _i _i ) .",
                "tactic_sig_no_out_arg": "specialize ( _i _i ) .",
                "tactic_args": [
                    "c4_IHe2 : forall (_ : eq (count_vars e2) O) (m1 m2 : var_map),\neq (eval_expr e2 m1) (eval_expr e2 m2)",
                    "c12_H1 : eq (count_vars e2) O"
                ],
                "tactic_res": [
                    "c12_IHe2 : forall m1 m2 : var_map, eq (eval_expr e2 m1) (eval_expr e2 m2)"
                ]
            },
            {
                "tactic_sig": "specialize ( _i _i _i ) .",
                "tactic_sig_no_out_arg": "specialize ( _i _i _i ) .",
                "tactic_args": [
                    "c4_IHe1 : forall (_ : eq (count_vars e1) O) (m1 m2 : var_map),\neq (eval_expr e1 m1) (eval_expr e1 m2)",
                    "c9_m1 : var_map",
                    "c9_m2 : var_map"
                ],
                "tactic_res": [
                    "c12_IHe1 : eq (eval_expr e1 m1) (eval_expr e1 m2)"
                ]
            },
            {
                "tactic_sig": "specialize ( _i _i _i ) .",
                "tactic_sig_no_out_arg": "specialize ( _i _i _i ) .",
                "tactic_args": [
                    "c4_IHe2 : forall (_ : eq (count_vars e2) O) (m1 m2 : var_map),\neq (eval_expr e2 m1) (eval_expr e2 m2)",
                    "c9_m1 : var_map",
                    "c9_m2 : var_map"
                ],
                "tactic_res": [
                    "c12_IHe2 : eq (eval_expr e2 m1) (eval_expr e2 m2)"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c12_goal : eq (Init.Nat.add (eval_expr e1 m1) (eval_expr e2 m1))\n  (Init.Nat.add (eval_expr e1 m2) (eval_expr e2 m2))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c5_goal : forall (_ : eq (count_vars (Times e1 e2)) O) (m1 m2 : var_map),\neq (eval_expr (Times e1 e2) m1) (eval_expr (Times e1 e2) m2)"
                ],
                "tactic_res": [
                    "c13_goal : eq (eval_expr (Times e1 e2) m1) (eval_expr (Times e1 e2) m2)",
                    "c13_H : eq (count_vars (Times e1 e2)) O",
                    "c13_m1 : var_map",
                    "c13_m2 : var_map"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c13_goal : eq (eval_expr (Times e1 e2) m1) (eval_expr (Times e1 e2) m2)"
                ],
                "tactic_res": [
                    "c14_goal : eq (Init.Nat.mul (eval_expr e1 m1) (eval_expr e2 m1))\n  (Init.Nat.mul (eval_expr e1 m2) (eval_expr e2 m2))"
                ]
            },
            {
                "tactic_sig": "assert ( count_vars _i + count_vars _i = 0 -> ( count_vars _i = 0 /\\ count_vars _i = 0 ) ) .",
                "tactic_sig_no_out_arg": "assert ( count_vars _i + count_vars _i = 0 -> ( count_vars _i = 0 /\\ count_vars _i = 0 ) ) .",
                "tactic_args": [
                    "c14_goal : eq (Init.Nat.mul (eval_expr e1 m1) (eval_expr e2 m1))\n  (Init.Nat.mul (eval_expr e1 m2) (eval_expr e2 m2))",
                    "c4_e1 : expr",
                    "c4_e2 : expr",
                    "c4_e1 : expr",
                    "c4_e2 : expr"
                ],
                "tactic_res": [
                    "c15_goal : forall _ : eq (Init.Nat.add (count_vars e1) (count_vars e2)) O,\nand (eq (count_vars e1) O) (eq (count_vars e2) O)",
                    "c16_goal : eq (Init.Nat.mul (eval_expr e1 m1) (eval_expr e2 m1))\n  (Init.Nat.mul (eval_expr e1 m2) (eval_expr e2 m2))",
                    "c16_H0 : forall _ : eq (Init.Nat.add (count_vars e1) (count_vars e2)) O,\nand (eq (count_vars e1) O) (eq (count_vars e2) O)"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c15_goal : forall _ : eq (Init.Nat.add (count_vars e1) (count_vars e2)) O,\nand (eq (count_vars e1) O) (eq (count_vars e2) O)",
                    "_global_plus_is_O : forall (n m : nat) (_ : eq (Init.Nat.add n m) O),\n       and (eq n O) (eq m O)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "specialize ( _i _i ) .",
                "tactic_sig_no_out_arg": "specialize ( _i _i ) .",
                "tactic_args": [
                    "c16_H0 : forall _ : eq (Init.Nat.add (count_vars e1) (count_vars e2)) O,\nand (eq (count_vars e1) O) (eq (count_vars e2) O)",
                    "c13_H : eq (count_vars (Times e1 e2)) O"
                ],
                "tactic_res": [
                    "c16_H0 : and (eq (count_vars e1) O) (eq (count_vars e2) O)"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c16_H0 : forall _ : eq (Init.Nat.add (count_vars e1) (count_vars e2)) O,\nand (eq (count_vars e1) O) (eq (count_vars e2) O)"
                ],
                "tactic_res": [
                    "c16_H1 : eq (count_vars e2) O",
                    "c16_H0 : eq (count_vars e1) O"
                ]
            },
            {
                "tactic_sig": "specialize ( _i _i ) .",
                "tactic_sig_no_out_arg": "specialize ( _i _i ) .",
                "tactic_args": [
                    "c4_IHe1 : forall (_ : eq (count_vars e1) O) (m1 m2 : var_map),\neq (eval_expr e1 m1) (eval_expr e1 m2)",
                    "c16_H0 : forall _ : eq (Init.Nat.add (count_vars e1) (count_vars e2)) O,\nand (eq (count_vars e1) O) (eq (count_vars e2) O)"
                ],
                "tactic_res": [
                    "c16_IHe1 : forall m1 m2 : var_map, eq (eval_expr e1 m1) (eval_expr e1 m2)"
                ]
            },
            {
                "tactic_sig": "specialize ( _i _i ) .",
                "tactic_sig_no_out_arg": "specialize ( _i _i ) .",
                "tactic_args": [
                    "c4_IHe2 : forall (_ : eq (count_vars e2) O) (m1 m2 : var_map),\neq (eval_expr e2 m1) (eval_expr e2 m2)",
                    "c16_H1 : eq (count_vars e2) O"
                ],
                "tactic_res": [
                    "c16_IHe2 : forall m1 m2 : var_map, eq (eval_expr e2 m1) (eval_expr e2 m2)"
                ]
            },
            {
                "tactic_sig": "specialize ( _i _i _i ) .",
                "tactic_sig_no_out_arg": "specialize ( _i _i _i ) .",
                "tactic_args": [
                    "c4_IHe1 : forall (_ : eq (count_vars e1) O) (m1 m2 : var_map),\neq (eval_expr e1 m1) (eval_expr e1 m2)",
                    "c13_m1 : var_map",
                    "c13_m2 : var_map"
                ],
                "tactic_res": [
                    "c16_IHe1 : eq (eval_expr e1 m1) (eval_expr e1 m2)"
                ]
            },
            {
                "tactic_sig": "specialize ( _i _i _i ) .",
                "tactic_sig_no_out_arg": "specialize ( _i _i _i ) .",
                "tactic_args": [
                    "c4_IHe2 : forall (_ : eq (count_vars e2) O) (m1 m2 : var_map),\neq (eval_expr e2 m1) (eval_expr e2 m2)",
                    "c13_m1 : var_map",
                    "c13_m2 : var_map"
                ],
                "tactic_res": [
                    "c16_IHe2 : eq (eval_expr e2 m1) (eval_expr e2 m2)"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c16_goal : eq (Init.Nat.mul (eval_expr e1 m1) (eval_expr e2 m1))\n  (Init.Nat.mul (eval_expr e1 m2) (eval_expr e2 m2))"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "rename_preserves_semantics",
        "proof": [
            {
                "tactic_sig": "Theorem rename_preserves_semantics : forall e m from to , m from = m to -> eval_expr e m = eval_expr ( rename e from to ) m .",
                "tactic_sig_no_out_arg": "Theorem rename_preserves_semantics : forall e m from to , m from = m to -> eval_expr e m = eval_expr ( rename e from to ) m .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (e : expr) (m : forall _ : var, nat) (from to : var)\n  (_ : eq (m from) (m to)),\neq (eval_expr e m) (eval_expr (rename e from to) m)"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c1_goal : forall (e : expr) (m : forall _ : var, nat) (from to : var)\n  (_ : eq (m from) (m to)),\neq (eval_expr e m) (eval_expr (rename e from to) m)"
                ],
                "tactic_res": [
                    "c2_goal : eq (eval_expr e m) (eval_expr (rename e from to) m)",
                    "c2_e : expr",
                    "c2_m : forall _ : var, nat",
                    "c2_from : var",
                    "c2_to : var",
                    "c2_H : eq (m from) (m to)"
                ]
            },
            {
                "tactic_sig": "induction _i .",
                "tactic_sig_no_out_arg": "induction _i .",
                "tactic_args": [
                    "c2_goal : eq (eval_expr e m) (eval_expr (rename e from to) m)",
                    "c2_e : expr"
                ],
                "tactic_res": [
                    "c3_goal : eq (eval_expr (Const n) m) (eval_expr (rename (Const n) from to) m)",
                    "c3_n : nat",
                    "c4_goal : eq (eval_expr (Var v) m) (eval_expr (rename (Var v) from to) m)",
                    "c4_v : var",
                    "c5_goal : eq (eval_expr (Plus e1 e2) m)\n  (eval_expr (rename (Plus e1 e2) from to) m)",
                    "c5_IHe2 : eq (eval_expr e2 m) (eval_expr (rename e2 from to) m)",
                    "c5_IHe1 : eq (eval_expr e1 m) (eval_expr (rename e1 from to) m)",
                    "c5_e2 : expr",
                    "c5_e1 : expr",
                    "c6_goal : eq (eval_expr (Times e1 e2) m)\n  (eval_expr (rename (Times e1 e2) from to) m)",
                    "c6_IHe2 : eq (eval_expr e2 m) (eval_expr (rename e2 from to) m)",
                    "c6_IHe1 : eq (eval_expr e1 m) (eval_expr (rename e1 from to) m)",
                    "c6_e2 : expr",
                    "c6_e1 : expr"
                ]
            },
            {
                "tactic_sig": "try simpl .",
                "tactic_sig_no_out_arg": "try simpl .",
                "tactic_args": [
                    "c3_goal : eq (eval_expr (Const n) m) (eval_expr (rename (Const n) from to) m)"
                ],
                "tactic_res": [
                    "c7_goal : eq n n"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c7_goal : eq n n"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "try simpl .",
                "tactic_sig_no_out_arg": "try simpl .",
                "tactic_args": [
                    "c4_goal : eq (eval_expr (Var v) m) (eval_expr (rename (Var v) from to) m)"
                ],
                "tactic_res": [
                    "c8_goal : eq (m v) (eval_expr (if var_eq from v then Var to else Var v) m)"
                ]
            },
            {
                "tactic_sig": "try simpl .",
                "tactic_sig_no_out_arg": "try simpl .",
                "tactic_args": [
                    "c5_goal : eq (eval_expr (Plus e1 e2) m)\n  (eval_expr (rename (Plus e1 e2) from to) m)"
                ],
                "tactic_res": [
                    "c9_goal : eq (Init.Nat.add (eval_expr e1 m) (eval_expr e2 m))\n  (Init.Nat.add (eval_expr (rename e1 from to) m)\n     (eval_expr (rename e2 from to) m))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c9_goal : eq (Init.Nat.add (eval_expr e1 m) (eval_expr e2 m))\n  (Init.Nat.add (eval_expr (rename e1 from to) m)\n     (eval_expr (rename e2 from to) m))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "try simpl .",
                "tactic_sig_no_out_arg": "try simpl .",
                "tactic_args": [
                    "c6_goal : eq (eval_expr (Times e1 e2) m)\n  (eval_expr (rename (Times e1 e2) from to) m)"
                ],
                "tactic_res": [
                    "c10_goal : eq (Init.Nat.mul (eval_expr e1 m) (eval_expr e2 m))\n  (Init.Nat.mul (eval_expr (rename e1 from to) m)\n     (eval_expr (rename e2 from to) m))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c10_goal : eq (Init.Nat.mul (eval_expr e1 m) (eval_expr e2 m))\n  (Init.Nat.mul (eval_expr (rename e1 from to) m)\n     (eval_expr (rename e2 from to) m))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct ( var_eq _i _i ) as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct ( var_eq _i _i ) .",
                "tactic_args": [
                    "c8_goal : eq (m v) (eval_expr (if var_eq from v then Var to else Var v) m)",
                    "c2_from : var",
                    "c4_v : var"
                ],
                "tactic_res": [
                    "c11_goal : eq (m v) (eval_expr (Var to) m)",
                    "c11_e : eq from v",
                    "c12_goal : eq (m v) (eval_expr (Var v) m)",
                    "c12_n : not (eq from v)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c11_goal : eq (m v) (eval_expr (Var to) m)"
                ],
                "tactic_res": [
                    "c13_goal : eq (m v) (m to)"
                ]
            },
            {
                "tactic_sig": "rewrite <- _i .",
                "tactic_sig_no_out_arg": "rewrite <- _i .",
                "tactic_args": [
                    "c13_goal : eq (m v) (m to)",
                    "c2_H : eq (m from) (m to)"
                ],
                "tactic_res": [
                    "c14_goal : eq (m v) (m from)"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c14_goal : eq (m v) (m from)",
                    "c2_e : expr"
                ],
                "tactic_res": [
                    "c15_goal : eq (m v) (m v)"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c15_goal : eq (m v) (m v)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c12_goal : eq (m v) (eval_expr (Var v) m)"
                ],
                "tactic_res": [
                    "c16_goal : eq (m v) (m v)"
                ]
            },
            {
                "tactic_sig": "reflexivity .",
                "tactic_sig_no_out_arg": "reflexivity .",
                "tactic_args": [
                    "c16_goal : eq (m v) (m v)"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "constant_fold_is_effective",
        "proof": [
            {
                "tactic_sig": "Theorem constant_fold_is_effective : forall e , size ( constant_fold e ) <= size e .",
                "tactic_sig_no_out_arg": "Theorem constant_fold_is_effective : forall e , size ( constant_fold e ) <= size e .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall e : expr, le (size (constant_fold e)) (size e)"
                ]
            },
            {
                "tactic_sig": "intros _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c1_goal : forall e : expr, le (size (constant_fold e)) (size e)"
                ],
                "tactic_res": [
                    "c2_goal : le (size (constant_fold e)) (size e)",
                    "c2_e : expr"
                ]
            },
            {
                "tactic_sig": "induction _i .",
                "tactic_sig_no_out_arg": "induction _i .",
                "tactic_args": [
                    "c2_goal : le (size (constant_fold e)) (size e)",
                    "c2_e : expr"
                ],
                "tactic_res": [
                    "c3_goal : le (size (constant_fold (Const n))) (size (Const n))",
                    "c3_n : nat",
                    "c4_goal : le (size (constant_fold (Var v))) (size (Var v))",
                    "c4_v : var",
                    "c5_goal : le (size (constant_fold (Plus e1 e2))) (size (Plus e1 e2))",
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)",
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)",
                    "c5_e2 : expr",
                    "c5_e1 : expr",
                    "c6_goal : le (size (constant_fold (Times e1 e2))) (size (Times e1 e2))",
                    "c6_IHe2 : le (size (constant_fold e2)) (size e2)",
                    "c6_IHe1 : le (size (constant_fold e1)) (size e1)",
                    "c6_e2 : expr",
                    "c6_e1 : expr"
                ]
            },
            {
                "tactic_sig": "try simpl .",
                "tactic_sig_no_out_arg": "try simpl .",
                "tactic_args": [
                    "c3_goal : le (size (constant_fold (Const n))) (size (Const n))"
                ],
                "tactic_res": [
                    "c7_goal : le (S O) (S O)"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c7_goal : le (S O) (S O)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "try simpl .",
                "tactic_sig_no_out_arg": "try simpl .",
                "tactic_args": [
                    "c4_goal : le (size (constant_fold (Var v))) (size (Var v))"
                ],
                "tactic_res": [
                    "c8_goal : le (S O) (S O)"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c8_goal : le (S O) (S O)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "try simpl .",
                "tactic_sig_no_out_arg": "try simpl .",
                "tactic_args": [
                    "c5_goal : le (size (constant_fold (Plus e1 e2))) (size (Plus e1 e2))"
                ],
                "tactic_res": [
                    "c9_goal : le\n  (size\n     match constant_fold e1 with\n     | Const (O as n1) =>\n         match constant_fold e2 with\n         | Const n2 => Const (Init.Nat.add n1 n2)\n         | _ => constant_fold e2\n         end\n     | Const (S _ as n1) =>\n         match constant_fold e2 with\n         | Const n2 => Const (Init.Nat.add n1 n2)\n         | _ => Plus (constant_fold e1) (constant_fold e2)\n         end\n     | _ =>\n         match constant_fold e2 with\n         | Const O => constant_fold e1\n         | _ => Plus (constant_fold e1) (constant_fold e2)\n         end\n     end) (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "try simpl .",
                "tactic_sig_no_out_arg": "try simpl .",
                "tactic_args": [
                    "c6_goal : le (size (constant_fold (Times e1 e2))) (size (Times e1 e2))"
                ],
                "tactic_res": [
                    "c10_goal : le\n  (size\n     match constant_fold e1 with\n     | Const (O as n1) =>\n         match constant_fold e2 with\n         | Const n2 => Const (Init.Nat.mul n1 n2)\n         | _ => Const O\n         end\n     | Const (S O as n1) =>\n         match constant_fold e2 with\n         | Const n2 => Const (Init.Nat.mul n1 n2)\n         | _ => constant_fold e2\n         end\n     | Const (S (S _) as n1) =>\n         match constant_fold e2 with\n         | Const n2 => Const (Init.Nat.mul n1 n2)\n         | _ => Times (constant_fold e1) (constant_fold e2)\n         end\n     | _ =>\n         match constant_fold e2 with\n         | Const O => Const O\n         | Const (S O) => constant_fold e1\n         | _ => Times (constant_fold e1) (constant_fold e2)\n         end\n     end) (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "destruct ( constant_fold _i ) as [  _o _o | _o _o | _o _o _o | _o _o _o ] .",
                "tactic_sig_no_out_arg": "destruct ( constant_fold _i ) .",
                "tactic_args": [
                    "c9_goal : le\n  (size\n     match constant_fold e1 with\n     | Const (O as n1) =>\n         match constant_fold e2 with\n         | Const n2 => Const (Init.Nat.add n1 n2)\n         | _ => constant_fold e2\n         end\n     | Const (S _ as n1) =>\n         match constant_fold e2 with\n         | Const n2 => Const (Init.Nat.add n1 n2)\n         | _ => Plus (constant_fold e1) (constant_fold e2)\n         end\n     | _ =>\n         match constant_fold e2 with\n         | Const O => constant_fold e1\n         | _ => Plus (constant_fold e1) (constant_fold e2)\n         end\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c5_e1 : expr"
                ],
                "tactic_res": [
                    "c11_goal : le\n  (size\n     match n with\n     | O =>\n         match constant_fold e2 with\n         | Const n2 => Const (Init.Nat.add n n2)\n         | _ => constant_fold e2\n         end\n     | S _ =>\n         match constant_fold e2 with\n         | Const n2 => Const (Init.Nat.add n n2)\n         | _ => Plus (Const n) (constant_fold e2)\n         end\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c11_IHe1 : le (size (Const n)) (size e1)",
                    "c11_n : nat",
                    "c12_goal : le\n  (size\n     match constant_fold e2 with\n     | Const O => Var v\n     | _ => Plus (Var v) (constant_fold e2)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c12_IHe1 : le (size (Var v)) (size e1)",
                    "c12_v : var",
                    "c13_goal : le\n  (size\n     match constant_fold e2 with\n     | Const O => Plus e3 e4\n     | _ => Plus (Plus e3 e4) (constant_fold e2)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c13_IHe1 : le (size (Plus e3 e4)) (size e1)",
                    "c13_e4 : expr",
                    "c13_e3 : expr",
                    "c14_goal : le\n  (size\n     match constant_fold e2 with\n     | Const O => Times e3 e4\n     | _ => Plus (Times e3 e4) (constant_fold e2)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c14_IHe1 : le (size (Times e3 e4)) (size e1)",
                    "c14_e4 : expr",
                    "c14_e3 : expr"
                ]
            },
            {
                "tactic_sig": "destruct ( constant_fold _i ) as [  _o _o | _o _o | _o _o _o | _o _o _o ] .",
                "tactic_sig_no_out_arg": "destruct ( constant_fold _i ) .",
                "tactic_args": [
                    "c11_goal : le\n  (size\n     match n with\n     | O =>\n         match constant_fold e2 with\n         | Const n2 => Const (Init.Nat.add n n2)\n         | _ => constant_fold e2\n         end\n     | S _ =>\n         match constant_fold e2 with\n         | Const n2 => Const (Init.Nat.add n n2)\n         | _ => Plus (Const n) (constant_fold e2)\n         end\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c5_e2 : expr"
                ],
                "tactic_res": [
                    "c15_goal : le (size match n with\n         | O | _ => Const (Init.Nat.add n n0)\n         end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c15_IHe2 : le (size (Const n0)) (size e2)",
                    "c15_n0 : nat",
                    "c16_goal : le (size match n with\n         | O => Var v\n         | S _ => Plus (Const n) (Var v)\n         end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c16_IHe2 : le (size (Var v)) (size e2)",
                    "c16_v : var",
                    "c17_goal : le\n  (size\n     match n with\n     | O => Plus e3 e4\n     | S _ => Plus (Const n) (Plus e3 e4)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c17_IHe2 : le (size (Plus e3 e4)) (size e2)",
                    "c17_e4 : expr",
                    "c17_e3 : expr",
                    "c18_goal : le\n  (size\n     match n with\n     | O => Times e3 e4\n     | S _ => Plus (Const n) (Times e3 e4)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c18_IHe2 : le (size (Times e3 e4)) (size e2)",
                    "c18_e4 : expr",
                    "c18_e3 : expr"
                ]
            },
            {
                "tactic_sig": "try destruct _i .",
                "tactic_sig_no_out_arg": "try destruct _i .",
                "tactic_args": [
                    "c15_goal : le (size match n with\n         | O | _ => Const (Init.Nat.add n n0)\n         end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c3_n : nat"
                ],
                "tactic_res": [
                    "c19_goal : le (size (Const (Init.Nat.add O n0)))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c19_IHe1 : le (size (Const O)) (size e1)",
                    "c20_goal : le (size (Const (Init.Nat.add (S n) n0)))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c20_IHe1 : le (size (Const (S n))) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c19_goal : le (size (Const (Init.Nat.add O n0)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c21_goal : le (S O) (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c21_IHe1 : le (S O) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c21_IHe2 : le (S O) (size e2)"
                ]
            },
            {
                "tactic_sig": "try lia .",
                "tactic_sig_no_out_arg": "try lia .",
                "tactic_args": [
                    "c21_goal : le (S O) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c20_goal : le (size (Const (Init.Nat.add (S n) n0)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c22_goal : le (S O) (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c22_IHe1 : le (S O) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c22_IHe2 : le (S O) (size e2)"
                ]
            },
            {
                "tactic_sig": "try lia .",
                "tactic_sig_no_out_arg": "try lia .",
                "tactic_args": [
                    "c22_goal : le (S O) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "try destruct _i .",
                "tactic_sig_no_out_arg": "try destruct _i .",
                "tactic_args": [
                    "c16_goal : le (size match n with\n         | O => Var v\n         | S _ => Plus (Const n) (Var v)\n         end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c3_n : nat"
                ],
                "tactic_res": [
                    "c23_goal : le (size (Var v)) (S (Init.Nat.add (size e1) (size e2)))",
                    "c23_IHe1 : le (size (Const O)) (size e1)",
                    "c24_goal : le (size (Plus (Const (S n)) (Var v)))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c24_IHe1 : le (size (Const (S n))) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c23_goal : le (size (Var v)) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c25_goal : le (S O) (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c25_IHe1 : le (S O) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c25_IHe2 : le (S O) (size e2)"
                ]
            },
            {
                "tactic_sig": "try lia .",
                "tactic_sig_no_out_arg": "try lia .",
                "tactic_args": [
                    "c25_goal : le (S O) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c24_goal : le (size (Plus (Const (S n)) (Var v)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c26_goal : le (S (S (S O))) (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c26_IHe1 : le (S O) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c26_IHe2 : le (S O) (size e2)"
                ]
            },
            {
                "tactic_sig": "try lia .",
                "tactic_sig_no_out_arg": "try lia .",
                "tactic_args": [
                    "c26_goal : le (S (S (S O))) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "try destruct _i .",
                "tactic_sig_no_out_arg": "try destruct _i .",
                "tactic_args": [
                    "c17_goal : le\n  (size\n     match n with\n     | O => Plus e3 e4\n     | S _ => Plus (Const n) (Plus e3 e4)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c3_n : nat"
                ],
                "tactic_res": [
                    "c27_goal : le (size (Plus e3 e4)) (S (Init.Nat.add (size e1) (size e2)))",
                    "c27_IHe1 : le (size (Const O)) (size e1)",
                    "c28_goal : le (size (Plus (Const (S n)) (Plus e3 e4)))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c28_IHe1 : le (size (Const (S n))) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c27_goal : le (size (Plus e3 e4)) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c29_goal : le (S (Init.Nat.add (size e3) (size e4)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c29_IHe1 : le (S O) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c29_IHe2 : le (S (Init.Nat.add (size e3) (size e4))) (size e2)"
                ]
            },
            {
                "tactic_sig": "try lia .",
                "tactic_sig_no_out_arg": "try lia .",
                "tactic_args": [
                    "c29_goal : le (S (Init.Nat.add (size e3) (size e4)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c28_goal : le (size (Plus (Const (S n)) (Plus e3 e4)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c30_goal : le (S (S (S (Init.Nat.add (size e3) (size e4)))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c30_IHe1 : le (S O) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c30_IHe2 : le (S (Init.Nat.add (size e3) (size e4))) (size e2)"
                ]
            },
            {
                "tactic_sig": "try lia .",
                "tactic_sig_no_out_arg": "try lia .",
                "tactic_args": [
                    "c30_goal : le (S (S (S (Init.Nat.add (size e3) (size e4)))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "try destruct _i .",
                "tactic_sig_no_out_arg": "try destruct _i .",
                "tactic_args": [
                    "c18_goal : le\n  (size\n     match n with\n     | O => Times e3 e4\n     | S _ => Plus (Const n) (Times e3 e4)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c3_n : nat"
                ],
                "tactic_res": [
                    "c31_goal : le (size (Times e3 e4)) (S (Init.Nat.add (size e1) (size e2)))",
                    "c31_IHe1 : le (size (Const O)) (size e1)",
                    "c32_goal : le (size (Plus (Const (S n)) (Times e3 e4)))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c32_IHe1 : le (size (Const (S n))) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c31_goal : le (size (Times e3 e4)) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c33_goal : le (S (Init.Nat.add (size e3) (size e4)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c33_IHe1 : le (S O) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c33_IHe2 : le (S (Init.Nat.add (size e3) (size e4))) (size e2)"
                ]
            },
            {
                "tactic_sig": "try lia .",
                "tactic_sig_no_out_arg": "try lia .",
                "tactic_args": [
                    "c33_goal : le (S (Init.Nat.add (size e3) (size e4)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c32_goal : le (size (Plus (Const (S n)) (Times e3 e4)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c34_goal : le (S (S (S (Init.Nat.add (size e3) (size e4)))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c34_IHe1 : le (S O) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c34_IHe2 : le (S (Init.Nat.add (size e3) (size e4))) (size e2)"
                ]
            },
            {
                "tactic_sig": "try lia .",
                "tactic_sig_no_out_arg": "try lia .",
                "tactic_args": [
                    "c34_goal : le (S (S (S (Init.Nat.add (size e3) (size e4)))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct ( constant_fold _i ) as [  _o _o | _o _o | _o _o _o | _o _o _o ] .",
                "tactic_sig_no_out_arg": "destruct ( constant_fold _i ) .",
                "tactic_args": [
                    "c12_goal : le\n  (size\n     match constant_fold e2 with\n     | Const O => Var v\n     | _ => Plus (Var v) (constant_fold e2)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c5_e2 : expr"
                ],
                "tactic_res": [
                    "c35_goal : le (size match n with\n         | O => Var v\n         | S _ => Plus (Var v) (Const n)\n         end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c35_IHe2 : le (size (Const n)) (size e2)",
                    "c35_n : nat",
                    "c36_goal : le (size (Plus (Var v) (Var v0)))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c36_IHe2 : le (size (Var v0)) (size e2)",
                    "c36_v0 : var",
                    "c37_goal : le (size (Plus (Var v) (Plus e3 e4)))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c37_IHe2 : le (size (Plus e3 e4)) (size e2)",
                    "c37_e4 : expr",
                    "c37_e3 : expr",
                    "c38_goal : le (size (Plus (Var v) (Times e3 e4)))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c38_IHe2 : le (size (Times e3 e4)) (size e2)",
                    "c38_e4 : expr",
                    "c38_e3 : expr"
                ]
            },
            {
                "tactic_sig": "try destruct _i .",
                "tactic_sig_no_out_arg": "try destruct _i .",
                "tactic_args": [
                    "c35_goal : le (size match n with\n         | O => Var v\n         | S _ => Plus (Var v) (Const n)\n         end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c3_n : nat"
                ],
                "tactic_res": [
                    "c39_goal : le (size (Var v)) (S (Init.Nat.add (size e1) (size e2)))",
                    "c39_IHe2 : le (size (Const O)) (size e2)",
                    "c40_goal : le (size (Plus (Var v) (Const (S n))))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c40_IHe2 : le (size (Const (S n))) (size e2)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c39_goal : le (size (Var v)) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c41_goal : le (S O) (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c41_IHe1 : le (S O) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c41_IHe2 : le (S O) (size e2)"
                ]
            },
            {
                "tactic_sig": "lia .",
                "tactic_sig_no_out_arg": "lia .",
                "tactic_args": [
                    "c41_goal : le (S O) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c40_goal : le (size (Plus (Var v) (Const (S n))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c42_goal : le (S (S (S O))) (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c42_IHe1 : le (S O) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c42_IHe2 : le (S O) (size e2)"
                ]
            },
            {
                "tactic_sig": "lia .",
                "tactic_sig_no_out_arg": "lia .",
                "tactic_args": [
                    "c42_goal : le (S (S (S O))) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c36_goal : le (size (Plus (Var v) (Var v0)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c43_goal : le (S (S (S O))) (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c43_IHe1 : le (S O) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c43_IHe2 : le (S O) (size e2)"
                ]
            },
            {
                "tactic_sig": "lia .",
                "tactic_sig_no_out_arg": "lia .",
                "tactic_args": [
                    "c43_goal : le (S (S (S O))) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c37_goal : le (size (Plus (Var v) (Plus e3 e4)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c44_goal : le (S (S (S (Init.Nat.add (size e3) (size e4)))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c44_IHe1 : le (S O) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c44_IHe2 : le (S (Init.Nat.add (size e3) (size e4))) (size e2)"
                ]
            },
            {
                "tactic_sig": "lia .",
                "tactic_sig_no_out_arg": "lia .",
                "tactic_args": [
                    "c44_goal : le (S (S (S (Init.Nat.add (size e3) (size e4)))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c38_goal : le (size (Plus (Var v) (Times e3 e4)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c45_goal : le (S (S (S (Init.Nat.add (size e3) (size e4)))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c45_IHe1 : le (S O) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c45_IHe2 : le (S (Init.Nat.add (size e3) (size e4))) (size e2)"
                ]
            },
            {
                "tactic_sig": "lia .",
                "tactic_sig_no_out_arg": "lia .",
                "tactic_args": [
                    "c45_goal : le (S (S (S (Init.Nat.add (size e3) (size e4)))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct ( constant_fold _i ) as [  _o _o | _o _o | _o _o _o | _o _o _o ] .",
                "tactic_sig_no_out_arg": "destruct ( constant_fold _i ) .",
                "tactic_args": [
                    "c13_goal : le\n  (size\n     match constant_fold e2 with\n     | Const O => Plus e3 e4\n     | _ => Plus (Plus e3 e4) (constant_fold e2)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c5_e2 : expr"
                ],
                "tactic_res": [
                    "c46_goal : le\n  (size\n     match n with\n     | O => Plus e3 e4\n     | S _ => Plus (Plus e3 e4) (Const n)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c46_IHe2 : le (size (Const n)) (size e2)",
                    "c46_n : nat",
                    "c47_goal : le (size (Plus (Plus e3 e4) (Var v)))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c47_IHe2 : le (size (Var v)) (size e2)",
                    "c47_v : var",
                    "c48_goal : le (size (Plus (Plus e3 e4) (Plus e5 e6)))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c48_IHe2 : le (size (Plus e5 e6)) (size e2)",
                    "c48_e6 : expr",
                    "c48_e5 : expr",
                    "c49_goal : le (size (Plus (Plus e3 e4) (Times e5 e6)))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c49_IHe2 : le (size (Times e5 e6)) (size e2)",
                    "c49_e6 : expr",
                    "c49_e5 : expr"
                ]
            },
            {
                "tactic_sig": "try destruct _i .",
                "tactic_sig_no_out_arg": "try destruct _i .",
                "tactic_args": [
                    "c46_goal : le\n  (size\n     match n with\n     | O => Plus e3 e4\n     | S _ => Plus (Plus e3 e4) (Const n)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c3_n : nat"
                ],
                "tactic_res": [
                    "c50_goal : le (size (Plus e3 e4)) (S (Init.Nat.add (size e1) (size e2)))",
                    "c50_IHe2 : le (size (Const O)) (size e2)",
                    "c51_goal : le (size (Plus (Plus e3 e4) (Const (S n))))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c51_IHe2 : le (size (Const (S n))) (size e2)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c50_goal : le (size (Plus e3 e4)) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c52_goal : le (S (Init.Nat.add (size e3) (size e4)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "try simpl in _i .",
                "tactic_sig_no_out_arg": "try simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c52_IHe1 : le (S (Init.Nat.add (size e3) (size e4))) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c52_IHe2 : le (S O) (size e2)"
                ]
            },
            {
                "tactic_sig": "lia .",
                "tactic_sig_no_out_arg": "lia .",
                "tactic_args": [
                    "c52_goal : le (S (Init.Nat.add (size e3) (size e4)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c51_goal : le (size (Plus (Plus e3 e4) (Const (S n))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c53_goal : le (S (S (Init.Nat.add (Init.Nat.add (size e3) (size e4)) (S O))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "try simpl in _i .",
                "tactic_sig_no_out_arg": "try simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c53_IHe1 : le (S (Init.Nat.add (size e3) (size e4))) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c53_IHe2 : le (S O) (size e2)"
                ]
            },
            {
                "tactic_sig": "lia .",
                "tactic_sig_no_out_arg": "lia .",
                "tactic_args": [
                    "c53_goal : le (S (S (Init.Nat.add (Init.Nat.add (size e3) (size e4)) (S O))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c47_goal : le (size (Plus (Plus e3 e4) (Var v)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c54_goal : le (S (S (Init.Nat.add (Init.Nat.add (size e3) (size e4)) (S O))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "try simpl in _i .",
                "tactic_sig_no_out_arg": "try simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c54_IHe1 : le (S (Init.Nat.add (size e3) (size e4))) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c54_IHe2 : le (S O) (size e2)"
                ]
            },
            {
                "tactic_sig": "lia .",
                "tactic_sig_no_out_arg": "lia .",
                "tactic_args": [
                    "c54_goal : le (S (S (Init.Nat.add (Init.Nat.add (size e3) (size e4)) (S O))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c48_goal : le (size (Plus (Plus e3 e4) (Plus e5 e6)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c55_goal : le\n  (S\n     (S\n        (Init.Nat.add (Init.Nat.add (size e3) (size e4))\n           (S (Init.Nat.add (size e5) (size e6))))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "try simpl in _i .",
                "tactic_sig_no_out_arg": "try simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c55_IHe1 : le (S (Init.Nat.add (size e3) (size e4))) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c55_IHe2 : le (S (Init.Nat.add (size e5) (size e6))) (size e2)"
                ]
            },
            {
                "tactic_sig": "lia .",
                "tactic_sig_no_out_arg": "lia .",
                "tactic_args": [
                    "c55_goal : le\n  (S\n     (S\n        (Init.Nat.add (Init.Nat.add (size e3) (size e4))\n           (S (Init.Nat.add (size e5) (size e6))))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c49_goal : le (size (Plus (Plus e3 e4) (Times e5 e6)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c56_goal : le\n  (S\n     (S\n        (Init.Nat.add (Init.Nat.add (size e3) (size e4))\n           (S (Init.Nat.add (size e5) (size e6))))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "try simpl in _i .",
                "tactic_sig_no_out_arg": "try simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c56_IHe1 : le (S (Init.Nat.add (size e3) (size e4))) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c56_IHe2 : le (S (Init.Nat.add (size e5) (size e6))) (size e2)"
                ]
            },
            {
                "tactic_sig": "lia .",
                "tactic_sig_no_out_arg": "lia .",
                "tactic_args": [
                    "c56_goal : le\n  (S\n     (S\n        (Init.Nat.add (Init.Nat.add (size e3) (size e4))\n           (S (Init.Nat.add (size e5) (size e6))))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct ( constant_fold _i ) as [  _o _o | _o _o | _o _o _o | _o _o _o ] .",
                "tactic_sig_no_out_arg": "destruct ( constant_fold _i ) .",
                "tactic_args": [
                    "c14_goal : le\n  (size\n     match constant_fold e2 with\n     | Const O => Times e3 e4\n     | _ => Plus (Times e3 e4) (constant_fold e2)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c5_e2 : expr"
                ],
                "tactic_res": [
                    "c57_goal : le\n  (size\n     match n with\n     | O => Times e3 e4\n     | S _ => Plus (Times e3 e4) (Const n)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c57_IHe2 : le (size (Const n)) (size e2)",
                    "c57_n : nat",
                    "c58_goal : le (size (Plus (Times e3 e4) (Var v)))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c58_IHe2 : le (size (Var v)) (size e2)",
                    "c58_v : var",
                    "c59_goal : le (size (Plus (Times e3 e4) (Plus e5 e6)))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c59_IHe2 : le (size (Plus e5 e6)) (size e2)",
                    "c59_e6 : expr",
                    "c59_e5 : expr",
                    "c60_goal : le (size (Plus (Times e3 e4) (Times e5 e6)))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c60_IHe2 : le (size (Times e5 e6)) (size e2)",
                    "c60_e6 : expr",
                    "c60_e5 : expr"
                ]
            },
            {
                "tactic_sig": "try destruct _i .",
                "tactic_sig_no_out_arg": "try destruct _i .",
                "tactic_args": [
                    "c57_goal : le\n  (size\n     match n with\n     | O => Times e3 e4\n     | S _ => Plus (Times e3 e4) (Const n)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c3_n : nat"
                ],
                "tactic_res": [
                    "c61_goal : le (size (Times e3 e4)) (S (Init.Nat.add (size e1) (size e2)))",
                    "c61_IHe2 : le (size (Const O)) (size e2)",
                    "c62_goal : le (size (Plus (Times e3 e4) (Const (S n))))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c62_IHe2 : le (size (Const (S n))) (size e2)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c61_goal : le (size (Times e3 e4)) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c63_goal : le (S (Init.Nat.add (size e3) (size e4)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "try simpl in _i .",
                "tactic_sig_no_out_arg": "try simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c63_IHe1 : le (S (Init.Nat.add (size e3) (size e4))) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c63_IHe2 : le (S O) (size e2)"
                ]
            },
            {
                "tactic_sig": "lia .",
                "tactic_sig_no_out_arg": "lia .",
                "tactic_args": [
                    "c63_goal : le (S (Init.Nat.add (size e3) (size e4)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c62_goal : le (size (Plus (Times e3 e4) (Const (S n))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c64_goal : le (S (S (Init.Nat.add (Init.Nat.add (size e3) (size e4)) (S O))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "try simpl in _i .",
                "tactic_sig_no_out_arg": "try simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c64_IHe1 : le (S (Init.Nat.add (size e3) (size e4))) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c64_IHe2 : le (S O) (size e2)"
                ]
            },
            {
                "tactic_sig": "lia .",
                "tactic_sig_no_out_arg": "lia .",
                "tactic_args": [
                    "c64_goal : le (S (S (Init.Nat.add (Init.Nat.add (size e3) (size e4)) (S O))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c58_goal : le (size (Plus (Times e3 e4) (Var v)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c65_goal : le (S (S (Init.Nat.add (Init.Nat.add (size e3) (size e4)) (S O))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "try simpl in _i .",
                "tactic_sig_no_out_arg": "try simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c65_IHe1 : le (S (Init.Nat.add (size e3) (size e4))) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c65_IHe2 : le (S O) (size e2)"
                ]
            },
            {
                "tactic_sig": "lia .",
                "tactic_sig_no_out_arg": "lia .",
                "tactic_args": [
                    "c65_goal : le (S (S (Init.Nat.add (Init.Nat.add (size e3) (size e4)) (S O))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c59_goal : le (size (Plus (Times e3 e4) (Plus e5 e6)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c66_goal : le\n  (S\n     (S\n        (Init.Nat.add (Init.Nat.add (size e3) (size e4))\n           (S (Init.Nat.add (size e5) (size e6))))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "try simpl in _i .",
                "tactic_sig_no_out_arg": "try simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c66_IHe1 : le (S (Init.Nat.add (size e3) (size e4))) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c66_IHe2 : le (S (Init.Nat.add (size e5) (size e6))) (size e2)"
                ]
            },
            {
                "tactic_sig": "lia .",
                "tactic_sig_no_out_arg": "lia .",
                "tactic_args": [
                    "c66_goal : le\n  (S\n     (S\n        (Init.Nat.add (Init.Nat.add (size e3) (size e4))\n           (S (Init.Nat.add (size e5) (size e6))))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c60_goal : le (size (Plus (Times e3 e4) (Times e5 e6)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c67_goal : le\n  (S\n     (S\n        (Init.Nat.add (Init.Nat.add (size e3) (size e4))\n           (S (Init.Nat.add (size e5) (size e6))))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "try simpl in _i .",
                "tactic_sig_no_out_arg": "try simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c67_IHe1 : le (S (Init.Nat.add (size e3) (size e4))) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c67_IHe2 : le (S (Init.Nat.add (size e5) (size e6))) (size e2)"
                ]
            },
            {
                "tactic_sig": "lia .",
                "tactic_sig_no_out_arg": "lia .",
                "tactic_args": [
                    "c67_goal : le\n  (S\n     (S\n        (Init.Nat.add (Init.Nat.add (size e3) (size e4))\n           (S (Init.Nat.add (size e5) (size e6))))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct ( constant_fold _i ) as [  _o _o | _o _o | _o _o _o | _o _o _o ] .",
                "tactic_sig_no_out_arg": "destruct ( constant_fold _i ) .",
                "tactic_args": [
                    "c10_goal : le\n  (size\n     match constant_fold e1 with\n     | Const (O as n1) =>\n         match constant_fold e2 with\n         | Const n2 => Const (Init.Nat.mul n1 n2)\n         | _ => Const O\n         end\n     | Const (S O as n1) =>\n         match constant_fold e2 with\n         | Const n2 => Const (Init.Nat.mul n1 n2)\n         | _ => constant_fold e2\n         end\n     | Const (S (S _) as n1) =>\n         match constant_fold e2 with\n         | Const n2 => Const (Init.Nat.mul n1 n2)\n         | _ => Times (constant_fold e1) (constant_fold e2)\n         end\n     | _ =>\n         match constant_fold e2 with\n         | Const O => Const O\n         | Const (S O) => constant_fold e1\n         | _ => Times (constant_fold e1) (constant_fold e2)\n         end\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c5_e1 : expr"
                ],
                "tactic_res": [
                    "c68_goal : le\n  (size\n     match n with\n     | O =>\n         match constant_fold e2 with\n         | Const n2 => Const (Init.Nat.mul n n2)\n         | _ => Const O\n         end\n     | S O =>\n         match constant_fold e2 with\n         | Const n2 => Const (Init.Nat.mul n n2)\n         | _ => constant_fold e2\n         end\n     | S (S _) =>\n         match constant_fold e2 with\n         | Const n2 => Const (Init.Nat.mul n n2)\n         | _ => Times (Const n) (constant_fold e2)\n         end\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c68_IHe1 : le (size (Const n)) (size e1)",
                    "c68_n : nat",
                    "c69_goal : le\n  (size\n     match constant_fold e2 with\n     | Const O => Const O\n     | Const (S O) => Var v\n     | _ => Times (Var v) (constant_fold e2)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c69_IHe1 : le (size (Var v)) (size e1)",
                    "c69_v : var",
                    "c70_goal : le\n  (size\n     match constant_fold e2 with\n     | Const O => Const O\n     | Const (S O) => Plus e3 e4\n     | _ => Times (Plus e3 e4) (constant_fold e2)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c70_IHe1 : le (size (Plus e3 e4)) (size e1)",
                    "c70_e4 : expr",
                    "c70_e3 : expr",
                    "c71_goal : le\n  (size\n     match constant_fold e2 with\n     | Const O => Const O\n     | Const (S O) => Times e3 e4\n     | _ => Times (Times e3 e4) (constant_fold e2)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c71_IHe1 : le (size (Times e3 e4)) (size e1)",
                    "c71_e4 : expr",
                    "c71_e3 : expr"
                ]
            },
            {
                "tactic_sig": "destruct ( constant_fold _i ) as [  _o _o | _o _o | _o _o _o | _o _o _o ] .",
                "tactic_sig_no_out_arg": "destruct ( constant_fold _i ) .",
                "tactic_args": [
                    "c68_goal : le\n  (size\n     match n with\n     | O =>\n         match constant_fold e2 with\n         | Const n2 => Const (Init.Nat.mul n n2)\n         | _ => Const O\n         end\n     | S O =>\n         match constant_fold e2 with\n         | Const n2 => Const (Init.Nat.mul n n2)\n         | _ => constant_fold e2\n         end\n     | S (S _) =>\n         match constant_fold e2 with\n         | Const n2 => Const (Init.Nat.mul n n2)\n         | _ => Times (Const n) (constant_fold e2)\n         end\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c5_e2 : expr"
                ],
                "tactic_res": [
                    "c72_goal : le (size match n with\n         | O | _ => Const (Init.Nat.mul n n0)\n         end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c72_IHe2 : le (size (Const n0)) (size e2)",
                    "c72_n0 : nat",
                    "c73_goal : le\n  (size\n     match n with\n     | O => Const O\n     | S O => Var v\n     | S (S _) => Times (Const n) (Var v)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c73_IHe2 : le (size (Var v)) (size e2)",
                    "c73_v : var",
                    "c74_goal : le\n  (size\n     match n with\n     | O => Const O\n     | S O => Plus e3 e4\n     | S (S _) => Times (Const n) (Plus e3 e4)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c74_IHe2 : le (size (Plus e3 e4)) (size e2)",
                    "c74_e4 : expr",
                    "c74_e3 : expr",
                    "c75_goal : le\n  (size\n     match n with\n     | O => Const O\n     | S O => Times e3 e4\n     | S (S _) => Times (Const n) (Times e3 e4)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c75_IHe2 : le (size (Times e3 e4)) (size e2)",
                    "c75_e4 : expr",
                    "c75_e3 : expr"
                ]
            },
            {
                "tactic_sig": "try destruct _i .",
                "tactic_sig_no_out_arg": "try destruct _i .",
                "tactic_args": [
                    "c72_goal : le (size match n with\n         | O | _ => Const (Init.Nat.mul n n0)\n         end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c3_n : nat"
                ],
                "tactic_res": [
                    "c76_goal : le (size (Const (Init.Nat.mul O n0)))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c76_IHe1 : le (size (Const O)) (size e1)",
                    "c77_goal : le (size match n with\n         | O | _ => Const (Init.Nat.mul (S n) n0)\n         end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c77_IHe1 : le (size (Const (S n))) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c76_IHe1 : le (S O) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c76_IHe2 : le (S O) (size e2)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c76_goal : le (size (Const (Init.Nat.mul O n0)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c78_goal : le (S O) (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "try lia .",
                "tactic_sig_no_out_arg": "try lia .",
                "tactic_args": [
                    "c78_goal : le (S O) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "try destruct _i .",
                "tactic_sig_no_out_arg": "try destruct _i .",
                "tactic_args": [
                    "c77_goal : le (size match n with\n         | O | _ => Const (Init.Nat.mul (S n) n0)\n         end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c3_n : nat"
                ],
                "tactic_res": [
                    "c79_goal : le (size (Const (Init.Nat.mul (S O) n0)))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c79_IHe1 : le (size (Const (S O))) (size e1)",
                    "c80_goal : le (size (Const (Init.Nat.mul (S (S n)) n0)))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c80_IHe1 : le (size (Const (S (S n)))) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c79_IHe1 : le (S O) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c79_IHe2 : le (S O) (size e2)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c79_goal : le (size (Const (Init.Nat.mul (S O) n0)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c81_goal : le (S O) (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "try lia .",
                "tactic_sig_no_out_arg": "try lia .",
                "tactic_args": [
                    "c81_goal : le (S O) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c80_IHe1 : le (S O) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c80_IHe2 : le (S O) (size e2)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c80_goal : le (size (Const (Init.Nat.mul (S (S n)) n0)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c82_goal : le (S O) (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "try lia .",
                "tactic_sig_no_out_arg": "try lia .",
                "tactic_args": [
                    "c82_goal : le (S O) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "try destruct _i .",
                "tactic_sig_no_out_arg": "try destruct _i .",
                "tactic_args": [
                    "c73_goal : le\n  (size\n     match n with\n     | O => Const O\n     | S O => Var v\n     | S (S _) => Times (Const n) (Var v)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c3_n : nat"
                ],
                "tactic_res": [
                    "c83_goal : le (size (Const O)) (S (Init.Nat.add (size e1) (size e2)))",
                    "c83_IHe1 : le (size (Const O)) (size e1)",
                    "c84_goal : le\n  (size\n     match n with\n     | O => Var v\n     | S _ => Times (Const (S n)) (Var v)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c84_IHe1 : le (size (Const (S n))) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c83_IHe1 : le (S O) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c83_IHe2 : le (S O) (size e2)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c83_goal : le (size (Const O)) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c85_goal : le (S O) (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "try lia .",
                "tactic_sig_no_out_arg": "try lia .",
                "tactic_args": [
                    "c85_goal : le (S O) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "try destruct _i .",
                "tactic_sig_no_out_arg": "try destruct _i .",
                "tactic_args": [
                    "c84_goal : le\n  (size\n     match n with\n     | O => Var v\n     | S _ => Times (Const (S n)) (Var v)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c3_n : nat"
                ],
                "tactic_res": [
                    "c86_goal : le (size (Var v)) (S (Init.Nat.add (size e1) (size e2)))",
                    "c86_IHe1 : le (size (Const (S O))) (size e1)",
                    "c87_goal : le (size (Times (Const (S (S n))) (Var v)))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c87_IHe1 : le (size (Const (S (S n)))) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c86_IHe1 : le (S O) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c86_IHe2 : le (S O) (size e2)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c86_goal : le (size (Var v)) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c88_goal : le (S O) (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "try lia .",
                "tactic_sig_no_out_arg": "try lia .",
                "tactic_args": [
                    "c88_goal : le (S O) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c87_IHe1 : le (S O) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c87_IHe2 : le (S O) (size e2)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c87_goal : le (size (Times (Const (S (S n))) (Var v)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c89_goal : le (S (S (S O))) (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "try lia .",
                "tactic_sig_no_out_arg": "try lia .",
                "tactic_args": [
                    "c89_goal : le (S (S (S O))) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "try destruct _i .",
                "tactic_sig_no_out_arg": "try destruct _i .",
                "tactic_args": [
                    "c74_goal : le\n  (size\n     match n with\n     | O => Const O\n     | S O => Plus e3 e4\n     | S (S _) => Times (Const n) (Plus e3 e4)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c3_n : nat"
                ],
                "tactic_res": [
                    "c90_goal : le (size (Const O)) (S (Init.Nat.add (size e1) (size e2)))",
                    "c90_IHe1 : le (size (Const O)) (size e1)",
                    "c91_goal : le\n  (size\n     match n with\n     | O => Plus e3 e4\n     | S _ => Times (Const (S n)) (Plus e3 e4)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c91_IHe1 : le (size (Const (S n))) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c90_IHe1 : le (S O) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c90_IHe2 : le (S (Init.Nat.add (size e3) (size e4))) (size e2)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c90_goal : le (size (Const O)) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c92_goal : le (S O) (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "try lia .",
                "tactic_sig_no_out_arg": "try lia .",
                "tactic_args": [
                    "c92_goal : le (S O) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "try destruct _i .",
                "tactic_sig_no_out_arg": "try destruct _i .",
                "tactic_args": [
                    "c91_goal : le\n  (size\n     match n with\n     | O => Plus e3 e4\n     | S _ => Times (Const (S n)) (Plus e3 e4)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c3_n : nat"
                ],
                "tactic_res": [
                    "c93_goal : le (size (Plus e3 e4)) (S (Init.Nat.add (size e1) (size e2)))",
                    "c93_IHe1 : le (size (Const (S O))) (size e1)",
                    "c94_goal : le (size (Times (Const (S (S n))) (Plus e3 e4)))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c94_IHe1 : le (size (Const (S (S n)))) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c93_IHe1 : le (S O) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c93_IHe2 : le (S (Init.Nat.add (size e3) (size e4))) (size e2)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c93_goal : le (size (Plus e3 e4)) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c95_goal : le (S (Init.Nat.add (size e3) (size e4)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "try lia .",
                "tactic_sig_no_out_arg": "try lia .",
                "tactic_args": [
                    "c95_goal : le (S (Init.Nat.add (size e3) (size e4)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c94_IHe1 : le (S O) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c94_IHe2 : le (S (Init.Nat.add (size e3) (size e4))) (size e2)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c94_goal : le (size (Times (Const (S (S n))) (Plus e3 e4)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c96_goal : le (S (S (S (Init.Nat.add (size e3) (size e4)))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "try lia .",
                "tactic_sig_no_out_arg": "try lia .",
                "tactic_args": [
                    "c96_goal : le (S (S (S (Init.Nat.add (size e3) (size e4)))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "try destruct _i .",
                "tactic_sig_no_out_arg": "try destruct _i .",
                "tactic_args": [
                    "c75_goal : le\n  (size\n     match n with\n     | O => Const O\n     | S O => Times e3 e4\n     | S (S _) => Times (Const n) (Times e3 e4)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c3_n : nat"
                ],
                "tactic_res": [
                    "c97_goal : le (size (Const O)) (S (Init.Nat.add (size e1) (size e2)))",
                    "c97_IHe1 : le (size (Const O)) (size e1)",
                    "c98_goal : le\n  (size\n     match n with\n     | O => Times e3 e4\n     | S _ => Times (Const (S n)) (Times e3 e4)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c98_IHe1 : le (size (Const (S n))) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c97_IHe1 : le (S O) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c97_IHe2 : le (S (Init.Nat.add (size e3) (size e4))) (size e2)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c97_goal : le (size (Const O)) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c99_goal : le (S O) (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "try lia .",
                "tactic_sig_no_out_arg": "try lia .",
                "tactic_args": [
                    "c99_goal : le (S O) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "try destruct _i .",
                "tactic_sig_no_out_arg": "try destruct _i .",
                "tactic_args": [
                    "c98_goal : le\n  (size\n     match n with\n     | O => Times e3 e4\n     | S _ => Times (Const (S n)) (Times e3 e4)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c3_n : nat"
                ],
                "tactic_res": [
                    "c100_goal : le (size (Times e3 e4)) (S (Init.Nat.add (size e1) (size e2)))",
                    "c100_IHe1 : le (size (Const (S O))) (size e1)",
                    "c101_goal : le (size (Times (Const (S (S n))) (Times e3 e4)))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c101_IHe1 : le (size (Const (S (S n)))) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c100_IHe1 : le (S O) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c100_IHe2 : le (S (Init.Nat.add (size e3) (size e4))) (size e2)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c100_goal : le (size (Times e3 e4)) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c102_goal : le (S (Init.Nat.add (size e3) (size e4)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "try lia .",
                "tactic_sig_no_out_arg": "try lia .",
                "tactic_args": [
                    "c102_goal : le (S (Init.Nat.add (size e3) (size e4)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c101_IHe1 : le (S O) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c101_IHe2 : le (S (Init.Nat.add (size e3) (size e4))) (size e2)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c101_goal : le (size (Times (Const (S (S n))) (Times e3 e4)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c103_goal : le (S (S (S (Init.Nat.add (size e3) (size e4)))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "try lia .",
                "tactic_sig_no_out_arg": "try lia .",
                "tactic_args": [
                    "c103_goal : le (S (S (S (Init.Nat.add (size e3) (size e4)))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct ( constant_fold _i ) as [  _o _o | _o _o | _o _o _o | _o _o _o ] .",
                "tactic_sig_no_out_arg": "destruct ( constant_fold _i ) .",
                "tactic_args": [
                    "c69_goal : le\n  (size\n     match constant_fold e2 with\n     | Const O => Const O\n     | Const (S O) => Var v\n     | _ => Times (Var v) (constant_fold e2)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c5_e2 : expr"
                ],
                "tactic_res": [
                    "c104_goal : le\n  (size\n     match n with\n     | O => Const O\n     | S O => Var v\n     | S (S _) => Times (Var v) (Const n)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c104_IHe2 : le (size (Const n)) (size e2)",
                    "c104_n : nat",
                    "c105_goal : le (size (Times (Var v) (Var v0)))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c105_IHe2 : le (size (Var v0)) (size e2)",
                    "c105_v0 : var",
                    "c106_goal : le (size (Times (Var v) (Plus e3 e4)))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c106_IHe2 : le (size (Plus e3 e4)) (size e2)",
                    "c106_e4 : expr",
                    "c106_e3 : expr",
                    "c107_goal : le (size (Times (Var v) (Times e3 e4)))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c107_IHe2 : le (size (Times e3 e4)) (size e2)",
                    "c107_e4 : expr",
                    "c107_e3 : expr"
                ]
            },
            {
                "tactic_sig": "try destruct _i .",
                "tactic_sig_no_out_arg": "try destruct _i .",
                "tactic_args": [
                    "c104_goal : le\n  (size\n     match n with\n     | O => Const O\n     | S O => Var v\n     | S (S _) => Times (Var v) (Const n)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c3_n : nat"
                ],
                "tactic_res": [
                    "c108_goal : le (size (Const O)) (S (Init.Nat.add (size e1) (size e2)))",
                    "c108_IHe2 : le (size (Const O)) (size e2)",
                    "c109_goal : le\n  (size\n     match n with\n     | O => Var v\n     | S _ => Times (Var v) (Const (S n))\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c109_IHe2 : le (size (Const (S n))) (size e2)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c108_goal : le (size (Const O)) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c110_goal : le (S O) (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c110_IHe1 : le (S O) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c110_IHe2 : le (S O) (size e2)"
                ]
            },
            {
                "tactic_sig": "try lia .",
                "tactic_sig_no_out_arg": "try lia .",
                "tactic_args": [
                    "c110_goal : le (S O) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "try destruct _i .",
                "tactic_sig_no_out_arg": "try destruct _i .",
                "tactic_args": [
                    "c109_goal : le\n  (size\n     match n with\n     | O => Var v\n     | S _ => Times (Var v) (Const (S n))\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c3_n : nat"
                ],
                "tactic_res": [
                    "c111_goal : le (size (Var v)) (S (Init.Nat.add (size e1) (size e2)))",
                    "c111_IHe2 : le (size (Const (S O))) (size e2)",
                    "c112_goal : le (size (Times (Var v) (Const (S (S n)))))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c112_IHe2 : le (size (Const (S (S n)))) (size e2)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c111_goal : le (size (Var v)) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c113_goal : le (S O) (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c113_IHe1 : le (S O) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c113_IHe2 : le (S O) (size e2)"
                ]
            },
            {
                "tactic_sig": "try lia .",
                "tactic_sig_no_out_arg": "try lia .",
                "tactic_args": [
                    "c113_goal : le (S O) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c112_goal : le (size (Times (Var v) (Const (S (S n)))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c114_goal : le (S (S (S O))) (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c114_IHe1 : le (S O) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c114_IHe2 : le (S O) (size e2)"
                ]
            },
            {
                "tactic_sig": "try lia .",
                "tactic_sig_no_out_arg": "try lia .",
                "tactic_args": [
                    "c114_goal : le (S (S (S O))) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c105_goal : le (size (Times (Var v) (Var v0)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c115_goal : le (S (S (S O))) (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c115_IHe1 : le (S O) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c115_IHe2 : le (S O) (size e2)"
                ]
            },
            {
                "tactic_sig": "try lia .",
                "tactic_sig_no_out_arg": "try lia .",
                "tactic_args": [
                    "c115_goal : le (S (S (S O))) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c106_goal : le (size (Times (Var v) (Plus e3 e4)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c116_goal : le (S (S (S (Init.Nat.add (size e3) (size e4)))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c116_IHe1 : le (S O) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c116_IHe2 : le (S (Init.Nat.add (size e3) (size e4))) (size e2)"
                ]
            },
            {
                "tactic_sig": "try lia .",
                "tactic_sig_no_out_arg": "try lia .",
                "tactic_args": [
                    "c116_goal : le (S (S (S (Init.Nat.add (size e3) (size e4)))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c107_goal : le (size (Times (Var v) (Times e3 e4)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c117_goal : le (S (S (S (Init.Nat.add (size e3) (size e4)))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c117_IHe1 : le (S O) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c117_IHe2 : le (S (Init.Nat.add (size e3) (size e4))) (size e2)"
                ]
            },
            {
                "tactic_sig": "try lia .",
                "tactic_sig_no_out_arg": "try lia .",
                "tactic_args": [
                    "c117_goal : le (S (S (S (Init.Nat.add (size e3) (size e4)))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct ( constant_fold _i ) as [  _o _o | _o _o | _o _o _o | _o _o _o ] .",
                "tactic_sig_no_out_arg": "destruct ( constant_fold _i ) .",
                "tactic_args": [
                    "c70_goal : le\n  (size\n     match constant_fold e2 with\n     | Const O => Const O\n     | Const (S O) => Plus e3 e4\n     | _ => Times (Plus e3 e4) (constant_fold e2)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c5_e2 : expr"
                ],
                "tactic_res": [
                    "c118_goal : le\n  (size\n     match n with\n     | O => Const O\n     | S O => Plus e3 e4\n     | S (S _) => Times (Plus e3 e4) (Const n)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c118_IHe2 : le (size (Const n)) (size e2)",
                    "c118_n : nat",
                    "c119_goal : le (size (Times (Plus e3 e4) (Var v)))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c119_IHe2 : le (size (Var v)) (size e2)",
                    "c119_v : var",
                    "c120_goal : le (size (Times (Plus e3 e4) (Plus e5 e6)))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c120_IHe2 : le (size (Plus e5 e6)) (size e2)",
                    "c120_e6 : expr",
                    "c120_e5 : expr",
                    "c121_goal : le (size (Times (Plus e3 e4) (Times e5 e6)))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c121_IHe2 : le (size (Times e5 e6)) (size e2)",
                    "c121_e6 : expr",
                    "c121_e5 : expr"
                ]
            },
            {
                "tactic_sig": "try destruct _i .",
                "tactic_sig_no_out_arg": "try destruct _i .",
                "tactic_args": [
                    "c118_goal : le\n  (size\n     match n with\n     | O => Const O\n     | S O => Plus e3 e4\n     | S (S _) => Times (Plus e3 e4) (Const n)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c3_n : nat"
                ],
                "tactic_res": [
                    "c122_goal : le (size (Const O)) (S (Init.Nat.add (size e1) (size e2)))",
                    "c122_IHe2 : le (size (Const O)) (size e2)",
                    "c123_goal : le\n  (size\n     match n with\n     | O => Plus e3 e4\n     | S _ => Times (Plus e3 e4) (Const (S n))\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c123_IHe2 : le (size (Const (S n))) (size e2)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c122_goal : le (size (Const O)) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c124_goal : le (S O) (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c124_IHe1 : le (S (Init.Nat.add (size e3) (size e4))) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c124_IHe2 : le (S O) (size e2)"
                ]
            },
            {
                "tactic_sig": "try lia .",
                "tactic_sig_no_out_arg": "try lia .",
                "tactic_args": [
                    "c124_goal : le (S O) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "try destruct _i .",
                "tactic_sig_no_out_arg": "try destruct _i .",
                "tactic_args": [
                    "c123_goal : le\n  (size\n     match n with\n     | O => Plus e3 e4\n     | S _ => Times (Plus e3 e4) (Const (S n))\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c3_n : nat"
                ],
                "tactic_res": [
                    "c125_goal : le (size (Plus e3 e4)) (S (Init.Nat.add (size e1) (size e2)))",
                    "c125_IHe2 : le (size (Const (S O))) (size e2)",
                    "c126_goal : le (size (Times (Plus e3 e4) (Const (S (S n)))))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c126_IHe2 : le (size (Const (S (S n)))) (size e2)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c125_goal : le (size (Plus e3 e4)) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c127_goal : le (S (Init.Nat.add (size e3) (size e4)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c127_IHe1 : le (S (Init.Nat.add (size e3) (size e4))) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c127_IHe2 : le (S O) (size e2)"
                ]
            },
            {
                "tactic_sig": "try lia .",
                "tactic_sig_no_out_arg": "try lia .",
                "tactic_args": [
                    "c127_goal : le (S (Init.Nat.add (size e3) (size e4)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c126_goal : le (size (Times (Plus e3 e4) (Const (S (S n)))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c128_goal : le (S (S (Init.Nat.add (Init.Nat.add (size e3) (size e4)) (S O))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c128_IHe1 : le (S (Init.Nat.add (size e3) (size e4))) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c128_IHe2 : le (S O) (size e2)"
                ]
            },
            {
                "tactic_sig": "try lia .",
                "tactic_sig_no_out_arg": "try lia .",
                "tactic_args": [
                    "c128_goal : le (S (S (Init.Nat.add (Init.Nat.add (size e3) (size e4)) (S O))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c119_goal : le (size (Times (Plus e3 e4) (Var v)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c129_goal : le (S (S (Init.Nat.add (Init.Nat.add (size e3) (size e4)) (S O))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c129_IHe1 : le (S (Init.Nat.add (size e3) (size e4))) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c129_IHe2 : le (S O) (size e2)"
                ]
            },
            {
                "tactic_sig": "try lia .",
                "tactic_sig_no_out_arg": "try lia .",
                "tactic_args": [
                    "c129_goal : le (S (S (Init.Nat.add (Init.Nat.add (size e3) (size e4)) (S O))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c120_goal : le (size (Times (Plus e3 e4) (Plus e5 e6)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c130_goal : le\n  (S\n     (S\n        (Init.Nat.add (Init.Nat.add (size e3) (size e4))\n           (S (Init.Nat.add (size e5) (size e6))))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c130_IHe1 : le (S (Init.Nat.add (size e3) (size e4))) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c130_IHe2 : le (S (Init.Nat.add (size e5) (size e6))) (size e2)"
                ]
            },
            {
                "tactic_sig": "try lia .",
                "tactic_sig_no_out_arg": "try lia .",
                "tactic_args": [
                    "c130_goal : le\n  (S\n     (S\n        (Init.Nat.add (Init.Nat.add (size e3) (size e4))\n           (S (Init.Nat.add (size e5) (size e6))))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c121_goal : le (size (Times (Plus e3 e4) (Times e5 e6)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c131_goal : le\n  (S\n     (S\n        (Init.Nat.add (Init.Nat.add (size e3) (size e4))\n           (S (Init.Nat.add (size e5) (size e6))))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c131_IHe1 : le (S (Init.Nat.add (size e3) (size e4))) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c131_IHe2 : le (S (Init.Nat.add (size e5) (size e6))) (size e2)"
                ]
            },
            {
                "tactic_sig": "try lia .",
                "tactic_sig_no_out_arg": "try lia .",
                "tactic_args": [
                    "c131_goal : le\n  (S\n     (S\n        (Init.Nat.add (Init.Nat.add (size e3) (size e4))\n           (S (Init.Nat.add (size e5) (size e6))))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct ( constant_fold _i ) as [  _o _o | _o _o | _o _o _o | _o _o _o ] .",
                "tactic_sig_no_out_arg": "destruct ( constant_fold _i ) .",
                "tactic_args": [
                    "c71_goal : le\n  (size\n     match constant_fold e2 with\n     | Const O => Const O\n     | Const (S O) => Times e3 e4\n     | _ => Times (Times e3 e4) (constant_fold e2)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c5_e2 : expr"
                ],
                "tactic_res": [
                    "c132_goal : le\n  (size\n     match n with\n     | O => Const O\n     | S O => Times e3 e4\n     | S (S _) => Times (Times e3 e4) (Const n)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c132_IHe2 : le (size (Const n)) (size e2)",
                    "c132_n : nat",
                    "c133_goal : le (size (Times (Times e3 e4) (Var v)))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c133_IHe2 : le (size (Var v)) (size e2)",
                    "c133_v : var",
                    "c134_goal : le (size (Times (Times e3 e4) (Plus e5 e6)))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c134_IHe2 : le (size (Plus e5 e6)) (size e2)",
                    "c134_e6 : expr",
                    "c134_e5 : expr",
                    "c135_goal : le (size (Times (Times e3 e4) (Times e5 e6)))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c135_IHe2 : le (size (Times e5 e6)) (size e2)",
                    "c135_e6 : expr",
                    "c135_e5 : expr"
                ]
            },
            {
                "tactic_sig": "try destruct _i .",
                "tactic_sig_no_out_arg": "try destruct _i .",
                "tactic_args": [
                    "c132_goal : le\n  (size\n     match n with\n     | O => Const O\n     | S O => Times e3 e4\n     | S (S _) => Times (Times e3 e4) (Const n)\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c3_n : nat"
                ],
                "tactic_res": [
                    "c136_goal : le (size (Const O)) (S (Init.Nat.add (size e1) (size e2)))",
                    "c136_IHe2 : le (size (Const O)) (size e2)",
                    "c137_goal : le\n  (size\n     match n with\n     | O => Times e3 e4\n     | S _ => Times (Times e3 e4) (Const (S n))\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c137_IHe2 : le (size (Const (S n))) (size e2)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c136_IHe1 : le (S (Init.Nat.add (size e3) (size e4))) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c136_IHe2 : le (S O) (size e2)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c136_goal : le (size (Const O)) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c138_goal : le (S O) (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "lia .",
                "tactic_sig_no_out_arg": "lia .",
                "tactic_args": [
                    "c138_goal : le (S O) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "try destruct _i .",
                "tactic_sig_no_out_arg": "try destruct _i .",
                "tactic_args": [
                    "c137_goal : le\n  (size\n     match n with\n     | O => Times e3 e4\n     | S _ => Times (Times e3 e4) (Const (S n))\n     end) (S (Init.Nat.add (size e1) (size e2)))",
                    "c3_n : nat"
                ],
                "tactic_res": [
                    "c139_goal : le (size (Times e3 e4)) (S (Init.Nat.add (size e1) (size e2)))",
                    "c139_IHe2 : le (size (Const (S O))) (size e2)",
                    "c140_goal : le (size (Times (Times e3 e4) (Const (S (S n)))))\n  (S (Init.Nat.add (size e1) (size e2)))",
                    "c140_IHe2 : le (size (Const (S (S n)))) (size e2)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c139_IHe1 : le (S (Init.Nat.add (size e3) (size e4))) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c139_IHe2 : le (S O) (size e2)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c139_goal : le (size (Times e3 e4)) (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c141_goal : le (S (Init.Nat.add (size e3) (size e4)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "lia .",
                "tactic_sig_no_out_arg": "lia .",
                "tactic_args": [
                    "c141_goal : le (S (Init.Nat.add (size e3) (size e4)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c140_IHe1 : le (S (Init.Nat.add (size e3) (size e4))) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c140_IHe2 : le (S O) (size e2)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c140_goal : le (size (Times (Times e3 e4) (Const (S (S n)))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c142_goal : le (S (S (Init.Nat.add (Init.Nat.add (size e3) (size e4)) (S O))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "lia .",
                "tactic_sig_no_out_arg": "lia .",
                "tactic_args": [
                    "c142_goal : le (S (S (Init.Nat.add (Init.Nat.add (size e3) (size e4)) (S O))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c133_IHe1 : le (S (Init.Nat.add (size e3) (size e4))) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c133_IHe2 : le (S O) (size e2)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c133_goal : le (size (Times (Times e3 e4) (Var v)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c143_goal : le (S (S (Init.Nat.add (Init.Nat.add (size e3) (size e4)) (S O))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "lia .",
                "tactic_sig_no_out_arg": "lia .",
                "tactic_args": [
                    "c143_goal : le (S (S (Init.Nat.add (Init.Nat.add (size e3) (size e4)) (S O))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c134_IHe1 : le (S (Init.Nat.add (size e3) (size e4))) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c134_IHe2 : le (S (Init.Nat.add (size e5) (size e6))) (size e2)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c134_goal : le (size (Times (Times e3 e4) (Plus e5 e6)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c144_goal : le\n  (S\n     (S\n        (Init.Nat.add (Init.Nat.add (size e3) (size e4))\n           (S (Init.Nat.add (size e5) (size e6))))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "lia .",
                "tactic_sig_no_out_arg": "lia .",
                "tactic_args": [
                    "c144_goal : le\n  (S\n     (S\n        (Init.Nat.add (Init.Nat.add (size e3) (size e4))\n           (S (Init.Nat.add (size e5) (size e6))))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe1 : le (size (constant_fold e1)) (size e1)"
                ],
                "tactic_res": [
                    "c135_IHe1 : le (S (Init.Nat.add (size e3) (size e4))) (size e1)"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHe2 : le (size (constant_fold e2)) (size e2)"
                ],
                "tactic_res": [
                    "c135_IHe2 : le (S (Init.Nat.add (size e5) (size e6))) (size e2)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c135_goal : le (size (Times (Times e3 e4) (Times e5 e6)))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": [
                    "c145_goal : le\n  (S\n     (S\n        (Init.Nat.add (Init.Nat.add (size e3) (size e4))\n           (S (Init.Nat.add (size e5) (size e6))))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ]
            },
            {
                "tactic_sig": "lia .",
                "tactic_sig_no_out_arg": "lia .",
                "tactic_args": [
                    "c145_goal : le\n  (S\n     (S\n        (Init.Nat.add (Init.Nat.add (size e3) (size e4))\n           (S (Init.Nat.add (size e5) (size e6))))))\n  (S (Init.Nat.add (size e1) (size e2)))"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "eval_instr_add",
        "proof": [
            {
                "tactic_sig": "Example eval_instr_add : let final_state := eval_instr ( ADD 1 2 0 ) example_state in final_state 1 = 5 /\\ final_state 2 = 7 /\\ final_state 0 = 12 .",
                "tactic_sig_no_out_arg": "Example eval_instr_add : let final_state := eval_instr ( ADD 1 2 0 ) example_state in final_state 1 = 5 /\\ final_state 2 = 7 /\\ final_state 0 = 12 .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : let final_state := eval_instr (ADD (S O) (S (S O)) O) example_state in\nand (eq (final_state (S O)) (S (S (S (S (S O))))))\n  (and (eq (final_state (S (S O))) (S (S (S (S (S (S (S O))))))))\n     (eq (final_state O)\n        (S (S (S (S (S (S (S (S (S (S (S (S O))))))))))))))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c1_goal : let final_state := eval_instr (ADD (S O) (S (S O)) O) example_state in\nand (eq (final_state (S O)) (S (S (S (S (S O))))))\n  (and (eq (final_state (S (S O))) (S (S (S (S (S (S (S O))))))))\n     (eq (final_state O)\n        (S (S (S (S (S (S (S (S (S (S (S (S O))))))))))))))"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "eval_instr_ldi",
        "proof": [
            {
                "tactic_sig": "Example eval_instr_ldi : let final_state := eval_instr ( LDI 17 0 ) example_state in final_state 1 = 5 /\\ final_state 2 = 7 /\\ final_state 0 = 17 .",
                "tactic_sig_no_out_arg": "Example eval_instr_ldi : let final_state := eval_instr ( LDI 17 0 ) example_state in final_state 1 = 5 /\\ final_state 2 = 7 /\\ final_state 0 = 17 .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : let final_state :=\n  eval_instr\n    (LDI\n       (S\n          (S\n             (S\n                (S\n                   (S (S (S (S (S (S (S (S (S (S (S (S (S O)))))))))))))))))\n       O) example_state in\nand (eq (final_state (S O)) (S (S (S (S (S O))))))\n  (and (eq (final_state (S (S O))) (S (S (S (S (S (S (S O))))))))\n     (eq (final_state O)\n        (S\n           (S\n              (S\n                 (S\n                    (S\n                       (S (S (S (S (S (S (S (S (S (S (S (S O)))))))))))))))))))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c1_goal : let final_state :=\n  eval_instr\n    (LDI\n       (S\n          (S\n             (S\n                (S\n                   (S (S (S (S (S (S (S (S (S (S (S (S (S O)))))))))))))))))\n       O) example_state in\nand (eq (final_state (S O)) (S (S (S (S (S O))))))\n  (and (eq (final_state (S (S O))) (S (S (S (S (S (S (S O))))))))\n     (eq (final_state O)\n        (S\n           (S\n              (S\n                 (S\n                    (S\n                       (S (S (S (S (S (S (S (S (S (S (S (S O)))))))))))))))))))"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "eval_instr_mov",
        "proof": [
            {
                "tactic_sig": "Example eval_instr_mov : let final_state := eval_instr ( MOV 1 0 ) example_state in final_state 1 = 5 /\\ final_state 2 = 7 /\\ final_state 0 = 5 .",
                "tactic_sig_no_out_arg": "Example eval_instr_mov : let final_state := eval_instr ( MOV 1 0 ) example_state in final_state 1 = 5 /\\ final_state 2 = 7 /\\ final_state 0 = 5 .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : let final_state := eval_instr (MOV (S O) O) example_state in\nand (eq (final_state (S O)) (S (S (S (S (S O))))))\n  (and (eq (final_state (S (S O))) (S (S (S (S (S (S (S O))))))))\n     (eq (final_state O) (S (S (S (S (S O)))))))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c1_goal : let final_state := eval_instr (MOV (S O) O) example_state in\nand (eq (final_state (S O)) (S (S (S (S (S O))))))\n  (and (eq (final_state (S (S O))) (S (S (S (S (S (S (S O))))))))\n     (eq (final_state O) (S (S (S (S (S O)))))))"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "eval_prog'_ldi_add",
        "proof": [
            {
                "tactic_sig": "Example eval_prog'_ldi_add : let final_state := eval_prog' [ LDI 17 1 ; ADD 1 2 0 ] example_state in final_state 1 = 17 /\\ final_state 2 = 7 /\\ final_state 0 = 24 .",
                "tactic_sig_no_out_arg": "Example eval_prog'_ldi_add : let final_state := eval_prog' [ LDI 17 1 ; ADD 1 2 0 ] example_state in final_state 1 = 17 /\\ final_state 2 = 7 /\\ final_state 0 = 24 .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : let final_state :=\n  eval_prog'\n    (cons\n       (LDI\n          (S\n             (S\n                (S\n                   (S\n                      (S\n                         (S\n                            (S\n                               (S (S (S (S (S (S (S (S (S (S O)))))))))))))))))\n          (S O)) (cons (ADD (S O) (S (S O)) O) nil)) example_state in\nand\n  (eq (final_state (S O))\n     (S\n        (S\n           (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S O))))))))))))))))))\n  (and (eq (final_state (S (S O))) (S (S (S (S (S (S (S O))))))))\n     (eq (final_state O)\n        (S\n           (S\n              (S\n                 (S\n                    (S\n                       (S\n                          (S\n                             (S\n                                (S\n                                   (S\n                                      (S\n                                         (S\n                                            (S\n                                               (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S (S (S (S (S O))))))))))))))))))))))))))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c1_goal : let final_state :=\n  eval_prog'\n    (cons\n       (LDI\n          (S\n             (S\n                (S\n                   (S\n                      (S\n                         (S\n                            (S\n                               (S (S (S (S (S (S (S (S (S (S O)))))))))))))))))\n          (S O)) (cons (ADD (S O) (S (S O)) O) nil)) example_state in\nand\n  (eq (final_state (S O))\n     (S\n        (S\n           (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S O))))))))))))))))))\n  (and (eq (final_state (S (S O))) (S (S (S (S (S (S (S O))))))))\n     (eq (final_state O)\n        (S\n           (S\n              (S\n                 (S\n                    (S\n                       (S\n                          (S\n                             (S\n                                (S\n                                   (S\n                                      (S\n                                         (S\n                                            (S\n                                               (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S (S (S (S (S O))))))))))))))))))))))))))"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "eval_prog'_add_ldi",
        "proof": [
            {
                "tactic_sig": "Example eval_prog'_add_ldi : let final_state := eval_prog' [ ADD 1 2 0 ; LDI 13 1 ] example_state in final_state 1 = 13 /\\ final_state 2 = 7 /\\ final_state 0 = 12 .",
                "tactic_sig_no_out_arg": "Example eval_prog'_add_ldi : let final_state := eval_prog' [ ADD 1 2 0 ; LDI 13 1 ] example_state in final_state 1 = 13 /\\ final_state 2 = 7 /\\ final_state 0 = 12 .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : let final_state :=\n  eval_prog'\n    (cons (ADD (S O) (S (S O)) O)\n       (cons\n          (LDI (S (S (S (S (S (S (S (S (S (S (S (S (S O)))))))))))))\n             (S O)) nil)) example_state in\nand\n  (eq (final_state (S O))\n     (S (S (S (S (S (S (S (S (S (S (S (S (S O))))))))))))))\n  (and (eq (final_state (S (S O))) (S (S (S (S (S (S (S O))))))))\n     (eq (final_state O)\n        (S (S (S (S (S (S (S (S (S (S (S (S O))))))))))))))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c1_goal : let final_state :=\n  eval_prog'\n    (cons (ADD (S O) (S (S O)) O)\n       (cons\n          (LDI (S (S (S (S (S (S (S (S (S (S (S (S (S O)))))))))))))\n             (S O)) nil)) example_state in\nand\n  (eq (final_state (S O))\n     (S (S (S (S (S (S (S (S (S (S (S (S (S O))))))))))))))\n  (and (eq (final_state (S (S O))) (S (S (S (S (S (S (S O))))))))\n     (eq (final_state O)\n        (S (S (S (S (S (S (S (S (S (S (S (S O))))))))))))))"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "eval_prog'_add_mov",
        "proof": [
            {
                "tactic_sig": "Example eval_prog'_add_mov : let final_state := eval_prog' [ ADD 1 2 0 ; MOV 0 1 ] example_state in final_state 1 = 12 /\\ final_state 2 = 7 /\\ final_state 0 = 12 .",
                "tactic_sig_no_out_arg": "Example eval_prog'_add_mov : let final_state := eval_prog' [ ADD 1 2 0 ; MOV 0 1 ] example_state in final_state 1 = 12 /\\ final_state 2 = 7 /\\ final_state 0 = 12 .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : let final_state :=\n  eval_prog' (cons (ADD (S O) (S (S O)) O) (cons (MOV O (S O)) nil))\n    example_state in\nand\n  (eq (final_state (S O))\n     (S (S (S (S (S (S (S (S (S (S (S (S O)))))))))))))\n  (and (eq (final_state (S (S O))) (S (S (S (S (S (S (S O))))))))\n     (eq (final_state O)\n        (S (S (S (S (S (S (S (S (S (S (S (S O))))))))))))))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c1_goal : let final_state :=\n  eval_prog' (cons (ADD (S O) (S (S O)) O) (cons (MOV O (S O)) nil))\n    example_state in\nand\n  (eq (final_state (S O))\n     (S (S (S (S (S (S (S (S (S (S (S (S O)))))))))))))\n  (and (eq (final_state (S (S O))) (S (S (S (S (S (S (S O))))))))\n     (eq (final_state O)\n        (S (S (S (S (S (S (S (S (S (S (S (S O))))))))))))))"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "compile_const",
        "proof": [
            {
                "tactic_sig": "Example compile_const : eval_prog ( compile ( Const 10 ) ) = 10 .",
                "tactic_sig_no_out_arg": "Example compile_const : eval_prog ( compile ( Const 10 ) ) = 10 .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : eq\n  (eval_prog\n     (compile (Const (S (S (S (S (S (S (S (S (S (S O)))))))))))))\n  (S (S (S (S (S (S (S (S (S (S O))))))))))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c1_goal : eq\n  (eval_prog\n     (compile (Const (S (S (S (S (S (S (S (S (S (S O)))))))))))))\n  (S (S (S (S (S (S (S (S (S (S O))))))))))"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "compile_plus",
        "proof": [
            {
                "tactic_sig": "Example compile_plus : eval_prog ( compile ( Plus ( Const 7 ) ( Const 9 ) ) ) = 16 .",
                "tactic_sig_no_out_arg": "Example compile_plus : eval_prog ( compile ( Plus ( Const 7 ) ( Const 9 ) ) ) = 16 .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : eq\n  (eval_prog\n     (compile\n        (Plus (Const (S (S (S (S (S (S (S O))))))))\n           (Const (S (S (S (S (S (S (S (S (S O)))))))))))))\n  (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S O))))))))))))))))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c1_goal : eq\n  (eval_prog\n     (compile\n        (Plus (Const (S (S (S (S (S (S (S O))))))))\n           (Const (S (S (S (S (S (S (S (S (S O)))))))))))))\n  (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S O))))))))))))))))"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "compile_nested_plus",
        "proof": [
            {
                "tactic_sig": "Example compile_nested_plus : eval_prog ( compile ( Plus ( Plus ( Const 7 ) ( Const 8 ) ) ( Plus ( Const 9 ) ( Const 11 ) ) ) ) = 35 .",
                "tactic_sig_no_out_arg": "Example compile_nested_plus : eval_prog ( compile ( Plus ( Plus ( Const 7 ) ( Const 8 ) ) ( Plus ( Const 9 ) ( Const 11 ) ) ) ) = 35 .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : eq\n  (eval_prog\n     (compile\n        (Plus\n           (Plus (Const (S (S (S (S (S (S (S O))))))))\n              (Const (S (S (S (S (S (S (S (S O))))))))))\n           (Plus (Const (S (S (S (S (S (S (S (S (S O))))))))))\n              (Const (S (S (S (S (S (S (S (S (S (S (S O))))))))))))))))\n  (S\n     (S\n        (S\n           (S\n              (S\n                 (S\n                    (S\n                       (S\n                          (S\n                             (S\n                                (S\n                                   (S\n                                      (S\n                                         (S\n                                            (S\n                                               (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S (S (S (S (S O)))))))))))))))))))))))))))))))))))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c1_goal : eq\n  (eval_prog\n     (compile\n        (Plus\n           (Plus (Const (S (S (S (S (S (S (S O))))))))\n              (Const (S (S (S (S (S (S (S (S O))))))))))\n           (Plus (Const (S (S (S (S (S (S (S (S (S O))))))))))\n              (Const (S (S (S (S (S (S (S (S (S (S (S O))))))))))))))))\n  (S\n     (S\n        (S\n           (S\n              (S\n                 (S\n                    (S\n                       (S\n                          (S\n                             (S\n                                (S\n                                   (S\n                                      (S\n                                         (S\n                                            (S\n                                               (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S\n                                                 (S (S (S (S (S O)))))))))))))))))))))))))))))))))))"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "compile'_plus_0_is_unmodified",
        "proof": [
            {
                "tactic_sig": "Example compile'_plus_0_is_unmodified : let example_state := set_register initial_state 0 12 in let final_state := eval_prog' ( compile' ( Plus ( Const 7 ) ( Const 8 ) ) 1 ) example_state in final_state 0 = 12 /\\ final_state 1 = 15 .",
                "tactic_sig_no_out_arg": "Example compile'_plus_0_is_unmodified : let example_state := set_register initial_state 0 12 in let final_state := eval_prog' ( compile' ( Plus ( Const 7 ) ( Const 8 ) ) 1 ) example_state in final_state 0 = 12 /\\ final_state 1 = 15 .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : let example_state :=\n  set_register initial_state O\n    (S (S (S (S (S (S (S (S (S (S (S (S O)))))))))))) in\nlet final_state :=\n  eval_prog'\n    (compile'\n       (Plus (Const (S (S (S (S (S (S (S O))))))))\n          (Const (S (S (S (S (S (S (S (S O)))))))))) \n       (S O)) example_state in\nand\n  (eq (final_state O) (S (S (S (S (S (S (S (S (S (S (S (S O)))))))))))))\n  (eq (final_state (S O))\n     (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S O))))))))))))))))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c1_goal : let example_state :=\n  set_register initial_state O\n    (S (S (S (S (S (S (S (S (S (S (S (S O)))))))))))) in\nlet final_state :=\n  eval_prog'\n    (compile'\n       (Plus (Const (S (S (S (S (S (S (S O))))))))\n          (Const (S (S (S (S (S (S (S (S O)))))))))) \n       (S O)) example_state in\nand\n  (eq (final_state O) (S (S (S (S (S (S (S (S (S (S (S (S O)))))))))))))\n  (eq (final_state (S O))\n     (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S O))))))))))))))))"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "eval_prog_append",
        "proof": [
            {
                "tactic_sig": "Lemma eval_prog_append : forall ( p1 p2 : prog ) ( st : state ) ( r : reg ) , eval_prog' ( p1 ++ p2 ) st r = eval_prog' p2 ( eval_prog' p1 st ) r .",
                "tactic_sig_no_out_arg": "Lemma eval_prog_append : forall ( p1 p2 : prog ) ( st : state ) ( r : reg ) , eval_prog' ( p1 ++ p2 ) st r = eval_prog' p2 ( eval_prog' p1 st ) r .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (p1 p2 : prog) (st : state) (r : nat),\neq (eval_prog' (app p1 p2) st r) (eval_prog' p2 (eval_prog' p1 st) r)"
                ]
            },
            {
                "tactic_sig": "induction p1 .",
                "tactic_sig_no_out_arg": "induction p1 .",
                "tactic_args": [
                    "c1_goal : forall (p1 p2 : prog) (st : state) (r : nat),\neq (eval_prog' (app p1 p2) st r) (eval_prog' p2 (eval_prog' p1 st) r)"
                ],
                "tactic_res": [
                    "c2_goal : forall (p2 : prog) (st : state) (r : nat),\neq (eval_prog' (app nil p2) st r) (eval_prog' p2 (eval_prog' nil st) r)",
                    "c3_goal : forall (p2 : prog) (st : state) (r : nat),\neq (eval_prog' (app (cons a p1) p2) st r)\n  (eval_prog' p2 (eval_prog' (cons a p1) st) r)",
                    "c3_IHp1 : forall (p2 : prog) (st : state) (r : nat),\neq (eval_prog' (app p1 p2) st r) (eval_prog' p2 (eval_prog' p1 st) r)",
                    "c3_p1 : list instr",
                    "c3_a : instr"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c2_goal : forall (p2 : prog) (st : state) (r : nat),\neq (eval_prog' (app nil p2) st r) (eval_prog' p2 (eval_prog' nil st) r)"
                ],
                "tactic_res": [
                    "c4_goal : forall (p2 : prog) (st : state) (r : nat),\neq (eval_prog' p2 st r) (eval_prog' p2 st r)"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c4_goal : forall (p2 : prog) (st : state) (r : nat),\neq (eval_prog' p2 st r) (eval_prog' p2 st r)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c3_goal : forall (p2 : prog) (st : state) (r : nat),\neq (eval_prog' (app (cons a p1) p2) st r)\n  (eval_prog' p2 (eval_prog' (cons a p1) st) r)"
                ],
                "tactic_res": [
                    "c5_goal : forall (p2 : prog) (st : state) (r : nat),\neq (eval_prog' (app p1 p2) (eval_instr a st) r)\n  (eval_prog' p2 (eval_prog' p1 (eval_instr a st)) r)"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c5_goal : forall (p2 : prog) (st : state) (r : nat),\neq (eval_prog' (app p1 p2) (eval_instr a st) r)\n  (eval_prog' p2 (eval_prog' p1 (eval_instr a st)) r)"
                ],
                "tactic_res": [
                    "c6_goal : eq (eval_prog' (app p1 p2) (eval_instr a st) r)\n  (eval_prog' p2 (eval_prog' p1 (eval_instr a st)) r)",
                    "c6_p2 : prog",
                    "c6_st : state",
                    "c6_r : nat"
                ]
            },
            {
                "tactic_sig": "specialize ( _i _i ( eval_instr _i _i ) _i ) .",
                "tactic_sig_no_out_arg": "specialize ( _i _i ( eval_instr _i _i ) _i ) .",
                "tactic_args": [
                    "c3_IHp1 : forall (p2 : prog) (st : state) (r : nat),\neq (eval_prog' (app p1 p2) st r) (eval_prog' p2 (eval_prog' p1 st) r)",
                    "c6_p2 : prog",
                    "c3_a : instr",
                    "c6_st : state",
                    "c6_r : nat"
                ],
                "tactic_res": [
                    "c6_IHp1 : eq (eval_prog' (app p1 p2) (eval_instr a st) r)\n  (eval_prog' p2 (eval_prog' p1 (eval_instr a st)) r)"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c6_goal : eq (eval_prog' (app p1 p2) (eval_instr a st) r)\n  (eval_prog' p2 (eval_prog' p1 (eval_instr a st)) r)",
                    "c3_IHp1 : forall (p2 : prog) (st : state) (r : nat),\neq (eval_prog' (app p1 p2) st r) (eval_prog' p2 (eval_prog' p1 st) r)"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "compile_correct",
        "proof": [
            {
                "tactic_sig": "Theorem compile_correct : forall e , eval_prog ( compile e ) = eval_expr e .",
                "tactic_sig_no_out_arg": "Theorem compile_correct : forall e , eval_prog ( compile e ) = eval_expr e .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall e : expr, eq (eval_prog (compile e)) (eval_expr e)"
                ]
            },
            {
                "tactic_sig": "induction e .",
                "tactic_sig_no_out_arg": "induction e .",
                "tactic_args": [
                    "c1_goal : forall e : expr, eq (eval_prog (compile e)) (eval_expr e)"
                ],
                "tactic_res": [
                    "c2_goal : eq (eval_prog (compile (Const n))) (eval_expr (Const n))",
                    "c2_n : nat",
                    "c3_goal : eq (eval_prog (compile (Plus e1 e2))) (eval_expr (Plus e1 e2))",
                    "c3_IHe2 : eq (eval_prog (compile e2)) (eval_expr e2)",
                    "c3_IHe1 : eq (eval_prog (compile e1)) (eval_expr e1)",
                    "c3_e2 : expr",
                    "c3_e1 : expr"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c2_goal : eq (eval_prog (compile (Const n))) (eval_expr (Const n))"
                ],
                "tactic_res": [
                    "c4_goal : eq (eval_prog (compile (Const n))) n"
                ]
            },
            {
                "tactic_sig": "unfold compile .",
                "tactic_sig_no_out_arg": "unfold compile .",
                "tactic_args": [
                    "c4_goal : eq (eval_prog (compile (Const n))) n"
                ],
                "tactic_res": [
                    "c5_goal : eq (eval_prog (compile' (Const n) O)) n"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c5_goal : eq (eval_prog (compile' (Const n) O)) n"
                ],
                "tactic_res": [
                    "c6_goal : eq (eval_prog (cons (LDI n O) nil)) n"
                ]
            },
            {
                "tactic_sig": "unfold eval_prog .",
                "tactic_sig_no_out_arg": "unfold eval_prog .",
                "tactic_args": [
                    "c6_goal : eq (eval_prog (cons (LDI n O) nil)) n"
                ],
                "tactic_res": [
                    "c7_goal : eq (eval_prog' (cons (LDI n O) nil) initial_state O) n"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c7_goal : eq (eval_prog' (cons (LDI n O) nil) initial_state O) n"
                ],
                "tactic_res": [
                    "c8_goal : eq (set_register initial_state O n O) n"
                ]
            },
            {
                "tactic_sig": "unfold set_register .",
                "tactic_sig_no_out_arg": "unfold set_register .",
                "tactic_args": [
                    "c8_goal : eq (set_register initial_state O n O) n"
                ],
                "tactic_res": [
                    "c9_goal : eq (if reg_eq O O then n else initial_state O) n"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c9_goal : eq (if reg_eq O O then n else initial_state O) n"
                ],
                "tactic_res": [
                    "c10_goal : eq n n"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c10_goal : eq n n"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c3_goal : eq (eval_prog (compile (Plus e1 e2))) (eval_expr (Plus e1 e2))"
                ],
                "tactic_res": [
                    "c11_goal : eq (eval_prog (compile (Plus e1 e2)))\n  (Init.Nat.add (eval_expr e1) (eval_expr e2))"
                ]
            },
            {
                "tactic_sig": "unfold compile .",
                "tactic_sig_no_out_arg": "unfold compile .",
                "tactic_args": [
                    "c11_goal : eq (eval_prog (compile (Plus e1 e2)))\n  (Init.Nat.add (eval_expr e1) (eval_expr e2))"
                ],
                "tactic_res": [
                    "c12_goal : eq (eval_prog (compile' (Plus e1 e2) O))\n  (Init.Nat.add (eval_expr e1) (eval_expr e2))"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c12_goal : eq (eval_prog (compile' (Plus e1 e2) O))\n  (Init.Nat.add (eval_expr e1) (eval_expr e2))"
                ],
                "tactic_res": [
                    "c13_goal : eq\n  (eval_prog\n     (app (compile' e1 O)\n        (app (compile' e2 (S O)) (cons (ADD O (S O) O) nil))))\n  (Init.Nat.add (eval_expr e1) (eval_expr e2))"
                ]
            },
            {
                "tactic_sig": "unfold eval_prog .",
                "tactic_sig_no_out_arg": "unfold eval_prog .",
                "tactic_args": [
                    "c13_goal : eq\n  (eval_prog\n     (app (compile' e1 O)\n        (app (compile' e2 (S O)) (cons (ADD O (S O) O) nil))))\n  (Init.Nat.add (eval_expr e1) (eval_expr e2))"
                ],
                "tactic_res": [
                    "c14_goal : eq\n  (eval_prog'\n     (app (compile' e1 O)\n        (app (compile' e2 (S O)) (cons (ADD O (S O) O) nil)))\n     initial_state O) (Init.Nat.add (eval_expr e1) (eval_expr e2))"
                ]
            },
            {
                "tactic_sig": "unfold eval_prog in _i .",
                "tactic_sig_no_out_arg": "unfold eval_prog in _i .",
                "tactic_args": [
                    "c3_IHe1 : eq (eval_prog (compile e1)) (eval_expr e1)"
                ],
                "tactic_res": [
                    "c14_IHe1 : eq (eval_prog' (compile e1) initial_state O) (eval_expr e1)"
                ]
            },
            {
                "tactic_sig": "unfold eval_prog in _i .",
                "tactic_sig_no_out_arg": "unfold eval_prog in _i .",
                "tactic_args": [
                    "c3_IHe2 : eq (eval_prog (compile e2)) (eval_expr e2)"
                ],
                "tactic_res": [
                    "c14_IHe2 : eq (eval_prog' (compile e2) initial_state O) (eval_expr e2)"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c14_goal : eq\n  (eval_prog'\n     (app (compile' e1 O)\n        (app (compile' e2 (S O)) (cons (ADD O (S O) O) nil)))\n     initial_state O) (Init.Nat.add (eval_expr e1) (eval_expr e2))",
                    "_global_eval_prog_append : forall (p1 p2 : prog) (st : state) (r : nat),\n       eq (eval_prog' (app p1 p2) st r) (eval_prog' p2 (eval_prog' p1 st) r)"
                ],
                "tactic_res": [
                    "c15_goal : eq\n  (eval_prog' (app (compile' e2 (S O)) (cons (ADD O (S O) O) nil))\n     (eval_prog' (compile' e1 O) initial_state) O)\n  (Init.Nat.add (eval_expr e1) (eval_expr e2))"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c15_goal : eq\n  (eval_prog' (app (compile' e2 (S O)) (cons (ADD O (S O) O) nil))\n     (eval_prog' (compile' e1 O) initial_state) O)\n  (Init.Nat.add (eval_expr e1) (eval_expr e2))",
                    "_global_eval_prog_append : forall (p1 p2 : prog) (st : state) (r : nat),\n       eq (eval_prog' (app p1 p2) st r) (eval_prog' p2 (eval_prog' p1 st) r)"
                ],
                "tactic_res": [
                    "c16_goal : eq\n  (eval_prog' (cons (ADD O (S O) O) nil)\n     (eval_prog' (compile' e2 (S O))\n        (eval_prog' (compile' e1 O) initial_state)) O)\n  (Init.Nat.add (eval_expr e1) (eval_expr e2))"
                ]
            }
        ]
    },
    {
        "lemma_name": "add_registers_untouched",
        "proof": [
            {
                "tactic_sig": "Lemma add_registers_untouched : forall ( dest_reg : reg ) ( st : state ) ( r : reg ) , r < dest_reg -> eval_prog' [ ADD dest_reg ( S dest_reg ) dest_reg ] st r = st r .",
                "tactic_sig_no_out_arg": "Lemma add_registers_untouched : forall ( dest_reg : reg ) ( st : state ) ( r : reg ) , r < dest_reg -> eval_prog' [ ADD dest_reg ( S dest_reg ) dest_reg ] st r = st r .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (dest_reg : nat) (st : state) (r : nat) (_ : lt r dest_reg),\neq (eval_prog' (cons (ADD dest_reg (S dest_reg) dest_reg) nil) st r)\n  (st r)"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c1_goal : forall (dest_reg : nat) (st : state) (r : nat) (_ : lt r dest_reg),\neq (eval_prog' (cons (ADD dest_reg (S dest_reg) dest_reg) nil) st r)\n  (st r)"
                ],
                "tactic_res": [
                    "c2_goal : eq (eval_prog' (cons (ADD dest_reg (S dest_reg) dest_reg) nil) st r)\n  (st r)",
                    "c2_dest_reg : nat",
                    "c2_st : state",
                    "c2_r : nat",
                    "c2_H : lt r dest_reg"
                ]
            },
            {
                "tactic_sig": "unfold eval_prog' .",
                "tactic_sig_no_out_arg": "unfold eval_prog' .",
                "tactic_args": [
                    "c2_goal : eq (eval_prog' (cons (ADD dest_reg (S dest_reg) dest_reg) nil) st r)\n  (st r)"
                ],
                "tactic_res": [
                    "c3_goal : eq (eval_instr (ADD dest_reg (S dest_reg) dest_reg) st r) (st r)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c3_goal : eq (eval_instr (ADD dest_reg (S dest_reg) dest_reg) st r) (st r)"
                ],
                "tactic_res": [
                    "c4_goal : eq\n  (set_register st dest_reg\n     (Init.Nat.add (st dest_reg) (st (S dest_reg))) r) \n  (st r)"
                ]
            },
            {
                "tactic_sig": "unfold set_register .",
                "tactic_sig_no_out_arg": "unfold set_register .",
                "tactic_args": [
                    "c4_goal : eq\n  (set_register st dest_reg\n     (Init.Nat.add (st dest_reg) (st (S dest_reg))) r) \n  (st r)"
                ],
                "tactic_res": [
                    "c5_goal : eq\n  (if reg_eq dest_reg r\n   then Init.Nat.add (st dest_reg) (st (S dest_reg))\n   else st r) (st r)"
                ]
            },
            {
                "tactic_sig": "destruct ( reg_eq _i _i ) as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct ( reg_eq _i _i ) .",
                "tactic_args": [
                    "c5_goal : eq\n  (if reg_eq dest_reg r\n   then Init.Nat.add (st dest_reg) (st (S dest_reg))\n   else st r) (st r)",
                    "c2_dest_reg : nat",
                    "c2_r : nat"
                ],
                "tactic_res": [
                    "c6_goal : eq (Init.Nat.add (st dest_reg) (st (S dest_reg))) (st r)",
                    "c6_e : eq dest_reg r",
                    "c7_goal : eq (st r) (st r)",
                    "c7_n : not (eq dest_reg r)"
                ]
            },
            {
                "tactic_sig": "lia .",
                "tactic_sig_no_out_arg": "lia .",
                "tactic_args": [
                    "c6_goal : eq (Init.Nat.add (st dest_reg) (st (S dest_reg))) (st r)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c7_goal : eq (st r) (st r)"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "compile'_registers_untouched",
        "proof": [
            {
                "tactic_sig": "Lemma compile'_registers_untouched : forall ( e : expr ) ( dest_reg : reg ) ( st : state ) ( r : reg ) , r < dest_reg -> ( eval_prog' ( compile' e dest_reg ) st ) r = st r .",
                "tactic_sig_no_out_arg": "Lemma compile'_registers_untouched : forall ( e : expr ) ( dest_reg : reg ) ( st : state ) ( r : reg ) , r < dest_reg -> ( eval_prog' ( compile' e dest_reg ) st ) r = st r .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (e : expr) (dest_reg : nat) (st : state) (r : nat)\n  (_ : lt r dest_reg),\neq (eval_prog' (compile' e dest_reg) st r) (st r)"
                ]
            },
            {
                "tactic_sig": "intros _o .",
                "tactic_sig_no_out_arg": "intros e .",
                "tactic_args": [
                    "c1_goal : forall (e : expr) (dest_reg : nat) (st : state) (r : nat)\n  (_ : lt r dest_reg),\neq (eval_prog' (compile' e dest_reg) st r) (st r)"
                ],
                "tactic_res": [
                    "c2_goal : forall (dest_reg : nat) (st : state) (r : nat) (_ : lt r dest_reg),\neq (eval_prog' (compile' e dest_reg) st r) (st r)",
                    "c2_e : expr"
                ]
            },
            {
                "tactic_sig": "induction _i .",
                "tactic_sig_no_out_arg": "induction _i .",
                "tactic_args": [
                    "c2_goal : forall (dest_reg : nat) (st : state) (r : nat) (_ : lt r dest_reg),\neq (eval_prog' (compile' e dest_reg) st r) (st r)",
                    "c2_e : expr"
                ],
                "tactic_res": [
                    "c3_goal : forall (dest_reg : nat) (st : state) (r : nat) (_ : lt r dest_reg),\neq (eval_prog' (compile' (Const n) dest_reg) st r) (st r)",
                    "c3_n : nat",
                    "c4_goal : forall (dest_reg : nat) (st : state) (r : nat) (_ : lt r dest_reg),\neq (eval_prog' (compile' (Plus e1 e2) dest_reg) st r) (st r)",
                    "c4_IHe2 : forall (dest_reg : nat) (st : state) (r : nat) (_ : lt r dest_reg),\neq (eval_prog' (compile' e2 dest_reg) st r) (st r)",
                    "c4_IHe1 : forall (dest_reg : nat) (st : state) (r : nat) (_ : lt r dest_reg),\neq (eval_prog' (compile' e1 dest_reg) st r) (st r)",
                    "c4_e2 : expr",
                    "c4_e1 : expr"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c3_goal : forall (dest_reg : nat) (st : state) (r : nat) (_ : lt r dest_reg),\neq (eval_prog' (compile' (Const n) dest_reg) st r) (st r)"
                ],
                "tactic_res": [
                    "c5_goal : forall (dest_reg : nat) (st : state) (r : nat) (_ : lt r dest_reg),\neq (set_register st dest_reg n r) (st r)"
                ]
            },
            {
                "tactic_sig": "unfold set_register .",
                "tactic_sig_no_out_arg": "unfold set_register .",
                "tactic_args": [
                    "c5_goal : forall (dest_reg : nat) (st : state) (r : nat) (_ : lt r dest_reg),\neq (set_register st dest_reg n r) (st r)"
                ],
                "tactic_res": [
                    "c6_goal : forall (dest_reg : nat) (st : state) (r : nat) (_ : lt r dest_reg),\neq (if reg_eq dest_reg r then n else st r) (st r)"
                ]
            },
            {
                "tactic_sig": "intros dest_reg _o _o .",
                "tactic_sig_no_out_arg": "intros dest_reg st r .",
                "tactic_args": [
                    "c6_goal : forall (dest_reg : nat) (st : state) (r : nat) (_ : lt r dest_reg),\neq (if reg_eq dest_reg r then n else st r) (st r)"
                ],
                "tactic_res": [
                    "c7_goal : forall _ : lt r dest_reg,\neq (if reg_eq dest_reg r then n else st r) (st r)",
                    "c7_dest_reg : nat",
                    "c7_st : state",
                    "c7_r : nat"
                ]
            },
            {
                "tactic_sig": "destruct ( reg_eq _i _i ) as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct ( reg_eq _i _i ) .",
                "tactic_args": [
                    "c7_goal : forall _ : lt r dest_reg,\neq (if reg_eq dest_reg r then n else st r) (st r)",
                    "c7_dest_reg : nat",
                    "c7_r : nat"
                ],
                "tactic_res": [
                    "c8_goal : forall _ : lt r dest_reg, eq n (st r)",
                    "c8_e : eq dest_reg r",
                    "c9_goal : forall _ : lt r dest_reg, eq (st r) (st r)",
                    "c9_n0 : not (eq dest_reg r)"
                ]
            },
            {
                "tactic_sig": "lia .",
                "tactic_sig_no_out_arg": "lia .",
                "tactic_args": [
                    "c8_goal : forall _ : lt r dest_reg, eq n (st r)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "lia .",
                "tactic_sig_no_out_arg": "lia .",
                "tactic_args": [
                    "c9_goal : forall _ : lt r dest_reg, eq (st r) (st r)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c4_goal : forall (dest_reg : nat) (st : state) (r : nat) (_ : lt r dest_reg),\neq (eval_prog' (compile' (Plus e1 e2) dest_reg) st r) (st r)"
                ],
                "tactic_res": [
                    "c10_goal : forall (dest_reg : nat) (st : state) (r : nat) (_ : lt r dest_reg),\neq\n  (eval_prog'\n     (app (compile' e1 dest_reg)\n        (app (compile' e2 (S dest_reg))\n           (cons (ADD dest_reg (S dest_reg) dest_reg) nil))) st r)\n  (st r)"
                ]
            },
            {
                "tactic_sig": "intros dest_reg .",
                "tactic_sig_no_out_arg": "intros dest_reg .",
                "tactic_args": [
                    "c10_goal : forall (dest_reg : nat) (st : state) (r : nat) (_ : lt r dest_reg),\neq\n  (eval_prog'\n     (app (compile' e1 dest_reg)\n        (app (compile' e2 (S dest_reg))\n           (cons (ADD dest_reg (S dest_reg) dest_reg) nil))) st r)\n  (st r)"
                ],
                "tactic_res": [
                    "c11_goal : forall (st : state) (r : nat) (_ : lt r dest_reg),\neq\n  (eval_prog'\n     (app (compile' e1 dest_reg)\n        (app (compile' e2 (S dest_reg))\n           (cons (ADD dest_reg (S dest_reg) dest_reg) nil))) st r)\n  (st r)",
                    "c11_dest_reg : nat"
                ]
            },
            {
                "tactic_sig": "intros _o _o .",
                "tactic_sig_no_out_arg": "intros st r .",
                "tactic_args": [
                    "c11_goal : forall (st : state) (r : nat) (_ : lt r dest_reg),\neq\n  (eval_prog'\n     (app (compile' e1 dest_reg)\n        (app (compile' e2 (S dest_reg))\n           (cons (ADD dest_reg (S dest_reg) dest_reg) nil))) st r)\n  (st r)"
                ],
                "tactic_res": [
                    "c12_goal : forall _ : lt r dest_reg,\neq\n  (eval_prog'\n     (app (compile' e1 dest_reg)\n        (app (compile' e2 (S dest_reg))\n           (cons (ADD dest_reg (S dest_reg) dest_reg) nil))) st r)\n  (st r)",
                    "c12_st : state",
                    "c12_r : nat"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c12_goal : forall _ : lt r dest_reg,\neq\n  (eval_prog'\n     (app (compile' e1 dest_reg)\n        (app (compile' e2 (S dest_reg))\n           (cons (ADD dest_reg (S dest_reg) dest_reg) nil))) st r)\n  (st r)",
                    "_global_eval_prog_append : forall (p1 p2 : prog) (st : state) (r : nat),\n       eq (eval_prog' (app p1 p2) st r) (eval_prog' p2 (eval_prog' p1 st) r)"
                ],
                "tactic_res": [
                    "c13_goal : forall _ : lt r dest_reg,\neq\n  (eval_prog'\n     (app (compile' e2 (S dest_reg))\n        (cons (ADD dest_reg (S dest_reg) dest_reg) nil))\n     (eval_prog' (compile' e1 dest_reg) st) r) (st r)"
                ]
            },
            {
                "tactic_sig": "rewrite _i with ( p1 := compile' _i ( S _i ) ) ( p2 := [ ADD ( _i ) ( S _i ) _i ] ) ( _i := ( eval_prog' ( compile' _i _i ) _i ) ) ( _i := _i ) .",
                "tactic_sig_no_out_arg": "rewrite _i with ( p1 := compile' _i ( S _i ) ) ( p2 := [ ADD ( _i ) ( S _i ) _i ] ) ( _i := ( eval_prog' ( compile' _i _i ) _i ) ) ( _i := _i ) .",
                "tactic_args": [
                    "c13_goal : forall _ : lt r dest_reg,\neq\n  (eval_prog'\n     (app (compile' e2 (S dest_reg))\n        (cons (ADD dest_reg (S dest_reg) dest_reg) nil))\n     (eval_prog' (compile' e1 dest_reg) st) r) (st r)",
                    "_global_eval_prog_append : forall (p1 p2 : prog) (st : state) (r : nat),\n       eq (eval_prog' (app p1 p2) st r) (eval_prog' p2 (eval_prog' p1 st) r)",
                    "c4_e2 : expr",
                    "c11_dest_reg : nat",
                    "c11_dest_reg : nat",
                    "c11_dest_reg : nat",
                    "c11_dest_reg : nat",
                    "c12_st : state",
                    "c4_e1 : expr",
                    "c11_dest_reg : nat",
                    "c12_st : state",
                    "c12_r : nat",
                    "c12_r : nat"
                ],
                "tactic_res": [
                    "c14_goal : forall _ : lt r dest_reg,\neq\n  (eval_prog' (cons (ADD dest_reg (S dest_reg) dest_reg) nil)\n     (eval_prog' (compile' e2 (S dest_reg))\n        (eval_prog' (compile' e1 dest_reg) st)) r) \n  (st r)"
                ]
            },
            {
                "tactic_sig": "intros _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c14_goal : forall _ : lt r dest_reg,\neq\n  (eval_prog' (cons (ADD dest_reg (S dest_reg) dest_reg) nil)\n     (eval_prog' (compile' e2 (S dest_reg))\n        (eval_prog' (compile' e1 dest_reg) st)) r) \n  (st r)"
                ],
                "tactic_res": [
                    "c15_goal : eq\n  (eval_prog' (cons (ADD dest_reg (S dest_reg) dest_reg) nil)\n     (eval_prog' (compile' e2 (S dest_reg))\n        (eval_prog' (compile' e1 dest_reg) st)) r) \n  (st r)",
                    "c15_H : lt r dest_reg"
                ]
            },
            {
                "tactic_sig": "specialize ( _i _i _i _i _i ) .",
                "tactic_sig_no_out_arg": "specialize ( _i _i _i _i _i ) .",
                "tactic_args": [
                    "c4_IHe1 : forall (dest_reg : nat) (st : state) (r : nat) (_ : lt r dest_reg),\neq (eval_prog' (compile' e1 dest_reg) st r) (st r)",
                    "c11_dest_reg : nat",
                    "c12_st : state",
                    "c12_r : nat",
                    "c15_H : lt r dest_reg"
                ],
                "tactic_res": [
                    "c15_IHe1 : eq (eval_prog' (compile' e1 dest_reg) st r) (st r)"
                ]
            },
            {
                "tactic_sig": "rewrite <- _i .",
                "tactic_sig_no_out_arg": "rewrite <- _i .",
                "tactic_args": [
                    "c15_goal : eq\n  (eval_prog' (cons (ADD dest_reg (S dest_reg) dest_reg) nil)\n     (eval_prog' (compile' e2 (S dest_reg))\n        (eval_prog' (compile' e1 dest_reg) st)) r) \n  (st r)",
                    "c4_IHe1 : forall (dest_reg : nat) (st : state) (r : nat) (_ : lt r dest_reg),\neq (eval_prog' (compile' e1 dest_reg) st r) (st r)"
                ],
                "tactic_res": [
                    "c16_goal : eq\n  (eval_prog' (cons (ADD dest_reg (S dest_reg) dest_reg) nil)\n     (eval_prog' (compile' e2 (S dest_reg))\n        (eval_prog' (compile' e1 dest_reg) st)) r)\n  (eval_prog' (compile' e1 dest_reg) st r)"
                ]
            },
            {
                "tactic_sig": "symmetry in _i .",
                "tactic_sig_no_out_arg": "symmetry in _i .",
                "tactic_args": [
                    "c4_IHe2 : forall (dest_reg : nat) (st : state) (r : nat) (_ : lt r dest_reg),\neq (eval_prog' (compile' e2 dest_reg) st r) (st r)"
                ],
                "tactic_res": [
                    "c16_IHe2 : forall (dest_reg : nat) (st : state) (r : nat) (_ : lt r dest_reg),\neq (st r) (eval_prog' (compile' e2 dest_reg) st r)"
                ]
            },
            {
                "tactic_sig": "rewrite _i with ( _i := ( S _i ) ) ( _i := eval_prog' ( compile' _i _i ) _i ) ( _i := _i ) .",
                "tactic_sig_no_out_arg": "rewrite _i with ( _i := ( S _i ) ) ( _i := eval_prog' ( compile' _i _i ) _i ) ( _i := _i ) .",
                "tactic_args": [
                    "c16_goal : eq\n  (eval_prog' (cons (ADD dest_reg (S dest_reg) dest_reg) nil)\n     (eval_prog' (compile' e2 (S dest_reg))\n        (eval_prog' (compile' e1 dest_reg) st)) r)\n  (eval_prog' (compile' e1 dest_reg) st r)",
                    "c4_IHe2 : forall (dest_reg : nat) (st : state) (r : nat) (_ : lt r dest_reg),\neq (eval_prog' (compile' e2 dest_reg) st r) (st r)",
                    "c11_dest_reg : nat",
                    "c11_dest_reg : nat",
                    "c12_st : state",
                    "c4_e1 : expr",
                    "c11_dest_reg : nat",
                    "c12_st : state",
                    "c12_r : nat",
                    "c12_r : nat"
                ],
                "tactic_res": [
                    "c17_goal : eq\n  (eval_prog' (cons (ADD dest_reg (S dest_reg) dest_reg) nil)\n     (eval_prog' (compile' e2 (S dest_reg))\n        (eval_prog' (compile' e1 dest_reg) st)) r)\n  (eval_prog' (compile' e2 (S dest_reg))\n     (eval_prog' (compile' e1 dest_reg) st) r)",
                    "c18_goal : lt r (S dest_reg)"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c17_goal : eq\n  (eval_prog' (cons (ADD dest_reg (S dest_reg) dest_reg) nil)\n     (eval_prog' (compile' e2 (S dest_reg))\n        (eval_prog' (compile' e1 dest_reg) st)) r)\n  (eval_prog' (compile' e2 (S dest_reg))\n     (eval_prog' (compile' e1 dest_reg) st) r)",
                    "_global_add_registers_untouched : forall (dest_reg : nat) (st : state) (r : nat) (_ : lt r dest_reg),\n       eq (eval_prog' (cons (ADD dest_reg (S dest_reg) dest_reg) nil) st r)\n         (st r)"
                ],
                "tactic_res": [
                    "c19_goal : lt r dest_reg"
                ]
            },
            {
                "tactic_sig": "lia .",
                "tactic_sig_no_out_arg": "lia .",
                "tactic_args": [
                    "c19_goal : lt r dest_reg"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "lia .",
                "tactic_sig_no_out_arg": "lia .",
                "tactic_args": [
                    "c18_goal : lt r (S dest_reg)"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "compile_correct'",
        "proof": [
            {
                "tactic_sig": "Lemma compile_correct' : forall ( e : expr ) ( dest_reg : reg ) ( st : state ) , eval_prog' ( compile' e dest_reg ) st dest_reg = eval_expr e .",
                "tactic_sig_no_out_arg": "Lemma compile_correct' : forall ( e : expr ) ( dest_reg : reg ) ( st : state ) , eval_prog' ( compile' e dest_reg ) st dest_reg = eval_expr e .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (e : expr) (dest_reg : nat) (st : state),\neq (eval_prog' (compile' e dest_reg) st dest_reg) (eval_expr e)"
                ]
            },
            {
                "tactic_sig": "induction e .",
                "tactic_sig_no_out_arg": "induction e .",
                "tactic_args": [
                    "c1_goal : forall (e : expr) (dest_reg : nat) (st : state),\neq (eval_prog' (compile' e dest_reg) st dest_reg) (eval_expr e)"
                ],
                "tactic_res": [
                    "c2_goal : forall (dest_reg : nat) (st : state),\neq (eval_prog' (compile' (Const n) dest_reg) st dest_reg)\n  (eval_expr (Const n))",
                    "c2_n : nat",
                    "c3_goal : forall (dest_reg : nat) (st : state),\neq (eval_prog' (compile' (Plus e1 e2) dest_reg) st dest_reg)\n  (eval_expr (Plus e1 e2))",
                    "c3_IHe2 : forall (dest_reg : nat) (st : state),\neq (eval_prog' (compile' e2 dest_reg) st dest_reg) (eval_expr e2)",
                    "c3_IHe1 : forall (dest_reg : nat) (st : state),\neq (eval_prog' (compile' e1 dest_reg) st dest_reg) (eval_expr e1)",
                    "c3_e2 : expr",
                    "c3_e1 : expr"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c2_goal : forall (dest_reg : nat) (st : state),\neq (eval_prog' (compile' (Const n) dest_reg) st dest_reg)\n  (eval_expr (Const n))"
                ],
                "tactic_res": [
                    "c4_goal : forall (dest_reg : nat) (st : state),\neq (set_register st dest_reg n dest_reg) n"
                ]
            },
            {
                "tactic_sig": "unfold set_register .",
                "tactic_sig_no_out_arg": "unfold set_register .",
                "tactic_args": [
                    "c4_goal : forall (dest_reg : nat) (st : state),\neq (set_register st dest_reg n dest_reg) n"
                ],
                "tactic_res": [
                    "c5_goal : forall (dest_reg : nat) (st : state),\neq (if reg_eq dest_reg dest_reg then n else st dest_reg) n"
                ]
            },
            {
                "tactic_sig": "intros _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c5_goal : forall (dest_reg : nat) (st : state),\neq (if reg_eq dest_reg dest_reg then n else st dest_reg) n"
                ],
                "tactic_res": [
                    "c6_goal : eq (if reg_eq dest_reg dest_reg then n else st dest_reg) n",
                    "c6_dest_reg : nat",
                    "c6_st : state"
                ]
            },
            {
                "tactic_sig": "destruct ( reg_eq _i _i ) as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct ( reg_eq _i _i ) .",
                "tactic_args": [
                    "c6_goal : eq (if reg_eq dest_reg dest_reg then n else st dest_reg) n",
                    "c6_dest_reg : nat",
                    "c6_dest_reg : nat"
                ],
                "tactic_res": [
                    "c7_goal : eq n n",
                    "c7_e : eq dest_reg dest_reg",
                    "c8_goal : eq (st dest_reg) n",
                    "c8_n0 : not (eq dest_reg dest_reg)"
                ]
            },
            {
                "tactic_sig": "lia .",
                "tactic_sig_no_out_arg": "lia .",
                "tactic_args": [
                    "c7_goal : eq n n"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "lia .",
                "tactic_sig_no_out_arg": "lia .",
                "tactic_args": [
                    "c8_goal : eq (st dest_reg) n"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c3_goal : forall (dest_reg : nat) (st : state),\neq (eval_prog' (compile' (Plus e1 e2) dest_reg) st dest_reg)\n  (eval_expr (Plus e1 e2))"
                ],
                "tactic_res": [
                    "c9_goal : forall (dest_reg : nat) (st : state),\neq\n  (eval_prog'\n     (app (compile' e1 dest_reg)\n        (app (compile' e2 (S dest_reg))\n           (cons (ADD dest_reg (S dest_reg) dest_reg) nil))) st\n     dest_reg) (Init.Nat.add (eval_expr e1) (eval_expr e2))"
                ]
            },
            {
                "tactic_sig": "intros _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c9_goal : forall (dest_reg : nat) (st : state),\neq\n  (eval_prog'\n     (app (compile' e1 dest_reg)\n        (app (compile' e2 (S dest_reg))\n           (cons (ADD dest_reg (S dest_reg) dest_reg) nil))) st\n     dest_reg) (Init.Nat.add (eval_expr e1) (eval_expr e2))"
                ],
                "tactic_res": [
                    "c10_goal : eq\n  (eval_prog'\n     (app (compile' e1 dest_reg)\n        (app (compile' e2 (S dest_reg))\n           (cons (ADD dest_reg (S dest_reg) dest_reg) nil))) st\n     dest_reg) (Init.Nat.add (eval_expr e1) (eval_expr e2))",
                    "c10_dest_reg : nat",
                    "c10_st : state"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c10_goal : eq\n  (eval_prog'\n     (app (compile' e1 dest_reg)\n        (app (compile' e2 (S dest_reg))\n           (cons (ADD dest_reg (S dest_reg) dest_reg) nil))) st\n     dest_reg) (Init.Nat.add (eval_expr e1) (eval_expr e2))",
                    "_global_eval_prog_append : forall (p1 p2 : prog) (st : state) (r : nat),\n       eq (eval_prog' (app p1 p2) st r) (eval_prog' p2 (eval_prog' p1 st) r)"
                ],
                "tactic_res": [
                    "c11_goal : eq\n  (eval_prog'\n     (app (compile' e2 (S dest_reg))\n        (cons (ADD dest_reg (S dest_reg) dest_reg) nil))\n     (eval_prog' (compile' e1 dest_reg) st) dest_reg)\n  (Init.Nat.add (eval_expr e1) (eval_expr e2))"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c11_goal : eq\n  (eval_prog'\n     (app (compile' e2 (S dest_reg))\n        (cons (ADD dest_reg (S dest_reg) dest_reg) nil))\n     (eval_prog' (compile' e1 dest_reg) st) dest_reg)\n  (Init.Nat.add (eval_expr e1) (eval_expr e2))",
                    "_global_eval_prog_append : forall (p1 p2 : prog) (st : state) (r : nat),\n       eq (eval_prog' (app p1 p2) st r) (eval_prog' p2 (eval_prog' p1 st) r)"
                ],
                "tactic_res": [
                    "c12_goal : eq\n  (eval_prog' (cons (ADD dest_reg (S dest_reg) dest_reg) nil)\n     (eval_prog' (compile' e2 (S dest_reg))\n        (eval_prog' (compile' e1 dest_reg) st)) dest_reg)\n  (Init.Nat.add (eval_expr e1) (eval_expr e2))"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c12_goal : eq\n  (eval_prog' (cons (ADD dest_reg (S dest_reg) dest_reg) nil)\n     (eval_prog' (compile' e2 (S dest_reg))\n        (eval_prog' (compile' e1 dest_reg) st)) dest_reg)\n  (Init.Nat.add (eval_expr e1) (eval_expr e2))"
                ],
                "tactic_res": [
                    "c13_goal : eq\n  (set_register\n     (eval_prog' (compile' e2 (S dest_reg))\n        (eval_prog' (compile' e1 dest_reg) st)) dest_reg\n     (Init.Nat.add\n        (eval_prog' (compile' e2 (S dest_reg))\n           (eval_prog' (compile' e1 dest_reg) st) dest_reg)\n        (eval_prog' (compile' e2 (S dest_reg))\n           (eval_prog' (compile' e1 dest_reg) st) \n           (S dest_reg))) dest_reg)\n  (Init.Nat.add (eval_expr e1) (eval_expr e2))"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c13_goal : eq\n  (set_register\n     (eval_prog' (compile' e2 (S dest_reg))\n        (eval_prog' (compile' e1 dest_reg) st)) dest_reg\n     (Init.Nat.add\n        (eval_prog' (compile' e2 (S dest_reg))\n           (eval_prog' (compile' e1 dest_reg) st) dest_reg)\n        (eval_prog' (compile' e2 (S dest_reg))\n           (eval_prog' (compile' e1 dest_reg) st) \n           (S dest_reg))) dest_reg)\n  (Init.Nat.add (eval_expr e1) (eval_expr e2))",
                    "_global_compile'_registers_untouched : forall (e : expr) (dest_reg : nat) (st : state) \n         (r : nat) (_ : lt r dest_reg),\n       eq (eval_prog' (compile' e dest_reg) st r) (st r)"
                ],
                "tactic_res": [
                    "c14_goal : eq\n  (set_register\n     (eval_prog' (compile' e2 (S dest_reg))\n        (eval_prog' (compile' e1 dest_reg) st)) dest_reg\n     (Init.Nat.add (eval_prog' (compile' e1 dest_reg) st dest_reg)\n        (eval_prog' (compile' e2 (S dest_reg))\n           (eval_prog' (compile' e1 dest_reg) st) \n           (S dest_reg))) dest_reg)\n  (Init.Nat.add (eval_expr e1) (eval_expr e2))",
                    "c15_goal : lt dest_reg (S dest_reg)"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c14_goal : eq\n  (set_register\n     (eval_prog' (compile' e2 (S dest_reg))\n        (eval_prog' (compile' e1 dest_reg) st)) dest_reg\n     (Init.Nat.add (eval_prog' (compile' e1 dest_reg) st dest_reg)\n        (eval_prog' (compile' e2 (S dest_reg))\n           (eval_prog' (compile' e1 dest_reg) st) \n           (S dest_reg))) dest_reg)\n  (Init.Nat.add (eval_expr e1) (eval_expr e2))",
                    "c3_IHe1 : forall (dest_reg : nat) (st : state),\neq (eval_prog' (compile' e1 dest_reg) st dest_reg) (eval_expr e1)"
                ],
                "tactic_res": [
                    "c16_goal : eq\n  (set_register\n     (eval_prog' (compile' e2 (S dest_reg))\n        (eval_prog' (compile' e1 dest_reg) st)) dest_reg\n     (Init.Nat.add (eval_expr e1)\n        (eval_prog' (compile' e2 (S dest_reg))\n           (eval_prog' (compile' e1 dest_reg) st) \n           (S dest_reg))) dest_reg)\n  (Init.Nat.add (eval_expr e1) (eval_expr e2))"
                ]
            },
            {
                "tactic_sig": "rewrite _i with ( _i := ( S _i ) ) .",
                "tactic_sig_no_out_arg": "rewrite _i with ( _i := ( S _i ) ) .",
                "tactic_args": [
                    "c16_goal : eq\n  (set_register\n     (eval_prog' (compile' e2 (S dest_reg))\n        (eval_prog' (compile' e1 dest_reg) st)) dest_reg\n     (Init.Nat.add (eval_expr e1)\n        (eval_prog' (compile' e2 (S dest_reg))\n           (eval_prog' (compile' e1 dest_reg) st) \n           (S dest_reg))) dest_reg)\n  (Init.Nat.add (eval_expr e1) (eval_expr e2))",
                    "c3_IHe2 : forall (dest_reg : nat) (st : state),\neq (eval_prog' (compile' e2 dest_reg) st dest_reg) (eval_expr e2)",
                    "c10_dest_reg : nat",
                    "c10_dest_reg : nat"
                ],
                "tactic_res": [
                    "c17_goal : eq\n  (set_register\n     (eval_prog' (compile' e2 (S dest_reg))\n        (eval_prog' (compile' e1 dest_reg) st)) dest_reg\n     (Init.Nat.add (eval_expr e1) (eval_expr e2)) dest_reg)\n  (Init.Nat.add (eval_expr e1) (eval_expr e2))"
                ]
            },
            {
                "tactic_sig": "unfold set_register .",
                "tactic_sig_no_out_arg": "unfold set_register .",
                "tactic_args": [
                    "c17_goal : eq\n  (set_register\n     (eval_prog' (compile' e2 (S dest_reg))\n        (eval_prog' (compile' e1 dest_reg) st)) dest_reg\n     (Init.Nat.add (eval_expr e1) (eval_expr e2)) dest_reg)\n  (Init.Nat.add (eval_expr e1) (eval_expr e2))"
                ],
                "tactic_res": [
                    "c18_goal : eq\n  (if reg_eq dest_reg dest_reg\n   then Init.Nat.add (eval_expr e1) (eval_expr e2)\n   else\n    eval_prog' (compile' e2 (S dest_reg))\n      (eval_prog' (compile' e1 dest_reg) st) dest_reg)\n  (Init.Nat.add (eval_expr e1) (eval_expr e2))"
                ]
            },
            {
                "tactic_sig": "destruct ( reg_eq _i _i ) as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct ( reg_eq _i _i ) .",
                "tactic_args": [
                    "c18_goal : eq\n  (if reg_eq dest_reg dest_reg\n   then Init.Nat.add (eval_expr e1) (eval_expr e2)\n   else\n    eval_prog' (compile' e2 (S dest_reg))\n      (eval_prog' (compile' e1 dest_reg) st) dest_reg)\n  (Init.Nat.add (eval_expr e1) (eval_expr e2))",
                    "c10_dest_reg : nat",
                    "c10_dest_reg : nat"
                ],
                "tactic_res": [
                    "c19_goal : eq (Init.Nat.add (eval_expr e1) (eval_expr e2))\n  (Init.Nat.add (eval_expr e1) (eval_expr e2))",
                    "c19_e : eq dest_reg dest_reg",
                    "c20_goal : eq\n  (eval_prog' (compile' e2 (S dest_reg))\n     (eval_prog' (compile' e1 dest_reg) st) dest_reg)\n  (Init.Nat.add (eval_expr e1) (eval_expr e2))",
                    "c20_n : not (eq dest_reg dest_reg)"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c19_goal : eq (Init.Nat.add (eval_expr e1) (eval_expr e2))\n  (Init.Nat.add (eval_expr e1) (eval_expr e2))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "lia .",
                "tactic_sig_no_out_arg": "lia .",
                "tactic_args": [
                    "c20_goal : eq\n  (eval_prog' (compile' e2 (S dest_reg))\n     (eval_prog' (compile' e1 dest_reg) st) dest_reg)\n  (Init.Nat.add (eval_expr e1) (eval_expr e2))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "lia .",
                "tactic_sig_no_out_arg": "lia .",
                "tactic_args": [
                    "c15_goal : lt dest_reg (S dest_reg)"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "compile_correct",
        "proof": [
            {
                "tactic_sig": "Theorem compile_correct : forall e , eval_prog ( compile e ) = eval_expr e .",
                "tactic_sig_no_out_arg": "Theorem compile_correct : forall e , eval_prog ( compile e ) = eval_expr e .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall e : expr, eq (eval_prog (compile e)) (eval_expr e)"
                ]
            },
            {
                "tactic_sig": "intros _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c1_goal : forall e : expr, eq (eval_prog (compile e)) (eval_expr e)"
                ],
                "tactic_res": [
                    "c2_goal : eq (eval_prog (compile e)) (eval_expr e)",
                    "c2_e : expr"
                ]
            },
            {
                "tactic_sig": "unfold eval_prog .",
                "tactic_sig_no_out_arg": "unfold eval_prog .",
                "tactic_args": [
                    "c2_goal : eq (eval_prog (compile e)) (eval_expr e)"
                ],
                "tactic_res": [
                    "c3_goal : eq (eval_prog' (compile e) initial_state O) (eval_expr e)"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c3_goal : eq (eval_prog' (compile e) initial_state O) (eval_expr e)",
                    "_global_compile_correct' : forall (e : expr) (dest_reg : nat) (st : state),\n       eq (eval_prog' (compile' e dest_reg) st dest_reg) (eval_expr e)"
                ],
                "tactic_res": []
            }
        ]
    }
]