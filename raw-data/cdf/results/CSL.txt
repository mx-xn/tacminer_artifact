Lemma safe_pure : forall n v h ( Q : postcond ) J, Q v h -> safe n ( PURE v ) h Q J .
Proof.
   intros n v h Q J H. destruct n as [  | ]. 
    - constructor.
    - constructor. auto.
Qed.
Lemma safe_pure_inv : forall n v h Q J, safe ( S n ) ( PURE v ) h Q J -> Q v h .
Proof.
   intros n v h Q J H. inv H. 
    - auto.
    - contradiction.
Qed.
Lemma safe_red : forall n c h1 Q J hj hf c' h', red ( c, hunion h1 ( hunion hj hf ) ) ( c', h' ) -> safe ( S n ) c h1 Q J -> J hj -> hdisj3 h1 hj hf -> exists h1' hj', hdisj3 h1' hj' hf /\ h' = hunion h1' ( hunion hj' hf ) /\ J hj' /\ safe n c' h1' Q J .
Proof.
   intros n c h1 Q J hj hf c' h' H H0 H1 H2. inv H0. 
    - inv H.
    - eauto.
Qed.
Lemma safe_redN : forall n c h1 Q J hj hf c' h', starN red n ( c, hunion h1 ( hunion hj hf ) ) ( c', h' ) -> safe ( S n ) c h1 Q J -> J hj -> hdisj3 h1 hj hf -> exists h1' hj', hdisj3 h1' hj' hf /\ h' = hunion h1' ( hunion hj' hf ) /\ J hj' /\ safe 1 % nat c' h1' Q J .
Proof.
   intro n. induction n. 
    - intros c h1 Q J hj hf c' h' H H0 H1 H2. inv H. exists h1, hj. auto.
    - intros c h1 Q J hj hf c' h' H H0 H1 H2. inv H. rename c' into c''. rename h' into h''. destruct b as [ c' h' ]. edestruct safe_red as ( h1' & hj' & A & B & C & D ). 
      -- eassumption.
      -- eassumption.
      -- assumption.
      -- assumption.
      -- subst h'. eapply IHn. 
        --- eauto.
        --- eauto.
        --- eauto.
        --- eauto.
Qed.
Lemma safe_not_erroneous : forall n c h1 Q J hj hf, safe ( S n ) c h1 Q J -> hdisj3 h1 hj hf -> J hj -> ~ erroneous ( c, hunion h1 ( hunion hj hf ) ) .
Proof.
   intros n c h1 Q J hj hf H H0 H1. inv H. 
    - intros ST. inv ST.
    - eauto.
Qed.
Lemma safe_immacc : forall n c h1 Q J l, safe ( S n ) c h1 Q J -> immacc l c -> h1 l <> None .
Proof.
   intros n c h1 Q J l H H0. inv H. 
    - contradiction.
    - eapply ACC. auto.
Qed.
Lemma safe_mono : forall n c h Q J, safe n c h Q J -> forall n', ( n' <= n ) % nat -> safe n' c h Q J .
Proof.
   intro n. induction n. 
    - intros c h Q J H n' H0. replace n' with O by lia. constructor.
    - intros c h Q J H n' H0. destruct n' as [ | n' ]. 
      -- constructor.
      -- inv H. 
        --- constructor. auto.
        --- constructor. 
          ---- auto.
          ---- auto.
          ---- auto.
          ---- intros hf hj h0 c' h' H H1 H2 H3. edestruct STEP as ( h1' & hj' & A & B & C & D ). 
            ----- eauto.
            ----- eauto.
            ----- eauto.
            ----- eauto.
            ----- exists h1', hj'. intuition auto. apply IHn. 
              ------ auto.
              ------ lia.
Qed.
Lemma safe_frame : forall ( R : assertion ) ( Q : postcond ) J n c h h', safe n c h Q J -> hdisjoint h h' -> R h' -> safe n c ( hunion h h' ) ( fun v => Q v ** R ) J .
Proof.
   intros R Q J n. induction n. 
    - intros c h h' H H0 H1. constructor.
    - intros c h h' H H0 H1. inv H. 
      -- constructor. exists h, h'. auto.
      -- constructor. 
        --- auto.
        --- intros l H. apply ACC in H. cbn. destruct ( h l ) as [ z| ]. 
          ---- congruence.
          ---- congruence.
        --- intros hf hj h0 H H2 H3. subst h0. apply ( IMM ( hunion h' hf ) hj ). 
          ---- HDISJ.
          ---- rewrite hunion_assoc. f_equal. rewrite hunion_comm by HDISJ. rewrite hunion_assoc. f_equal. apply hunion_comm. HDISJ.
          ---- auto.
        --- intros hf hj h0 c' h'0 H H2 H3 H4. subst h0. edestruct ( STEP ( hunion h' hf ) hj ) as ( h1' & hj' & A & B & C & D ). 
          ---- HDISJ.
          ---- eauto.
          ---- eauto.
          ---- rewrite ( hunion_comm ( hunion h' hf ) ) by HDISJ. rewrite hunion_assoc. rewrite <- hunion_assoc. rewrite ( hunion_comm hj ) by HDISJ. eauto.
          ---- exists ( hunion h1' h' ), hj'. split. 
            ----- HDISJ.
            ----- split. 
              ------ rewrite hunion_assoc. rewrite ( hunion_comm ( hunion hj' hf ) ) by HDISJ. rewrite hunion_assoc. rewrite ( hunion_comm h' ) by HDISJ. assumption.
              ------ split. 
                ------- assumption.
                ------- apply IHn. 
                  -------- auto.
                  -------- HDISJ.
                  -------- auto.
Qed.
Lemma triple_frame : forall J P c Q R, J ⊢ ⦃ P ⦄ c ⦃ Q ⦄ -> J ⊢ ⦃ P ** R ⦄ c ⦃ fun v => Q v ** R ⦄ .
Proof.
   intros J P c Q R H. red. intros n h H0. destruct H0 as ( h1 & h2 & P1 & R2 & D & U ). subst h. apply safe_frame. 
    - auto.
    - auto.
    - auto.
Qed.
Lemma safe_frame_invariant : forall Q ( J J' : invariant ) n c h, safe n c h Q J -> safe n c h Q ( J ** J' ) .
Proof.
   intros Q J J' n. induction n. 
    - intros c h H. constructor.
    - intros c h H. inv H. 
      -- constructor. auto.
      -- constructor. 
        --- auto.
        --- auto.
        --- intros hf hj h0 H H0 H1. destruct H1 as ( hj1 & hj2 & A & B & C & D ). subst hj h0. apply ( IMM ( hunion hj2 hf ) hj1 ). 
          ---- HDISJ.
          ---- f_equal. rewrite hunion_assoc. auto.
          ---- auto.
        --- intros hf hj h0 c' h' H H0 H1 H2. destruct H1 as ( hj1 & hj2 & A & B & C & D ). subst hj h0. edestruct ( STEP ( hunion hj2 hf ) hj1 ) as ( h1' & hj1' & U & V & X & Y ). 
          ---- HDISJ.
          ---- eauto.
          ---- auto.
          ---- rewrite <- ( hunion_assoc hj1 ) by HDISJ. eauto.
          ---- subst h'. exists h1', ( hunion hj1' hj2 ). split. 
            ----- HDISJ.
            ----- split. 
              ------ f_equal. rewrite hunion_assoc. auto.
              ------ split. 
                ------- exists hj1', hj2. intuition auto. HDISJ.
                ------- apply IHn. auto.
Qed.
Lemma triple_frame_invariant : forall J J' P c Q, J ⊢ ⦃ P ⦄ c ⦃ Q ⦄ -> J ** J' ⊢ ⦃ P ⦄ c ⦃ Q ⦄ .
Proof.
   intros J J' P c Q H. red. intros n h H0. apply safe_frame_invariant. auto.
Qed.
Lemma triple_atomic : forall J P c ( Q : postcond ), emp ⊢ ⦃ P ** J ⦄ c ⦃ fun v => Q v ** J ⦄ -> J ⊢ ⦃ P ⦄ ATOMIC c ⦃ Q ⦄ .
Proof.
   intros until Q. intros TR n h Ph. destruct n as [  | ]. 
    - constructor.
    - constructor. 
      -- auto.
      -- auto.
      -- intros hf hj h0 H H0 H1. intro ST. inv ST. apply star_starN in H4. destruct H4 as ( N & STEPS ). rewrite <- hunion_assoc in STEPS. rewrite <- ( hunion_empty hf ) in STEPS. edestruct safe_redN as ( h1' & hj' & A & B & C & D ). 
        --- eexact STEPS.
        --- apply TR. exists h, hj. intuition auto. HDISJ.
        --- reflexivity.
        --- HDISJ.
        --- eelim safe_not_erroneous. 
          ---- eexact D.
          ---- eexact A.
          ---- eauto.
          ---- .
      -- subst h'. 
        --- auto.
        --- intros hf hj h0 c' h' H H0 H1 H2. 
Qed.
Lemma safe_share : forall Q ( J J' : invariant ) n c h h', safe n c h Q ( J ** J' ) -> hdisjoint h h' -> J' h' -> safe n c ( hunion h h' ) ( fun v => Q v ** J' ) J .
Proof.
   intros Q J J' n. induction n. 
    - intros c h h' H H0 H1. constructor.
    - intros c h h' H H0 H1. inv H. 
      -- constructor. exists h, h'. auto.
      -- constructor. 
        --- auto.
        --- intros l H. apply ACC in H. cbn. destruct ( h l ) as [ z| ]. 
          ---- congruence.
          ---- congruence.
        --- intros hf hj h0 H H2 H3. apply ( IMM hf ( hunion h' hj ) ). 
          ---- HDISJ.
          ---- subst h0. rewrite ! hunion_assoc. auto.
          ---- rewrite hunion_comm by HDISJ. exists hj, h'. intuition auto. HDISJ.
        --- intros hf hj h0 c' h'0 H H2 H3 H4. edestruct ( STEP hf ( hunion h' hj ) ) as ( h1' & hj' & U & V & X & Y ). 
          ---- HDISJ.
          ---- subst h0. rewrite ! hunion_assoc. auto.
          ---- rewrite hunion_comm by HDISJ. exists hj, h'. intuition auto. HDISJ.
          ---- rewrite <- hunion_assoc by HDISJ. subst h0. eauto.
          ---- destruct X as ( hj1' & hj2' & A & B & C & D ). subst hj' h'0 h0. exists ( hunion h1' hj2' ), hj1'. split. 
            ----- HDISJ.
            ----- split. 
              ------ rewrite ( hunion_comm hj2' ) by HDISJ. rewrite ! hunion_assoc. auto.
              ------ split. 
                ------- auto.
                ------- apply IHn. 
                  -------- auto.
                  -------- HDISJ.
                  -------- auto.
Qed.
Lemma triple_share : forall J J' P c Q, J ** J' ⊢ ⦃ P ⦄ c ⦃ Q ⦄ -> J ⊢ ⦃ P ** J' ⦄ c ⦃ fun v => Q v ** J' ⦄ .
Proof.
   intros J J' P c Q H. intros n h ( h1 & h2 & Ph1 & J'h2 & D & U ). subst h. apply safe_share. 
    - auto.
    - auto.
    - auto.
Qed.
Lemma triple_pure : forall J P Q v, aimp P ( Q v ) -> J ⊢ ⦃ P ⦄ PURE v ⦃ Q ⦄ .
Proof.
   intros J P Q v IMP n h Ph. apply safe_pure. auto.
Qed.
Lemma safe_let : forall ( Q R : postcond ) ( J : invariant ) f n c h, safe n c h Q J -> ( forall v n' h', Q v h' -> ( n' < n ) % nat -> safe n' ( f v ) h' R J ) -> safe n ( LET c f ) h R J .
Proof.
   intros Q R J f n. induction n. 
    - intros until h. intros S1 S2. constructor.
    - intros until h. intros S1 S2. constructor. 
      -- auto.
      -- intros l H. eapply safe_immacc. 
        --- eauto.
        --- eauto.
      -- intros hf hj h0 H H0 H1. red. intros H2. inv H2. eelim safe_not_erroneous. 
        --- eauto.
        --- eauto.
        --- eauto.
        --- eauto.
      -- intros hf hj h0 c' h' H H0 H1 H2. subst h0. inv H2. 
        --- exists h, hj. intuition auto. apply S2. 
          ---- eapply safe_pure_inv. eauto.
          ---- lia.
        --- edestruct safe_red as ( h1' & hj' & A & B & C & D ). 
          ---- eauto.
          ---- eauto.
          ---- eauto.
          ---- eauto.
          ---- exists h1', hj'. intuition auto.
Qed.
Lemma triple_let : forall c f ( J : invariant ) ( P : precond ) ( Q R : postcond ), J ⊢ ⦃ P ⦄ c ⦃ Q ⦄ -> ( forall v, J ⊢ ⦃ Q v ⦄ f v ⦃ R ⦄ ) -> J ⊢ ⦃ P ⦄ LET c f ⦃ R ⦄ .
Proof.
   intros c f J P Q R H H0. red. intros n h H1. apply safe_let with Q. 
    - apply H. auto.
    - intros v n' h' H2 H3. apply H0. auto.
Qed.
Corollary triple_seq : forall c1 c2 ( J : invariant ) ( P Q : precond ) ( R : postcond ), J ⊢ ⦃ P ⦄ c1 ⦃ fun _ => Q ⦄ -> J ⊢ ⦃ Q ⦄ c2 ⦃ R ⦄ -> J ⊢ ⦃ P ⦄ SEQ c1 c2 ⦃ R ⦄ .
Proof.
   intros c1 c2 J P Q R H H0. apply triple_let with ( fun _ => Q ). 
    - auto.
    - auto.
Qed.
Lemma safe_ifthenelse : forall n b c1 c2 h Q J, ( b <> 0 -> safe n c1 h Q J ) -> ( b = 0 -> safe n c2 h Q J ) -> safe ( S n ) ( IFTHENELSE b c1 c2 ) h Q J .
Proof.
   intros n b c1 c2 h Q J H H0. constructor. 
    - auto.
    - auto.
    - intros hf hj h0 H1 H2 H3. intro ST. inv ST.
    - intros hf hj h0 c' h' H1 H2 H3 H4. inv H4. exists h, hj. intuition auto. destruct ( Z.eqb_spec b 0 ) as [  e | n0 ]. 
      -- auto.
      -- auto.
Qed.
Lemma triple_ifthenelse : forall J b c1 c2 P Q, J ⊢ ⦃ ( b <> 0 ) //\\ P ⦄ c1 ⦃ Q ⦄ -> J ⊢ ⦃ ( b = 0 ) //\\ P ⦄ c2 ⦃ Q ⦄ -> J ⊢ ⦃ P ⦄ IFTHENELSE b c1 c2 ⦃ Q ⦄ .
Proof.
   intros J b c1 c2 P Q H H0. red. intros n h H1. destruct n as [  | ]. 
    - constructor.
    - apply safe_ifthenelse. 
      -- intros H2. apply H. split. 
        --- auto.
        --- auto.
      -- intros H2. apply H0. split. 
        --- auto.
        --- auto.
Qed.
Lemma triple_repeat : forall J P c Q, J ⊢ ⦃ P ⦄ c ⦃ Q ⦄ -> aimp ( Q 0 ) P -> J ⊢ ⦃ P ⦄ REPEAT c ⦃ fun v => ( v <> 0 ) //\\ Q v ⦄ .
Proof.
   intros J P c Q TR. intros IMP. red. intro n. induction n. 
    - intros h Ph. constructor.
    - intros h Ph. constructor. 
      -- auto.
      -- auto.
      -- intros hf hj h0 H H0 H1. intro ST. inv ST.
      -- intros hf hj h0 c' h' H H0 H1 H2. inv H2. exists h, hj. intuition auto. apply safe_let with Q. 
        --- apply TR. auto.
        --- intros v n' h' H0 H2. destruct n' as [  H2 | H2 ]. 
          ---- constructor.
          ---- apply safe_ifthenelse. 
            ----- intros H3. destruct n' as [  H2 | H2 ]. 
              ------ constructor.
              ------ constructor. split. 
                ------- auto.
                ------- auto.
            ----- intros H3. apply safe_mono with n. 
              ------ apply IHn. apply IMP. congruence.
              ------ lia.
Qed.
Lemma safe_par : forall ( J : invariant ) ( Q1 Q2 : assertion ) n c1 h1 c2 h2, safe n c1 h1 ( fun _ => Q1 ) J -> safe n c2 h2 ( fun _ => Q2 ) J -> hdisjoint h1 h2 -> safe n ( PAR c1 c2 ) ( hunion h1 h2 ) ( fun _ => Q1 ** Q2 ) J .
Proof.
   intros J Q1 Q2 n. 
    - induction n. 
      -- intros until h2. intros S1 S2 DISJ. constructor.
      -- intros until h2. intros S1 S2 DISJ. constructor. 
        --- auto.
        --- cbn. intros l H. destruct H as [ H | H ]. 
          ---- eapply safe_immacc with ( h1 := h1 ) in H. 
            ----- destruct ( h1 l ) as [ z| ]. 
              ------ congruence.
              ------ congruence.
            ----- eauto.
          ---- eapply safe_immacc with ( h1 := h2 ) in H. 
            ----- destruct ( h1 l ) as [ z'| ]. 
              ------ congruence.
              ------ congruence.
            ----- eauto.
        --- intros hf hj h H H0 H1. intros ST. inv ST. 
          ---- destruct H3 as [ IM1 IM2 ]. eapply safe_immacc with ( h1 := h1 ) in IM1. 
            ----- eapply safe_immacc with ( h1 := h2 ) in IM2. 
              ------ tauto.
              ------ eauto.
            ----- eauto.
          ---- rewrite <- ( hunion_comm h1 ) in H3 by HDISJ. rewrite hunion_assoc in H3. rewrite <- ( hunion_comm hj ) by HDISJ. rewrite hunion_assoc. rewrite ( hunion_comm hj ) by HDISJ. assumption.
          ---- elim ( safe_not_erroneous _ _ _ _ _ hj ( hunion h1 hf ) S2 ). 
            ----- HDISJ.
            ----- auto.
            ----- .
        --- intros hf hj h c' h' H H0 H1 H2. subst h. inv H2. 
          ---- apply safe_pure_inv in S1. apply safe_pure_inv in S2. exists ( hunion h1 h2 ), hj. intuition auto. apply safe_pure. exists h1, h2. intuition auto.
          ---- rewrite hunion_assoc in H3. rewrite <- ( hunion_comm h2 ) in H3 by HDISJ. rewrite hunion_assoc in H3. destruct ( safe_red _ _ _ _ _ _ _ _ _ H3 S1 ) as ( h1' & hj' & A & B & C & D ). 
            ----- auto.
            ----- HDISJ.
            ----- subst h'. exists ( hunion h1' h2 ), hj'. split. 
              ------ HDISJ.
              ------ split. 
                ------- rewrite hunion_assoc. f_equal. rewrite <- ( hunion_comm h2 ) by HDISJ. rewrite hunion_assoc. auto.
                ------- split. 
                  -------- assumption.
                  -------- apply IHn. 
                    --------- auto.
                    --------- apply safe_mono with ( S n ). 
                      ---------- auto.
                      ---------- auto.
                    --------- HDISJ.
          ---- rewrite <- ( hunion_comm h1 ) in H3 by HDISJ. rewrite hunion_assoc in H3. rewrite <- ( hunion_comm h1 ) in H3 by HDISJ. rewrite hunion_assoc in H3. destruct ( safe_red _ _ _ _ _ _ _ _ _ H3 S2 ) as ( h2' & hj' & A & B & C & D ). 
            ----- auto.
            ----- HDISJ.
            ----- subst h'. exists ( hunion h2' h1 ), hj'. split. 
              ------ HDISJ.
              ------ split. 
                ------- rewrite hunion_assoc. f_equal. rewrite <- ( hunion_comm h1 ) by HDISJ. rewrite hunion_assoc. auto.
                ------- split. 
                  -------- assumption.
                  -------- rewrite hunion_comm by HDISJ. apply IHn. 
                    --------- apply safe_mono with ( S n ). 
                      ---------- auto.
                      ---------- auto.
                    --------- auto.
                    --------- HDISJ.
    - ...
    - . specialize ( DISJ l.
    - . 
    - ...
    - . rewrite hunion_assoc in H3. 
Qed.
Lemma triple_par : forall J P1 c1 Q1 P2 c2 Q2, J ⊢ ⦃ P1 ⦄ c1 ⦃ fun _ => Q1 ⦄ -> J ⊢ ⦃ P2 ⦄ c2 ⦃ fun _ => Q2 ⦄ -> J ⊢ ⦃ P1 ** P2 ⦄ PAR c1 c2 ⦃ fun _ => Q1 ** Q2 ⦄ .
Proof.
   intros until Q2. intros TR1 TR2 n h Ph. destruct Ph as ( h1 & h2 & Ph1 & Ph2 & D & U ). subst h. apply safe_par. 
    - auto.
    - auto.
    - auto.
Qed.
Lemma triple_get : forall J l v, J ⊢ ⦃ contains l v ⦄ GET l ⦃ fun v' => ( v' = v ) //\\ contains l v ⦄ .
Proof.
   intros J l v n h Ph. 
    - assert ( L : h l = Some v ) by ( rewrite Ph ; apply hupdate_same ). destruct n as [  | ]. 
      -- constructor.
      -- constructor. 
        --- auto.
        --- cbn. intros l0 H. congruence.
        --- intros hf hj h0 H H0 H1. subst h0. intro ST. inv ST. cbn in H2. rewrite L in H2. congruence.
        --- intros hf hj h0 c' h' H H0 H1 H2. subst h0. inv H2. assert ( v0 = v ). 
          ---- congruence.
          ---- subst v0. exists h, hj. intuition auto. apply safe_pure. split. 
            ----- auto.
            ----- auto.
    - ...
Qed.
Lemma triple_set : forall J l v, J ⊢ ⦃ valid l ⦄ SET l v ⦃ fun _ => contains l v ⦄ .
Proof.
   intros J l v n h Ph. destruct Ph as ( v0 & Ph ). assert ( L : h l = Some v0 ) by ( rewrite Ph ; apply hupdate_same ). destruct n as [  | ]. 
    - constructor.
    - constructor. 
      -- auto.
      -- cbn. intros l0 H. congruence.
      -- intros hf hj h0 H H0 H1. intro ST. inv ST. cbn in H3. rewrite L in H3. congruence.
      -- intros hf hj h0 c' h' H H0 H1 H2. subst h0. inv H2. exists ( hupdate l v hempty ), hj. rewrite Ph in H. intuition auto. 
        --- HDISJ. 
          ---- red. intros l0. generalize ( H l0 ). cbn. destruct ( Z.eq_dec l l0 ) as [  e | n0 ]. 
            ----- intuition congruence.
            ----- intuition congruence.
          ---- red. intros l0. generalize ( H0 l0 ). cbn. destruct ( Z.eq_dec l l0 ) as [  e | n0 ]. 
            ----- intuition congruence.
            ----- intuition congruence.
        --- rewrite Ph. apply heap_extensionality. intros l0. cbn. destruct ( Z.eq_dec l l0 ) as [  e | n0 ]. 
          ---- auto.
          ---- auto.
        --- apply safe_pure. reflexivity.
Qed.
Remark valid_N_init : forall sz l, ( valid_N l sz ) ( hinit l sz hempty ) .
Proof.
   intro sz. induction sz as [ | sz ]. 
    - intros l. cbn. red. auto.
    - intros l. cbn. exists ( hupdate l 0 hempty ), ( hinit ( l + 1 ) sz hempty ). split. 
      -- exists 0. red. auto.
      -- split. 
        --- apply IHsz.
        --- split. 
          ---- intros x. unfold hupdate, hempty at 1. cbn. destruct ( Z.eq_dec l x ) as [  e | n ]. 
            ----- right. rewrite hinit_outside by lia. auto.
            ----- auto.
          ---- apply heap_extensionality. intros x. cbn. destruct ( Z.eq_dec l x ) as [  e | n ]. 
            ----- auto.
            ----- auto.
Qed.
Lemma triple_alloc : forall J sz, J ⊢ ⦃ emp ⦄ ALLOC sz ⦃ fun l => ( l <> 0 ) //\\ valid_N l sz ⦄ .
Proof.
   intros J sz n h Ph. red in Ph. subst h. destruct n as [  | ]. 
    - constructor.
    - constructor. 
      -- auto.
      -- auto.
      -- intros hf hj h H H0 H1. intro ST. inv ST.
      -- intros hf hj h c' h' H H0 H1 H2. rewrite hunion_empty in H0. subst h. inv H2. exists ( hinit l sz hempty ), hj. intuition auto. 
        --- assert ( D : hdisjoint ( hinit l sz hempty ) ( hunion hj hf ) ). 
          ---- red. intros l0. assert ( EITHER : l <= l0 < l + Z.of_nat sz \/ l0 < l \/ l + Z.of_nat sz <= l0 ) by lia. destruct EITHER as [  H0 | H0 ]. 
            ----- right. auto.
            ----- left. apply hinit_outside. auto.
          ---- HDISJ.
        --- apply heap_extensionality. intros l0. cbn. assert ( EITHER : l <= l0 < l + Z.of_nat sz \/ l0 < l \/ l + Z.of_nat sz <= l0 ) by lia. destruct EITHER as [  H0 | H0 ]. 
          ---- rewrite ! hinit_inside by auto. auto.
          ---- rewrite ! hinit_outside by auto. auto.
        --- apply safe_pure. split. 
          ---- auto.
          ---- apply valid_N_init.
Qed.
Lemma triple_free : forall J l, J ⊢ ⦃ valid l ⦄ FREE l ⦃ fun _ => emp ⦄ .
Proof.
   intros J l n h Ph. destruct Ph as ( v0 & Ph ). assert ( L : h l = Some v0 ) by ( rewrite Ph ; apply hupdate_same ). destruct n as [  | ]. 
    - constructor.
    - constructor. 
      -- auto.
      -- cbn. intros l0 H. congruence.
      -- intros hf hj h0 H H0 H1. intro ST. inv ST. cbn in H3. rewrite L in H3. congruence.
      -- intros hf hj h0 c' h' H H0 H1 H2. subst h0. inv H2. exists hempty, hj. rewrite Ph in H. intuition auto. 
        --- HDISJ.
        --- assert ( D : hdisjoint ( hupdate l v0 hempty ) ( hunion hj hf ) ) by HDISJ. rewrite Ph. apply heap_extensionality. intros l0. cbn. destruct ( Z.eq_dec l l0 ) as [  e | n0 ]. 
          ---- subst l0. destruct ( D l ) as [  H0 | H0 ]. 
            ----- rewrite hupdate_same in H0. congruence.
            ----- auto.
          ---- auto.
        --- apply safe_pure. reflexivity.
Qed.
Lemma triple_consequence_pre : forall P' J P c Q, J ⊢ ⦃ P' ⦄ c ⦃ Q ⦄ -> aimp P P' -> J ⊢ ⦃ P ⦄ c ⦃ Q ⦄ .
Proof.
   intros P' J P c Q H H0. intros n h Ph. apply H. auto.
Qed.
Lemma safe_consequence : forall ( Q Q' : postcond ) ( J : invariant ), ( forall v, aimp ( Q' v ) ( Q v ) ) -> forall n c h, safe n c h Q' J -> safe n c h Q J .
Proof.
   intros Q Q' J H n. induction n. 
    - intros c h H0. constructor.
    - intros c h H0. inv H0. 
      -- constructor. apply H. auto.
      -- constructor. 
        --- auto.
        --- auto.
        --- auto.
        --- intros hf hj h0 c' h' H0 H1 H2 H3. edestruct STEP as ( h1' & hj' & A & B & C & D ). 
          ---- eauto.
          ---- eauto.
          ---- eauto.
          ---- eauto.
          ---- exists h1', hj'. intuition auto.
Qed.
Lemma triple_consequence_post : forall Q' J P c Q, J ⊢ ⦃ P ⦄ c ⦃ Q' ⦄ -> ( forall v, aimp ( Q' v ) ( Q v ) ) -> J ⊢ ⦃ P ⦄ c ⦃ Q ⦄ .
Proof.
   intros Q' J P c Q H H0. intros n h Ph. apply safe_consequence with Q'. 
    - auto.
    - auto.
Qed.
Lemma triple_exists_pre : forall { X : Type } J ( P : X -> assertion ) c Q, ( forall v, J ⊢ ⦃ P v ⦄ c ⦃ Q ⦄ ) -> J ⊢ ⦃ aexists P ⦄ c ⦃ Q ⦄ .
Proof.
   intros X J P c Q H. intros n h Ph. destruct Ph as ( v & Ph ). apply ( H v ). auto.
Qed.
Lemma triple_simple_conj_pre : forall J ( P1 : Prop ) P2 c Q, ( P1 -> J ⊢ ⦃ P2 ⦄ c ⦃ Q ⦄ ) -> J ⊢ ⦃ P1 //\\ P2 ⦄ c ⦃ Q ⦄ .
Proof.
   intros J P1 P2 c Q H. intros n h Ph. destruct Ph as [  H1 H0 ]. apply H. 
    - auto.
    - auto.
Qed.
Lemma triple_or : forall J P c Q P' Q', J ⊢ ⦃ P ⦄ c ⦃ Q ⦄ -> J ⊢ ⦃ P' ⦄ c ⦃ Q' ⦄ -> J ⊢ ⦃ aor P P' ⦄ c ⦃ fun v => aor ( Q v ) ( Q' v ) ⦄ .
Proof.
   intros until Q'. intros TR1 TR2 n h [ P'h | TR1 ]. 
    - apply safe_consequence with Q. 
      -- intros v1 h1. red. auto.
      -- apply TR1. auto.
    - apply safe_consequence with Q'. 
      -- intros v1 h1. red. auto.
      -- apply TR2. auto.
Qed.
Lemma safe_and : forall J Q Q', precise J -> forall n c h, safe n c h Q J -> safe n c h Q' J -> safe n c h ( fun v => aand ( Q v ) ( Q' v ) ) J .
Proof.
   intros J Q Q' H n. induction n. 
    - intros c h S S'. constructor.
    - intros c h S S'. inv S. 
      -- inv S'. 
        --- constructor. split. 
          ---- auto.
          ---- auto.
        --- contradiction.
      -- inv S'. 
        --- contradiction.
        --- constructor. 
          ---- auto.
          ---- auto.
          ---- auto.
          ---- intros hf hj h0 c' h' H0 H1 H2 H3. edestruct STEP as ( h1' & hj' & D' & E' & J' & SAFE' ). 
            ----- eauto.
            ----- eauto.
            ----- eauto.
            ----- eauto.
            ----- edestruct STEP0 as ( h1'' & hj'' & D'' & E'' & J'' & SAFE'' ). 
              ------ eauto.
              ------ eauto.
              ------ eauto.
              ------ eauto.
              ------ assert ( hj' = hj'' ). 
                ------- apply H with ( hunion h1' hf ) ( hunion h1'' hf ). 
                  -------- HDISJ.
                  -------- HDISJ.
                  -------- rewrite ! ( hunion_comm hf ) by HDISJ. rewrite <- ! hunion_assoc. rewrite ( hunion_comm h1' ), ( hunion_comm h1'' ) by HDISJ. congruence.
                  -------- auto.
                  -------- auto.
                ------- subst hj''. assert ( h1' = h1'' ). 
                  -------- apply hunion_invert_l with ( hunion hj' hf ). 
                    --------- congruence.
                    --------- HDISJ.
                    --------- HDISJ.
                  -------- subst h1''. exists h1', hj'. auto.
Qed.
Lemma triple_and : forall J P c Q P' Q', precise J -> J ⊢ ⦃ P ⦄ c ⦃ Q ⦄ -> J ⊢ ⦃ P' ⦄ c ⦃ Q' ⦄ -> J ⊢ ⦃ aand P P' ⦄ c ⦃ fun v => aand ( Q v ) ( Q' v ) ⦄ .
Proof.
   intros until Q'. intros PR TR1 TR2 n h ( Ph & P'h ). apply safe_and. 
    - auto.
    - auto.
    - auto.
Qed.
Lemma triple_swap : forall lck R, sem_invariant lck R ⊢ ⦃ emp ⦄ SWAP lck 0 ⦃ fun v => if Z.eqb v 0 then emp else R ⦄ .
Proof.
   intros lck R. apply triple_atomic. rewrite sepconj_emp. unfold sem_invariant at 1. apply triple_exists_pre. intros v. eapply triple_let with ( Q := fun v' => ( ( v' = v ) //\\ contains lck v ) ** ( if v =? 0 then emp else R ) ). 
    - apply triple_frame. apply triple_get.
    - intros v'. rewrite lift_pureconj. apply triple_simple_conj_pre. intros EQ. subst v'. apply triple_seq with ( Q := contains lck 0 ** ( if v =? 0 then emp else R ) ). 
      -- apply triple_frame. apply triple_consequence_pre with ( valid lck ). 
        --- apply triple_set.
        --- red. intros h H. exists v. auto.
      -- apply triple_pure. unfold sem_invariant. red. intros h H. rewrite sepconj_comm, lift_aexists. exists 0. rewrite Z.eqb_refl. rewrite <- ( sepconj_comm emp ), sepconj_emp. assumption.
Qed.
Lemma triple_acquire : forall lck R, sem_invariant lck R ⊢ ⦃ emp ⦄ ACQUIRE lck ⦃ fun _ => R ⦄ .
Proof.
   intros lck R. apply triple_consequence_post with ( Q' := fun v => ( v <> 0 ) //\\ ( if Z.eqb v 0 then emp else R ) ). 
    - apply triple_repeat. 
      -- apply triple_swap.
      -- rewrite Z.eqb_refl. red. auto.
    - intros v h [ H1 H2 ]. apply Z.eqb_neq in H1. rewrite H1 in H2. auto.
Qed.
Lemma triple_release : forall lck R, precise R -> sem_invariant lck R ⊢ ⦃ R ⦄ RELEASE lck ⦃ fun _ => emp ⦄ .
Proof.
   intros lck R H. apply triple_atomic. rewrite sepconj_comm. unfold sem_invariant at 1. rewrite lift_aexists. apply triple_exists_pre. intros v. rewrite sepconj_assoc. apply triple_consequence_post with ( Q' := fun _ => contains lck 1 ** ( if v =? 0 then emp else R ) ** R ). 
    - apply triple_frame. apply triple_consequence_pre with ( valid lck ). 
      -- apply triple_set.
      -- red. intros h H0. exists v. auto.
    - intros _. intros h P. assert ( ( contains lck 1 ** R ) h ). 
      -- eapply sepconj_imp_r with ( P := ( if v =? 0 then emp else R ) ** R ). 
        --- destruct ( v =? 0 ) as [  P | P ]. 
          ---- rewrite sepconj_emp. red. auto.
          ---- apply sepconj_self. auto.
        --- eauto.
      -- rewrite sepconj_emp. exists 1. simpl. auto.
Qed.
Lemma triple_critregion : forall lck R c P Q, precise R -> emp ⊢ ⦃ P ** R ⦄ c ⦃ fun v => Q v ** R ⦄ -> sem_invariant lck R ⊢ ⦃ P ⦄ CRITREGION lck c ⦃ Q ⦄ .
Proof.
   intros lck R c P Q H H0. apply triple_seq with ( Q := R ** P ). 
    - rewrite <- ( sepconj_emp P ) at 1. apply triple_frame. apply triple_acquire.
    - eapply triple_let. 
      -- rewrite sepconj_comm. rewrite <- sepconj_emp at 1. apply triple_frame_invariant. apply H0.
      -- intros v. simpl. apply triple_seq with ( Q := emp ** Q v ). 
        --- rewrite sepconj_comm. apply triple_frame. apply triple_release. auto.
        --- rewrite sepconj_emp. apply triple_pure. red. auto.
Qed.
Lemma triple_ccr : forall lck R b c B P Q, precise R -> emp ⊢ ⦃ P ** R ⦄ b ⦃ fun v => if v =? 0 then P ** R else B ⦄ -> emp ⊢ ⦃ B ⦄ c ⦃ fun _ => Q ** R ⦄ -> sem_invariant lck R ⊢ ⦃ P ⦄ CCR lck b c ⦃ fun _ => Q ⦄ .
Proof.
   intros lck R b c B P Q H H0 H1. set ( Qloop := fun v => if v =? 0 then P else Q ). apply triple_consequence_post with ( fun v => ( v <> 0 ) //\\ Qloop v ). 
    - apply triple_repeat. 
      -- apply triple_seq with ( Q := R ** P ). 
        --- rewrite <- ( sepconj_emp P ) at 1. apply triple_frame. apply triple_acquire.
        --- rewrite sepconj_comm at 1. eapply triple_let. 
          ---- rewrite <- sepconj_emp at 1. apply triple_frame_invariant. eexact H0.
          ---- intros v. apply triple_ifthenelse. 
            ----- eapply triple_seq. 
              ------ eapply triple_consequence_pre. 
                ------- rewrite <- sepconj_emp at 1. apply triple_frame_invariant. eexact H1.
                ------- intros h ( X & Y ). apply Z.eqb_neq in X. rewrite X in Y. auto.
              ------ apply triple_seq with ( Q := emp ** Q ). 
                ------- rewrite sepconj_comm at 1. apply triple_frame. apply triple_release. auto.
                ------- apply triple_pure. rewrite sepconj_emp. unfold Qloop. cbn. red. auto.
            ----- apply triple_consequence_pre with ( P ** R ). 
              ------ eapply triple_seq with ( Q := emp ** P ). 
                ------- rewrite sepconj_comm at 1. apply triple_frame. apply triple_release. auto.
                ------- apply triple_pure. rewrite sepconj_emp. unfold Qloop. cbn. red. auto.
              ------ intros h ( X & Y ). subst v. auto.
      -- unfold Qloop. intros v U. simpl in U. auto.
    - intros v h ( U & V ). red in V. apply Z.eqb_neq in U. rewrite U in V. auto.
Qed.
Remark precise_buffer_invariant : forall ( R : Z -> assertion ) buff, ( forall v, precise ( R v ) ) -> precise ( aexists ( fun v => contains buff v ** R v ) ) .
Proof.
   intros R buff H. apply aexists_precise. apply sepconj_param_precise. 
    - apply contains_param_precise.
    - auto.
Qed.
Lemma triple_consume : forall R buff free busy, buffer_invariant R buff free busy ⊢ ⦃ emp ⦄ CONSUME buff free busy ⦃ fun v => R v ⦄ .
Proof.
   intros R buff free busy. eapply triple_seq. 
    - unfold buffer_invariant. rewrite sepconj_comm. apply triple_frame_invariant. apply triple_acquire.
    - apply triple_exists_pre. intros v. eapply triple_let. 
      -- apply triple_frame. apply triple_get.
      -- intros v'. cbn. rewrite lift_pureconj. apply triple_simple_conj_pre. intros EQ. subst v'. apply triple_seq with ( emp ** R v ). 
        --- unfold buffer_invariant. apply triple_frame_invariant. apply triple_frame. eapply triple_consequence_pre. 
          ---- apply triple_release. apply valid_precise.
          ---- red. intros h H. exists v. auto.
        --- apply triple_pure. rewrite sepconj_emp. red. auto.
Qed.
Lemma triple_produce : forall ( R : Z -> assertion ) buff free busy data, ( forall v, precise ( R v ) ) -> buffer_invariant R buff free busy ⊢ ⦃ R data ⦄ PRODUCE buff free busy data ⦃ fun _ => emp ⦄ .
Proof.
   intros R buff free busy data H. apply triple_seq with ( valid buff ** R data ). 
    - unfold buffer_invariant. apply triple_frame_invariant. rewrite <- ( sepconj_emp ( R data ) ) at 1. apply triple_frame. apply triple_acquire.
    - apply triple_seq with ( contains buff data ** R data ). 
      -- apply triple_frame. apply triple_set.
      -- unfold buffer_invariant. rewrite sepconj_comm. apply triple_frame_invariant. eapply triple_consequence_pre. 
        --- apply triple_release. apply precise_buffer_invariant. assumption.
        --- red. intros h H0. exists data. auto.
Qed.
Lemma triple_pop : forall R buff, buffer_invariant R buff ⊢ ⦃ emp ⦄ POP buff ⦃ fun p => aexists ( fun x => contains p x ** valid ( p + 1 ) ** R x ) ⦄ .
Proof.
   intros R buff. set ( Qloop := fun p => if p =? 0 then emp else aexists ( fun x => contains p x ** valid ( p + 1 ) ** R x ) ). apply triple_consequence_post with ( fun p => ( p <> 0 ) //\\ Qloop p ). 
    - apply triple_repeat. 
      -- apply triple_atomic. rewrite sepconj_emp. apply triple_exists_pre. intros l. apply triple_exists_pre. intros p. eapply triple_let. 
        --- apply triple_frame. apply triple_get.
        --- cbn. intros p'. rewrite lift_pureconj. apply triple_simple_conj_pre. intros E. subst p'. apply triple_ifthenelse. 
          ---- apply triple_simple_conj_pre. intros NOTZERO. rewrite sepconj_comm. destruct l as [apply Z.eqb_neq in NOTZERO; [rewrite NOTZERO; [rewrite ( sepconj_pick2 ( contains p x ) ); [rewrite <- ( sepconj_pick3 ( contains buff t ) ); [rewrite <- ( sepconj_pick2 ( contains buff t ) ); [intros h A; [rewrite lift_aexists; [exists x; [rewrite ! sepconj_assoc; [eapply sepconj_imp_r with ( P := contains ( p + 1 ) t ** R x ** contains buff t ** list_invariant R l t ); [intros h' B; [apply sepconj_imp_l with ( P := contains ( p + 1 ) t ); [intros h'' C; [exists t; [auto | .. ] | .. ] | revert h' B; [apply sepconj_imp_r; [apply sepconj_imp_r; [intros h''' D; [red; [exists l; [exists t; [auto | .. ] | .. ] | .. ] | .. ] | .. ] | .. ] | .. ] | .. ] | .. ] | eauto | .. ] | .. ] | .. ] | .. ] | .. ] | .. ] | .. ] | .. ] | .. ] | .. ] | x l ]. 
            ----- cbn. rewrite lift_pureconj. apply triple_simple_conj_pre. intro H. try lia.
            ----- cbn. rewrite lift_pureconj. apply triple_simple_conj_pre. intro H. rewrite lift_aexists. apply triple_exists_pre. intros t. eapply triple_let. 
              ------ rewrite ! sepconj_assoc, sepconj_pick2. apply triple_frame. apply triple_get.
              ------ intros t'. cbn. rewrite lift_pureconj. apply triple_simple_conj_pre. intros E. subst t'. rewrite <- ! sepconj_assoc, sepconj_comm, ! sepconj_assoc. eapply triple_seq. 
                ------- apply triple_frame with ( Q := fun _ => contains buff t ). eapply triple_consequence_pre. 
                  -------- apply triple_set.
                  -------- intros h A. exists p. auto.
                ------- apply triple_pure. unfold Qloop.
          ---- apply triple_simple_conj_pre. intros ZERO. apply triple_pure. unfold Qloop. cbn. rewrite sepconj_emp. intros h A. exists l, p. auto.
      -- unfold Qloop. cbn. red. auto.
    - unfold Qloop. intros v h [ A B ]. apply Z.eqb_neq in A. rewrite A in B. auto.
Qed.
Lemma triple_consume2 : forall R buff, buffer_invariant R buff ⊢ ⦃ emp ⦄ CONSUME buff ⦃ fun data => R data ⦄ .
Proof.
   intros R buff. eapply triple_let. 
    - apply triple_pop.
    - intros b. cbn. apply triple_exists_pre. intros p. eapply triple_let. 
      -- apply triple_frame. apply triple_get.
      -- intros p'. cbn. rewrite lift_pureconj. apply triple_simple_conj_pre. intros E. subst p'. eapply triple_seq. 
        --- apply triple_frame with ( Q := fun _ => emp ). eapply triple_consequence_pre. 
          ---- apply triple_free.
          ---- intros h A. exists p. auto.
        --- rewrite sepconj_emp. eapply triple_seq. 
          ---- apply triple_frame with ( Q := fun _ => emp ). apply triple_free.
          ---- apply triple_pure. rewrite sepconj_emp. red. auto.
Qed.