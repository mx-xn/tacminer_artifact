Lemma immsafe_frame : forall h' c h, immsafe ( c, h ) -> hdisjoint h h' -> immsafe ( c, hunion h h' ) .
Proof.
   intros h' c h IMM. dependent induction IMM. 
    - intros DISJ. constructor.
    - intros DISJ. constructor. auto.
    - intros DISJ. constructor.
    - intros DISJ. destruct ( isfinite ( hunion h h' ) ) as [ l' FIN ]. apply immsafe_alloc with ( Z.max 1 l' ). 
      -- lia.
      -- intros i H1. apply FIN. lia.
    - intros DISJ. constructor. cbn. destruct ( h l ) as [ z| ]. 
      -- congruence.
      -- congruence.
    - intros DISJ. constructor. cbn. destruct ( h l ) as [ z| ]. 
      -- congruence.
      -- congruence.
    - intros DISJ. constructor. cbn. destruct ( h l ) as [ z| ]. 
      -- congruence.
      -- congruence.
    - intros DISJ. constructor.
Qed.
Lemma red_frame : forall h2 c h1 c' h', red ( c, hunion h1 h2 ) ( c', h' ) -> immsafe ( c, h1 ) -> hdisjoint h1 h2 -> exists h1', red ( c, h1 ) ( c', h1' ) /\ hdisjoint h1' h2 /\ h' = hunion h1' h2 .
Proof.
   intros until h'. intros RED. dependent induction RED. 
    - intros IMM DISJ. inv IMMexists h1. intuition auto. constructor. auto.
    - intros IMM DISJ. inv IMM. exists h1. intuition auto. constructor.
    - intros IMM DISJ. inv IMM. edestruct IHRED as ( h1' & R & D & U ). 
      -- eauto.
      -- eauto.
      -- eauto.
      -- eauto.
      -- exists h1'. intuition auto. constructor. auto.
    - intros IMM DISJ. inv IMMexists h1. intuition auto. constructor.
    - intros IMM DISJ. inv IMM. exists ( hinit l sz h1 ). intuition auto. 
      -- constructor. 
        --- intros i H1. apply H in H1. cbn in H1. destruct ( h1 i ) as [ z| ]. 
          ---- congruence.
          ---- congruence.
        --- auto.
      -- red. intros i. assert ( EITHER : l <= i < l + Z.of_nat sz \/ ( i < l \/ l + Z.of_nat sz <= i ) ) by lia. destruct EITHER as [  H1 | H1 ]. 
        --- right. cbn in H. destruct ( h1 l ) as [ z| ]. 
          ---- congruence.
          ---- congruence.
        --- rewrite hinit_outside by auto. apply DISJ.
      -- custom1 heap_extensionality i. cbn. assert ( EITHER : l <= i < l + Z.of_nat sz \/ ( i < l \/ l + Z.of_nat sz <= i ) ) by lia. destruct EITHER as [  H1 | H1 ]. 
        --- rewrite ! hinit_inside by auto. auto.
        --- rewrite ! hinit_outside by auto. auto.
    - apply H in H1. 
      -- cbn in H1. destruct ( h1 i ) as [ z| ], ( h2 i ) as [ z'| ]. 
        --- congruence.
        --- congruence.
        --- congruence.
        --- congruence.
      -- ...
      -- intros IMM DISJ. 
    - intros IMM DISJ. inv IMM. exists ( hupdate l v h1 ). intuition auto. 
      -- constructor. auto.
      -- intros i. cbn. generalize ( DISJ i ). destruct ( Z.eq_dec l i ) as [  e | n ]. 
        --- intuition congruence.
        --- intuition congruence.
      -- custom1 heap_extensionality i. cbn. destruct ( Z.eq_dec l i ) as [  e | n ]. 
        --- auto.
        --- auto.
    - intros IMM DISJ. inv IMM. exists ( hfree l h1 ). intuition auto. 
      -- constructor. auto.
      -- intros i. cbn. generalize ( DISJ i ). destruct ( Z.eq_dec l i ) as [  e | n ]. 
        --- intuition congruence.
        --- intuition congruence.
      -- custom1 heap_extensionality i. cbn. destruct ( Z.eq_dec l i ) as [  e | n ]. 
        --- subst i. generalize ( DISJ l ). intuition.
        --- auto.
Qed.
Lemma safe_frame : forall ( R : assertion ) h', R h' -> forall c h Q, safe c h Q -> hdisjoint h h' -> safe c ( hunion h h' ) ( fun v => Q v ** R ) .
Proof.
   induction 2. 
    - intros DISJ. constructor. exists h, h'. auto.
    - intros DISJ. constructor. 
      -- auto.
      -- custom2 immsafe_frame. auto.
      -- intros c' h'0 H4. edestruct red_frame as ( h1' & RED1 & D & U ). 
        --- eauto.
        --- eauto.
        --- eauto.
        --- subst h'0. custom2 H3. auto.
Qed.
Lemma triple_frame : forall P c Q R, ⦃ P ⦄ c ⦃ Q ⦄ -> ⦃ P ** R ⦄ c ⦃ fun v => Q v ** R ⦄ .
Proof.
   intros P c Q R TR h ( h1 & h2 & P1 & R2 & D & U ). subst h. custom2 safe_frame. 
    - auto.
    - auto.
Qed.
Lemma triple_get : forall l v, ⦃ contains l v ⦄ GET l ⦃ fun v' => ( v' = v ) //\\ contains l v ⦄ .
Proof.
   intros l v h P. assert ( L : h l = Some v ). 
    - red in P. subst h. apply hupdate_same.
    - custom0 c' h' RED. 
      -- congruence.
      -- constructor. split. 
        --- congruence.
        --- auto.
Qed.
Lemma triple_set : forall l v, ⦃ valid l ⦄ SET l v ⦃ fun _ => contains l v ⦄ .
Proof.
   intros l v h ( v0 & P ). assert ( L : h l = Some v0 ). 
    - red in P. subst h. apply hupdate_same.
    - custom0 c' h' RED. 
      -- congruence.
      -- constructor. red in P. subst h. red. custom1 heap_extensionality l'. cbn. destruct ( Z.eq_dec l l' ) as [  e | n ]. 
        --- auto.
        --- auto.
Qed.
Remark valid_N_init : forall sz l, ( valid_N l sz ) ( hinit l sz hempty ) .
Proof.
   intro sz. induction sz as [ | sz ]. 
    - intros l. cbn. red. auto.
    - intros l. cbn. exists ( hupdate l 0 hempty ), ( hinit ( l + 1 ) sz hempty ). intuition auto. 
      -- exists 0. red. auto.
      -- intros x. unfold hupdate, hempty. cbn. destruct ( Z.eq_dec l x ) as [  e | n ]. 
        --- right. rewrite hinit_outside by lia. auto.
        --- auto.
      -- custom1 heap_extensionality x. cbn. destruct ( Z.eq_dec l x ) as [  e | n ]. 
        --- auto.
        --- auto.
Qed.
Lemma triple_alloc : forall sz, ⦃ emp ⦄ ALLOC sz ⦃ fun l => ( l <> 0 ) //\\ valid_N l sz ⦄ .
Proof.
   intros sz h P. red in P. subst h. constructor. 
    - auto.
    - apply immsafe_alloc with 1. 
      -- lia.
      -- intros i H. auto.
    - intros c' h' RED. inv RED. constructor. split. 
      -- auto.
      -- apply valid_N_init.
Qed.
Lemma triple_free : forall l, ⦃ valid l ⦄ FREE l ⦃ fun _ => emp ⦄ .
Proof.
   intros l h ( v0 & P ). red in P. assert ( L : h l = Some v0 ). 
    - subst h. apply hupdate_same.
    - custom0 c' h' RED. 
      -- congruence.
      -- constructor. red. custom1 heap_extensionality x. cbn. destruct ( Z.eq_dec l x ) as [  e | n ]. 
        --- auto.
        --- auto.
Qed.
Lemma safe_pure : forall v h Q, safe ( PURE v ) h Q -> Q v h .
Proof.
   intros v h Q H. inv H. 
    - auto.
    - contradiction.
Qed.
Lemma safe_red : forall c h Q c' h', safe c h Q -> red ( c, h ) ( c', h' ) -> safe c' h' Q .
Proof.
   intros c h Q c' h' H H0. inv H. 
    - inv H0.
    - eauto.
Qed.
Lemma safe_immsafe : forall c h Q, safe c h Q -> immsafe ( c, h ) .
Proof.
   intros c h Q H. inv H. 
    - constructor.
    - auto.
Qed.
Lemma safe_let : forall ( Q R : postcond ) f, ( forall v h', Q v h' -> safe ( f v ) h' R ) -> forall c h, safe c h Q -> safe ( LET c f ) h R .
Proof.
   intros Q R f POST. induction 1. 
    - custom0 c' h' RED. 
      -- constructor.
      -- custom2 POST.
      -- inv H1.
    - custom0 c' h' RED. 
      -- auto.
      -- contradiction.
      -- eauto.
Qed.
Lemma safe_consequence : forall ( Q Q' : postcond ), ( forall v, Q v -->> Q' v ) -> forall c h, safe c h Q -> safe c h Q' .
Proof.
   intros Q Q' IMP. induction 1. 
    - apply safe_done. apply IMP. assumption.
    - custom2 safe_step. 
      -- auto.
      -- auto.
Qed.
Lemma triple_pure : forall P v ( Q : postcond ), P -->> Q v -> ⦃ P ⦄ PURE v ⦃ Q ⦄ .
Proof.
   intros P v Q H. intros h Ph. constructor. custom2 H.
Qed.
Lemma triple_let : forall c f ( P : precond ) ( Q R : postcond ), ⦃ P ⦄ c ⦃ Q ⦄ -> ( forall v, ⦃ Q v ⦄ f v ⦃ R ⦄ ) -> ⦃ P ⦄ LET c f ⦃ R ⦄ .
Proof.
   intros until R. intros HR1 HR2 h Ph. apply safe_let with Q. 
    - apply HR2.
    - custom2 HR1.
Qed.
Lemma triple_ifthenelse : forall b c1 c2 P Q, ⦃ ( b <> 0 ) //\\ P ⦄ c1 ⦃ Q ⦄ -> ⦃ ( b = 0 ) //\\ P ⦄ c2 ⦃ Q ⦄ -> ⦃ P ⦄ IFTHENELSE b c1 c2 ⦃ Q ⦄ .
Proof.
   intros until Q. intros HR1 HR2 h Ph. custom0 c' h' RED. destruct ( Z.eqb_spec b 0 ) as [  e | n ]. 
    - apply HR2. split. 
      -- auto.
      -- auto.
    - apply HR1. split. 
      -- auto.
      -- auto.
Qed.
Lemma triple_consequence : forall P P' c Q' Q, ⦃ P' ⦄ c ⦃ Q' ⦄ -> P -->> P' -> ( forall v, Q' v -->> Q v ) -> ⦃ P ⦄ c ⦃ Q ⦄ .
Proof.
   intros P P' c Q' Q H H0 H1. red. intros h H2. apply safe_consequence with Q'. 
    - auto.
    - auto.
Qed.
Lemma triple_pick : forall n, ⦃ emp ⦄ PICK n ⦃ fun i => pure ( 0 <= i < n ) ⦄ .
Proof.
   intros n h Ph. custom0 c' h' RED. constructor. split. 
    - auto.
    - auto.
Qed.
Lemma triple_consequence_pre : forall P P' c Q, ⦃ P' ⦄ c ⦃ Q ⦄ -> P -->> P' -> ⦃ P ⦄ c ⦃ Q ⦄ .
Proof.
   intros P P' c Q H H0. apply triple_consequence with P' Q. 
    - auto.
    - auto.
    - intros v. red. auto.
Qed.
Lemma triple_consequence_post : forall P c Q Q', ⦃ P ⦄ c ⦃ Q' ⦄ -> ( forall v, Q' v -->> Q v ) -> ⦃ P ⦄ c ⦃ Q ⦄ .
Proof.
   intros P c Q Q' H H0. apply triple_consequence with P Q'. 
    - auto.
    - red. auto.
    - auto.
Qed.
Lemma triple_lift_pure : forall ( P : Prop ) P' c Q, ( P -> ⦃ P' ⦄ c ⦃ Q ⦄ ) -> ⦃ P //\\ P' ⦄ c ⦃ Q ⦄ .
Proof.
   intros P P' c Q H. intros h [ P1 P2 ]. custom2 H. auto.
Qed.
Lemma triple_lift_exists : forall ( X : Type ) ( P : X -> assertion ) c Q, ( forall x, ⦃ P x ⦄ c ⦃ Q ⦄ ) -> ⦃ aexists P ⦄ c ⦃ Q ⦄ .
Proof.
   intros X P c Q H. intros h ( x & Px ). apply ( H x ). auto.
Qed.
Lemma triple_ifthen : forall b c1 c2 P Q, b <> 0 -> ⦃ P ⦄ c1 ⦃ Q ⦄ -> ⦃ P ⦄ IFTHENELSE b c1 c2 ⦃ Q ⦄ .
Proof.
   intros b c1 c2 P Q H H0. apply triple_ifthenelse. 
    - custom1 triple_lift_pure H1. auto.
    - custom1 triple_lift_pure H1. lia.
Qed.
Lemma triple_ifelse : forall b c1 c2 P Q, b = 0 -> ⦃ P ⦄ c2 ⦃ Q ⦄ -> ⦃ P ⦄ IFTHENELSE b c1 c2 ⦃ Q ⦄ .
Proof.
   intros b c1 c2 P Q H H0. apply triple_ifthenelse. 
    - custom1 triple_lift_pure H1. lia.
    - custom1 triple_lift_pure H1. auto.
Qed.
Lemma unroll_com : forall c, c = match c with | PURE x => PURE x | LET c f => LET c f | IFTHENELSE b c1 c2 => IFTHENELSE b c1 c2 | ALLOC sz => ALLOC sz | GET l => GET l | SET l v => SET l v | FREE l => FREE l | PICK n => PICK n end .
Proof.
   destruct c as [  x | f c | c2 c1 b | sz | l | v l | l | n ]. 
    - auto.
    - auto.
    - auto.
    - auto.
    - auto.
    - auto.
    - auto.
    - auto.
Qed.
Lemma list_cons_correct : forall a n l, ⦃ list_at a l ⦄ list_cons n a ⦃ fun a' => list_at a' ( n :: l ) ⦄ .
Proof.
   intros a n l. eapply triple_let. 
    - rewrite <- sepconj_emp at 1. apply triple_frame. apply triple_alloc.
    - intros b. simpl. rewrite lift_pureconj, ! sepconj_assoc, sepconj_emp. custom1 triple_lift_pure H1. eapply triple_let. 
      -- apply triple_frame. apply triple_set.
      -- simpl. intros _. eapply triple_let. 
        --- rewrite sepconj_pick2. apply triple_frame. apply triple_set.
        --- simpl. intros _. rewrite sepconj_pick2. apply triple_pure. intros h A. split. 
          ---- auto.
          ---- exists a. auto.
Qed.
Lemma list_length_rec_correct : forall l a len, ⦃ list_at a l ⦄ list_length_rec a len ⦃ fun len' => ( len' = len + Z.of_nat ( List.length l ) ) //\\ list_at a l ⦄ .
Proof.
   intro l. induction l as [ | h t ]. 
    - intros a len. rewrite ( unroll_com ( list_length_rec a len ) ). cbn. apply triple_lift_pure. intro H1. custom2 triple_ifelse. apply triple_pure. intros h H2. split. 
      -- lia.
      -- split. 
        --- auto.
        --- auto.
    - intros a len. rewrite ( unroll_com ( list_length_rec a len ) ). cbn. apply triple_lift_pure. intro H1. custom1 triple_lift_exists a'. custom2 triple_ifthen. eapply triple_let. 
      -- rewrite sepconj_pick2. apply triple_frame. apply triple_get.
      -- simpl. intros a''. rewrite lift_pureconj. custom1 triple_lift_pure H3. subst a''. rewrite sepconj_swap3. eapply triple_consequence_post. 
        --- apply triple_frame. apply IHt.
        --- intros len'. simpl. rewrite lift_pureconj. rewrite <- sepconj_swap3, sepconj_pick2. intros h1 ( A & B ). split. 
          ---- lia.
          ---- split. 
            ----- auto.
            ----- exists a'. auto.
Qed.
Corollary list_length_correct : forall l a, ⦃ list_at a l ⦄ list_length a ⦃ fun len => ( len = Z.of_nat ( length l ) ) //\\ list_at a l ⦄ .
Proof.
   intros l a. apply list_length_rec_correct.
Qed.
Lemma list_concat_rec_correct : forall l2 a2 l1 a1, a1 <> 0 -> ⦃ list_at a1 l1 ** list_at a2 l2 ⦄ list_concat_rec a1 a2 ⦃ fun _ => list_at a1 ( l1 ++ l2 ) ⦄ .
Proof.
   intros l2 a2 l1. induction l1 as [ | h1 t1 ]. 
    - intros a1 H. rewrite ( unroll_com ( list_concat_rec a1 a2 ) ). simpl. rewrite lift_pureconj. custom1 triple_lift_pure H0. lia.
    - intros a1 H. rewrite ( unroll_com ( list_concat_rec a1 a2 ) ). simpl. rewrite lift_pureconj. custom1 triple_lift_pure H1. rewrite lift_aexists. custom1 triple_lift_exists a'. rewrite sepconj_assoc. eapply triple_let. 
      -- rewrite sepconj_assoc, sepconj_pick2. apply triple_frame. apply triple_get.
      -- intros t. simpl. rewrite lift_pureconj. custom1 triple_lift_pure H2. subst t. apply triple_ifthenelse. 
        --- custom1 triple_lift_pure H2. rewrite <- sepconj_assoc, sepconj_comm. eapply triple_consequence_post. 
          ---- apply triple_frame. custom2 IHt1.
          ---- simpl. intros _. rewrite sepconj_pick2, sepconj_swap3. intros h P. split. 
            ----- auto.
            ----- exists a'. auto.
        --- custom1 triple_lift_pure H2. eapply triple_consequence_post. 
          ---- apply triple_frame. eapply triple_consequence_pre. 
            ----- apply triple_set.
            ----- intros h P. exists a'. auto.
          ---- simpl. intros _. rewrite sepconj_pick2, sepconj_pick3. destruct t1 as [  IHt1 | IHt1 z ]. 
            ----- simpl. rewrite lift_pureconj, sepconj_emp. intros h ( A & B ). split. 
              ------ auto.
              ------ exists a2. auto.
            ----- simpl. rewrite lift_pureconj. intros h ( A & B ). lia.
Qed.
Lemma list_concat_correct : forall l1 a1 l2 a2, ⦃ list_at a1 l1 ** list_at a2 l2 ⦄ list_concat a1 a2 ⦃ fun a => list_at a ( l1 ++ l2 ) ⦄ .
Proof.
   intros l1 a1 l2 a2. unfold list_concat. apply triple_ifthenelse. 
    - custom1 triple_lift_pure H1. eapply triple_let. 
      -- custom2 list_concat_rec_correct.
      -- simpl. intros _. apply triple_pure. red. auto.
    - custom1 triple_lift_pure H1. destruct l1 as [  | z ]. 
      -- simpl. apply triple_pure. rewrite lift_pureconj, sepconj_emp. intros h ( A & B ). auto.
      -- simpl. rewrite lift_pureconj. custom1 triple_lift_pure H. lia.
Qed.
Lemma list_rev_rec_correct : forall l a l' p, ⦃ list_at a l ** list_at p l' ⦄ list_rev_rec a p ⦃ fun x => list_at x ( List.rev_append l l' ) ⦄ .
Proof.
   intro l. induction l as [ | hd l ]. 
    - intros a l' p. rewrite ( unroll_com ( list_rev_rec a p ) ). simpl. rewrite lift_pureconj, sepconj_emp. custom1 triple_lift_pure H1. custom2 triple_ifelse. apply triple_pure. red. auto.
    - intros a l' p. rewrite ( unroll_com ( list_rev_rec a p ) ). simpl. rewrite lift_pureconj. custom1 triple_lift_pure H1. rewrite lift_aexists. custom1 triple_lift_exists a'. custom2 triple_ifthen. eapply triple_let. 
      -- rewrite ! sepconj_assoc, sepconj_pick2. apply triple_frame. apply triple_get.
      -- intros a''. simpl. rewrite lift_pureconj. custom1 triple_lift_pure H3. subst a''. eapply triple_let. 
        --- apply triple_frame. eapply triple_consequence_pre. 
          ---- apply triple_set.
          ---- intros h P. exists a'. auto.
        --- simpl. intros _. rewrite sepconj_pick2, sepconj_pick3. eapply triple_consequence_pre. 
          ---- apply IHl.
          ---- simpl. apply sepconj_imp_r. intros h A. split. 
            ----- auto.
            ----- exists p. auto.
Qed.
Lemma list_rev_correct : forall a l, ⦃ list_at a l ⦄ list_rev a ⦃ fun x => list_at x ( List.rev l ) ⦄ .
Proof.
   intros a l. rewrite List.rev_alt. eapply triple_consequence_pre. 
    - apply list_rev_rec_correct.
    - simpl. rewrite sepconj_comm, lift_pureconj, sepconj_emp. intros h A. split. 
      -- auto.
      -- auto.
Qed.
Lemma triple_frame2 : forall P c Q R, ⦃ P ⦄ c ⦃ Q ⦄ -> ⦃ P ** R ⦄ c ⦃ fun v => Q v ** R ⦄ .
Proof.
   intros P c Q R TR R'. rewrite sepconj_assoc. replace ( fun v => ( Q v ** R ) ** R' ) with ( fun v => Q v ** ( R ** R' ) ). 
    - apply TR.
    - custom1 functional_extensionality x. rewrite sepconj_assoc. auto.
Qed.
Lemma triple_get2 : forall l v, ⦃ contains l v ⦄ GET l ⦃ fun v' => ( v' = v ) //\\ contains l v ⦄ .
Proof.
   intros l v R h ( h1 & h2 & H1 & H2 & D & U ). assert ( L1 : h1 l = Some v ). 
    - red in H1. subst h1. apply hupdate_same.
    - assert ( L : h l = Some v ). 
      -- rewrite U. simpl. rewrite L1. auto.
      -- custom0 c' h' RED. 
        --- congruence.
        --- constructor. exists h1, h2. unfold pureconj. intuition congruence.
Qed.
Lemma triple_set2 : forall l v, ⦃ valid l ⦄ SET l v ⦃ fun _ => contains l v ⦄ .
Proof.
   intros l v R h ( h1 & h2 & H1 & H2 & D & U ). destruct H1 as ( v0 & H1 ). red in H1. assert ( L1 : h1 l = Some v0 ). 
    - subst h1. apply hupdate_same.
    - assert ( L : h l = Some v0 ). 
      -- rewrite U. cbn. rewrite L1. auto.
      -- custom0 c' h' RED. 
        --- congruence.
        --- constructor. exists ( hupdate l v hempty ), h2. split. 
          ---- red. auto.
          ---- split. 
            ----- auto.
            ----- split. 
              ------ intro l'. specialize ( D l' ). cbn in *. destruct D as [  H | H ]. 
                ------- destruct ( Z.eq_dec l l' ) as [  H e | H n ]. 
                  -------- congruence.
                  -------- auto.
                ------- auto.
              ------ custom1 heap_extensionality l'. cbn. destruct ( Z.eq_dec l l' ) as [  e | n ]. 
                ------- auto.
                ------- auto.
Qed.
Remark valid_N_init2 : forall ( R : assertion ) sz l h, R h -> ( forall i, l <= i < l + Z.of_nat sz -> h i = None ) -> ( valid_N l sz ** R ) ( hinit l sz h ) .
Proof.
   intros R sz. induction sz as [ | sz ]. 
    - intros l h Rh EMPTY. cbn. rewrite sepconj_emp. auto.
    - intros l h Rh EMPTY. cbn. rewrite sepconj_assoc. exists ( hupdate l 0 hempty ), ( hinit ( l + 1 ) sz h ). split. 
      -- exists 0. red. auto.
      -- split. 
        --- custom2 IHsz. intros i H. apply EMPTY. lia.
        --- split. 
          ---- intros x. unfold hupdate, hempty. cbn. destruct ( Z.eq_dec l x ) as [  e | n ]. 
            ----- right. rewrite hinit_outside by lia. apply EMPTY. lia.
            ----- auto.
          ---- custom1 heap_extensionality x. cbn. destruct ( Z.eq_dec l x ) as [  e | n ]. 
            ----- auto.
            ----- auto.
Qed.
Lemma triple_free2 : forall l, ⦃ valid l ⦄ FREE l ⦃ fun _ => emp ⦄ .
Proof.
   intros l R h ( h1 & h2 & H1 & H2 & D & U ). destruct H1 as ( v0 & H1 ). assert ( L1 : h1 l = Some v0 ). 
    - rewrite H1. apply hupdate_same.
    - assert ( L : h l = Some v0 ). 
      -- rewrite U. cbn. rewrite L1. auto.
      -- custom0 c' h' RED. 
        --- congruence.
        --- constructor. rewrite sepconj_emp. replace ( hfree l ( hunion h1 h2 ) ) with h2. 
          ---- auto.
          ---- custom1 heap_extensionality x. generalize ( D x ). rewrite H1. cbn. destruct ( Z.eq_dec l x ) as [  e | n ]. 
            ----- intuition congruence.
            ----- auto.
Qed.
Lemma Hoare_pure2 : forall P v ( Q : postcond ), P -->> Q v -> Hoare P ( PURE v ) Q .
Proof.
   intros P v Q H. intros h Ph. constructor. custom2 H.
Qed.
Lemma triple_pure2 : forall P v ( Q : postcond ), P -->> Q v -> ⦃ P ⦄ PURE v ⦃ Q ⦄ .
Proof.
   intros P v Q H. intros R. apply Hoare_pure2. custom2 sepconj_imp_l.
Qed.
Lemma Hoare_let2 : forall c f ( P : precond ) ( Q R : postcond ), Hoare P c Q -> ( forall v, Hoare ( Q v ) ( f v ) R ) -> Hoare P ( LET c f ) R .
Proof.
   intros until R. intros HR1 HR2 h Ph. apply safe_let with Q. 
    - apply HR2.
    - custom2 HR1.
Qed.
Lemma triple_let2 : forall c f ( P : precond ) ( Q R : postcond ), ⦃ P ⦄ c ⦃ Q ⦄ -> ( forall v, ⦃ Q v ⦄ f v ⦃ R ⦄ ) -> ⦃ P ⦄ LET c f ⦃ R ⦄ .
Proof.
   intros c f P Q R TR1 TR2 R'. apply Hoare_let2 with ( fun v => Q v ** R' ). 
    - apply TR1.
    - intros v. apply TR2.
Qed.
Lemma Hoare_ifthenelse2 : forall b c1 c2 P Q, Hoare ( ( b <> 0 ) //\\ P ) c1 Q -> Hoare ( ( b = 0 ) //\\ P ) c2 Q -> Hoare P ( IFTHENELSE b c1 c2 ) Q .
Proof.
   intros until Q. intros HR1 HR2 h Ph. custom0 c' h' RED. destruct ( Z.eqb_spec b 0 ) as [  e | n ]. 
    - apply HR2. split. 
      -- auto.
      -- auto.
    - apply HR1. split. 
      -- auto.
      -- auto.
Qed.
Lemma triple_ifthenelse2 : forall b c1 c2 P Q, ⦃ ( b <> 0 ) //\\ P ⦄ c1 ⦃ Q ⦄ -> ⦃ ( b = 0 ) //\\ P ⦄ c2 ⦃ Q ⦄ -> ⦃ P ⦄ IFTHENELSE b c1 c2 ⦃ Q ⦄ .
Proof.
   intros b c1 c2 P Q TR1 TR2 R. apply Hoare_ifthenelse2. 
    - rewrite <- lift_pureconj. auto.
    - rewrite <- lift_pureconj. auto.
Qed.
Lemma Hoare_consequence2 : forall P P' c Q' Q, Hoare P' c Q' -> P -->> P' -> ( forall v, Q' v -->> Q v ) -> Hoare P c Q .
Proof.
   intros P P' c Q' Q H H0 H1. red. intros h H2. apply safe_consequence with Q'. 
    - auto.
    - auto.
Qed.
Lemma triple_consequence2 : forall P P' c Q' Q, ⦃ P' ⦄ c ⦃ Q' ⦄ -> P -->> P' -> ( forall v, Q' v -->> Q v ) -> ⦃ P ⦄ c ⦃ Q ⦄ .
Proof.
   intros P P' c Q' Q H H0 H1. red. intros R. apply Hoare_consequence2 with ( P' ** R ) ( fun v => Q' v ** R ). 
    - apply H.
    - custom2 sepconj_imp_l.
    - intros v. custom2 sepconj_imp_l.
Qed.
Lemma Hoare_pick2 : forall P n, Hoare P ( PICK n ) ( fun i => ( 0 <= i < n ) //\\ P ) .
Proof.
   intros P n h Ph. custom0 c' h' RED. constructor. split. 
    - auto.
    - auto.
Qed.
Lemma triple_frame_consequence : forall R P c Q P' Q', ⦃ P ⦄ c ⦃ Q ⦄ -> P' -->> P ** R -> ( forall v, Q v ** R -->> Q' v ) -> ⦃ P' ⦄ c ⦃ Q' ⦄ .
Proof.
   intros R P c Q P' Q' H H0 H1. apply triple_consequence with ( P ** R ) ( fun v => Q v ** R ). 
    - custom2 triple_frame.
    - auto.
    - auto.
Qed.
Lemma triple_ramification : forall P c Q P' Q', ⦃ P ⦄ c ⦃ Q ⦄ -> P' -->> P ** ( aforall ( fun v => Q v --* Q' v ) ) -> ⦃ P' ⦄ c ⦃ Q' ⦄ .
Proof.
   intros P c Q P' Q' H H0. eapply triple_frame_consequence with ( R := aforall ( fun v => Q v --* Q' v ) ). 
    - eassumption.
    - assumption.
    - intros v h ( h1 & h2 & Q1 & W2 & D & U ). apply ( wand_cancel ( Q v ) ). exists h1, h2. auto.
Qed.
Lemma wp_precond : forall c Q, ⦃ wp c Q ⦄ c ⦃ Q ⦄ .
Proof.
   intros c Q h ( P & T & C ). custom2 T.
Qed.
Lemma wp_weakest : forall P c Q, ⦃ P ⦄ c ⦃ Q ⦄ -> P -->> wp c Q .
Proof.
   intros P c Q T h Ph. exists P. split. 
    - auto.
    - auto.
Qed.
Corollary wp_equiv : forall P c Q, ⦃ P ⦄ c ⦃ Q ⦄ <-> ( P -->> wp c Q ) .
Proof.
   intros P c Q. split. 
    - intros H. custom2 wp_weakest.
    - intros H. apply triple_consequence_pre with ( wp c Q ). 
      -- auto using wp_precond.
      -- auto using wp_precond.
Qed.
Lemma wp'_precond : forall c Q, ⦃ wp' c Q ⦄ c ⦃ Q ⦄ .
Proof.
   intros c Q h SAFE. apply SAFE.
Qed.
Lemma wp'_weakest : forall P c Q, ⦃ P ⦄ c ⦃ Q ⦄ -> P -->> wp' c Q .
Proof.
   intros P c Q H. intros h Ph. custom2 H.
Qed.
Lemma wp_consequence : forall ( Q Q' : postcond ) c, ( forall v, Q v -->> Q' v ) -> wp c Q -->> wp c Q' .
Proof.
   intros Q Q' c H. apply wp_weakest. apply triple_consequence_post with Q. 
    - auto using wp_precond.
    - auto using wp_precond.
Qed.
Lemma wp_frame : forall R c Q, wp c Q ** R -->> wp c ( fun v => Q v ** R ) .
Proof.
   intros R c Q. apply wp_weakest. apply triple_frame. apply wp_precond.
Qed.
Corollary wp_frame_consequence : forall R Q c Q', ( forall v, Q v ** R -->> Q' v ) -> wp c Q ** R -->> wp c Q' .
Proof.
   intros R Q c Q' H. red. intros h H0. apply wp_consequence with ( fun v => Q v ** R ). 
    - assumption.
    - custom2 wp_frame.
Qed.
Corollary wp_ramification : forall c Q Q', wp c Q ** aforall ( fun v => Q v --* Q' v ) -->> wp c Q' .
Proof.
   intros c Q Q'. apply wp_frame_consequence. intros v h ( h1 & h2 & A & B & D & U ). apply ( wand_cancel ( Q v ) ). exists h1, h2. auto.
Qed.
Lemma wp_pure : forall ( Q : postcond ) v, Q v -->> wp ( PURE v ) Q .
Proof.
   intros Q v. apply wp_weakest. apply triple_pure. red. auto.
Qed.
Lemma wp_let : forall c f Q, wp c ( fun v => wp ( f v ) Q ) -->> wp ( LET c f ) Q .
Proof.
   intros c f Q. apply wp_weakest. eapply triple_let. 
    - apply wp_precond.
    - intros v. apply wp_precond.
Qed.
Lemma wp_ifthenelse : forall b c1 c2 Q, ( if b =? 0 then wp c2 Q else wp c1 Q ) -->> wp ( IFTHENELSE b c1 c2 ) Q .
Proof.
   intros b c1 c2 Q. apply wp_weakest. apply triple_ifthenelse. 
    - apply triple_consequence_pre with ( wp c1 Q ). 
      -- apply wp_precond.
      -- intros h ( A & B ). rewrite <- Z.eqb_neq in A. rewrite A in B. auto.
    - apply triple_consequence_pre with ( wp c2 Q ). 
      -- apply wp_precond.
      -- intros h ( A & B ). subst b. auto.
Qed.
Lemma wp_alloc : forall sz Q, aforall ( fun l => ( l <> 0 ) //\\ valid_N l sz --* Q l ) -->> wp ( ALLOC sz ) Q .
Proof.
   intros sz Q. red. intros h H. apply wp_ramification with ( Q := fun l => ( l <> 0 ) //\\ valid_N l sz ). apply sepconj_imp_l with emp. 
    - apply wp_weakest. apply triple_alloc.
    - rewrite sepconj_emp. assumption.
Qed.
Lemma wp_get : forall l v Q, contains l v ** ( contains l v --* Q v ) -->> wp ( GET l ) Q .
Proof.
   intros l v Q. assert ( W : contains l v -->> wp ( GET l ) ( fun v' => ( v' = v ) //\\ contains l v ) ). 
    - apply wp_weakest. apply triple_get.
    - red. intros h H. eapply wp_ramification. eapply sepconj_imp_l. 
      -- eexact W.
      -- eapply sepconj_imp_r. 
        --- intros h' H' v' h'' D ( A & B ). subst v'. custom2 H'. auto.
        --- eexact H.
Qed.
Lemma wp_set : forall l v Q, valid l ** aforall ( fun v' => ( contains l v --* Q v' ) ) -->> wp ( SET l v ) Q .
Proof.
   intros l v Q. assert ( W : valid l -->> wp ( SET l v ) ( fun _ => contains l v ) ). 
    - apply wp_weakest. apply triple_set.
    - red. intros h H. eapply wp_ramification. eapply sepconj_imp_l. 
      -- eexact W.
      -- eapply sepconj_imp_r. 
        --- red. auto.
        --- eexact H.
Qed.
Corollary wp_set' : forall l v Q, valid l ** ( contains l v --* Q ) -->> wp ( SET l v ) ( fun _ => Q ) .
Proof.
   intros l v Q. red. intros h H. apply wp_set. eapply sepconj_imp_r with ( P := contains l v --* Q ). 
    - intros h' H' v'. auto.
    - eauto.
Qed.
Lemma wp_free : forall l Q, valid l ** aforall ( fun v' => Q v' ) -->> wp ( FREE l ) Q .
Proof.
   intros l Q. assert ( W : valid l -->> wp ( FREE l ) ( fun _ => emp ) ). 
    - apply wp_weakest. apply triple_free.
    - red. intros h H. eapply wp_ramification. eapply sepconj_imp_l. 
      -- eexact W.
      -- eapply sepconj_imp_r with ( P := aforall ( fun v' : Z => Q v' ) ). 
        --- red. intros h0 H0. intros v h' D E. rewrite E in *. rewrite hunion_comm, hunion_empty by HDISJ. apply H0.
        --- eexact H.
Qed.
Corollary wp_free' : forall l Q, valid l ** Q -->> wp ( FREE l ) ( fun _ => Q ) .
Proof.
   intros l Q. red. intros h H. apply wp_free. eapply sepconj_imp_r with ( P := Q ). 
    - intros h' H' v'. auto.
    - eauto.
Qed.
Lemma wp_pick : forall n Q, aforall ( fun i => pure ( 0 <= i < n ) --* Q i ) -->> wp ( PICK n ) Q .
Proof.
   intros n Q. assert ( W : emp -->> wp ( PICK n ) ( fun i => pure ( 0 <= i < n ) ) ). 
    - apply wp_weakest. apply triple_pick.
    - red. intros h H. eapply wp_ramification. eapply sepconj_imp_l. 
      -- eexact W.
      -- eapply sepconj_imp_r with ( P := aforall ( fun i : Z => pure ( 0 <= i < n ) --* Q i ) ). 
        --- red. auto.
        --- rewrite sepconj_emp. eexact H.
Qed.

Ltac custom0 H0 H1 H2 :=  constructor; [auto | constructor | intros H0 H1 H2; [inv H2 | .. ] | .. ].
Ltac custom1 H0 H1 :=  apply H0; [intros H1 | .. ].
Ltac custom2 H0 :=  apply H0; [auto |  | .. ].