benchmarks/comp-cert/raw/RTLSpec.v
-----
benchmarks/comp-cert/raw/RTLSpec_compr.v
-----
-----
bind_inversion
Proof. intros until i. unfold bind. destruct (f s1); intros. discriminate. exists a; exists s'; exists s. destruct (g a s'); inv H. exists s0; auto. Qed.
bind2_inversion
Proof. unfold bind2; intros. exploit bind_inversion; eauto. intros [[x y] [s2 [i1 [i2 [P Q]]]]]. simpl in Q. exists x; exists y; exists s2; exists i1; exists i2; auto. Qed.
instr_at_incr
Proof. intros. inv H. destruct (H3 n); congruence. Qed.
valid_fresh_absurd
Proof. intros r s. unfold reg_valid, reg_fresh; case r; tauto. Qed.
valid_fresh_different
Proof. unfold not; intros. subst r2. eauto with rtlg. Qed.
reg_valid_incr
Proof. intros r s1 s2 INCR. inversion INCR. unfold reg_valid. intros; apply Plt_Ple_trans with (st_nextreg s1); auto. Qed.
reg_fresh_decr
Proof. intros r s1 s2 INCR. inversion INCR. unfold reg_fresh; unfold not; intros. apply H4. apply Plt_Ple_trans with (st_nextreg s1); auto. Qed.
regs_valid_nil
Proof. intros; red; intros. elim H. Qed.
regs_valid_cons
Proof. intros; red; intros. elim H1; intro. subst r1; auto. auto. Qed.
regs_valid_app
Proof. intros; red; intros. apply in_app_iff in H1. destruct H1; auto. Qed.
regs_valid_incr
Proof. unfold regs_valid; intros; eauto with rtlg. Qed.
map_valid_incr
Proof. unfold map_valid; intros; eauto with rtlg. Qed.
add_instr_at
Proof. intros. monadInv H. simpl. apply PTree.gss. Qed.
update_instr_at
Proof. intros. unfold update_instr in H. destruct (plt n (st_nextnode s1)); try discriminate. destruct (check_empty_node s1 n); try discriminate. inv H. simpl. apply PTree.gss. Qed.
new_reg_valid
Proof. intros. monadInv H. unfold reg_valid; simpl. apply Plt_succ. Qed.
new_reg_fresh
Proof. intros. monadInv H. unfold reg_fresh; simpl. exact (Plt_strict _). Qed.
new_reg_not_in_map
Proof. unfold not; intros; eauto with rtlg. Qed.
init_mapping_valid
Proof. unfold map_valid, init_mapping. intros s r [[id A] | B]. simpl in A. rewrite PTree.gempty in A; discriminate. simpl in B. tauto. Qed.
find_var_in_map
Proof. intros until r. unfold find_var; caseEq (map.(map_vars)!name). intros. inv H0. left; exists name; auto. intros. inv H0. Qed.
find_var_valid
Proof. intros. eauto with rtlg. Qed.
find_letvar_in_map
Proof. intros until r. unfold find_letvar. caseEq (nth_error (map_letvars map) idx); intros; monadInv H0. right; apply nth_error_in with idx; auto. Qed.
find_letvar_valid
Proof. intros. eauto with rtlg. Qed.
add_var_valid
Proof. intros. monadInv H. split. eauto with rtlg. inversion EQ. subst r s2. red. intros r' [[id A] | B]. simpl in A. rewrite PTree.gsspec in A. destruct (peq id name). inv A. eauto with rtlg. apply reg_valid_incr with s1. eauto with rtlg. apply H0. left; exists id; auto. simpl in B. apply reg_valid_incr with s1. eauto with rtlg. apply H0. right; auto. Qed.
add_var_find
Proof. intros. monadInv H. simpl. apply PTree.gss. Qed.
add_vars_valid
Proof. intro namel. induction namel; simpl; intros; monadInv H. split. red; simpl; intros; tauto. auto. exploit IHnamel; eauto. intros [A B]. exploit add_var_valid; eauto. intros [C D]. split. apply regs_valid_cons; eauto with rtlg. auto. Qed.
add_var_letenv
Proof. intros; monadInv H. reflexivity. Qed.
add_vars_letenv
Proof. intro il. induction il; simpl; intros; monadInv H. reflexivity. transitivity (map_letvars x0). eapply add_var_letenv; eauto. eauto. Qed.
add_letvar_valid
Proof. intros; red; intros. destruct H1 as [[id A]|B]. simpl in A. apply H. left; exists id; auto. simpl in B. elim B; intro. subst r0; auto. apply H. right; auto. Qed.
alloc_reg_valid
Proof. intros until r. unfold alloc_reg. case a; eauto with rtlg. Qed.
alloc_reg_fresh_or_in_map
Proof. intros until s'. unfold alloc_reg. destruct a; intros; try (right; eauto with rtlg; fail). left; eauto with rtlg. left; eauto with rtlg. Qed.
alloc_regs_valid
Proof. intro al. induction al; simpl; intros; monadInv H0. apply regs_valid_nil. apply regs_valid_cons. eauto with rtlg. eauto with rtlg. Qed.
alloc_regs_fresh_or_in_map
Proof. intros map al. induction al; simpl; intros; monadInv H0. elim H1. elim H1; intro. subst r. eapply alloc_reg_fresh_or_in_map; eauto. exploit IHal. 2: eauto. apply map_valid_incr with s; eauto with rtlg. eauto. intros [A|B]. auto. right; eauto with rtlg. Qed.
alloc_optreg_valid
Proof. intros until r. unfold alloc_reg. case dest; eauto with rtlg. Qed.
alloc_optreg_fresh_or_in_map
Proof. intros until s'. unfold alloc_optreg. destruct dest; intros. left; eauto with rtlg. right; eauto with rtlg. Qed.
target_reg_ok_append
Proof. induction 1; intros. constructor; auto. constructor; auto. constructor; auto. red; intros. elim (in_app_or _ _ _ H2); intro. generalize (H1 _ H3). tauto. tauto. Qed.
target_reg_ok_cons
Proof. intros. change (r' :: pr) with ((r' :: nil) ++ pr). apply target_reg_ok_append; auto. intros r'' [A|B]. subst r''; auto. contradiction. Qed.
new_reg_target_ok
Proof. intros. constructor. red; intro. apply valid_fresh_absurd with r s1. eauto with rtlg. eauto with rtlg. red; intro. apply valid_fresh_absurd with r s1. auto. eauto with rtlg. Qed.
alloc_reg_target_ok
Proof. intros. unfold alloc_reg in H1. destruct a; try (eapply new_reg_target_ok; eauto; fail). generalize H1; unfold find_var. caseEq (map_vars map)!i0; intros. inv H3. constructor. auto. inv H3. generalize H1; unfold find_letvar. caseEq (nth_error (map_letvars map) n); intros. inv H3. constructor. auto. inv H3. Qed.
alloc_regs_target_ok
Proof. intros map al. induction al; intros; monadInv H1. constructor. constructor. eapply alloc_reg_target_ok; eauto. apply IHal with s s2 INCR1; eauto with rtlg. apply regs_valid_cons; eauto with rtlg. Qed.
return_reg_ok_incr
Proof. induction 1; intros; econstructor; eauto with rtlg. Qed.
new_reg_return_ok
Proof. intros. unfold ret_reg. destruct (xtype_eq (sig_res sig) Xvoid); constructor; eauto with rtlg. Qed.
tr_move_incr
Proof. induction 2; econstructor; eauto with rtlg. Qed.
tr_expr_incr
Proof. intros s1 s2 EXT. pose (AT := fun pc i => instr_at_incr s1 s2 pc i EXT). induction 1; econstructor; eauto. eapply tr_move_incr; eauto. eapply tr_move_incr; eauto. intros s1 s2 EXT. pose (AT := fun pc i => instr_at_incr s1 s2 pc i EXT). induction 1; econstructor; eauto. intros s1 s2 EXT. pose (AT := fun pc i => instr_at_incr s1 s2 pc i EXT). induction 1; econstructor; eauto. Qed.
add_move_charact
Proof. intros. unfold add_move in H. destruct (Reg.eq rs rd). inv H. constructor. constructor. eauto with rtlg. Qed.
Ltac custom_tac5 H0 := intros; inv H0.

Ltac custom_tac60  := econstructor; eauto.

Ltac custom_tac42  := right; eauto with rtlg.

Ltac custom_tac37 H0 := eapply H0; eauto.

Ltac custom_tac69 H0 := eauto with rtlg; eapply H0; eauto with rtlg.

Ltac custom_tac58  := econstructor; eauto with rtlg.

Ltac custom_tac26 H0 H1 := apply H0 with H1; auto.

Ltac custom_tac46  := constructor; auto.

Ltac custom_tac32 H0 := apply H0; eauto with rtlg.

Ltac custom_tac22 H0 := unfold H0; simpl.

Ltac custom_tac2 H0 := exists H0; auto.

Ltac custom_tac50 H0 H1 H2 := apply H0 with H1 H2; auto; eauto with rtlg.

Ltac custom_tac40  := eauto with rtlg; eauto with rtlg.

Ltac custom_tac51 H0 H1 H2 H3 H4 := generalize H0; unfold H1; caseEq ( nth_error ( map_letvars H2) H3); intros; inv H4.

Ltac custom_tac65 H0 := inv H0; constructor.

Ltac custom_tac41 H0 H1 := apply H0; apply H1.

Ltac custom_tac10  := red; intros.

Ltac custom_tac29 H0 H1 := eauto with rtlg; apply H0 with H1; eauto with rtlg.

transl_expr_charact
Proof. intro a. induction a; intros; try ( monadInv TR); saturateTrans. generalize EQ; unfold find_var. caseEq ( map_vars map)!i; custom_tac5 EQ1. custom_tac60 . inv OK. left; split; congruence. custom_tac42 . custom_tac37 add_move_charact. inv OK. econstructor; custom_tac69 transl_exprlist_charact; inv OK. econstructor; custom_tac69 transl_exprlist_charact; inv OK. custom_tac58 . custom_tac26 tr_expr_incr s1. eapply transl_expr_charact; eauto 2 with rtlg. custom_tac46 . custom_tac26 tr_expr_incr s0. eapply transl_expr_charact; eauto 2 with rtlg. custom_tac46 . inv OK. econstructor. eapply new_reg_not_in_map; eauto with rtlg. eapply transl_expr_charact; eauto 3 with rtlg. custom_tac26 tr_expr_incr s1. custom_tac37 transl_expr_charact. custom_tac32 add_letvar_valid. custom_tac46 . red; custom_tac22 reg_in_map. intros [ [ id A] | [ B | C]]. elim H. left; custom_tac2 id. subst x. custom_tac50 valid_fresh_absurd rd s. elim H. right; auto. custom_tac40 . custom_tac51 EQ find_letvar map n EQ0. monadInv EQ1; custom_tac58 . inv OK. left; split; congruence. custom_tac42 . custom_tac37 add_move_charact. monadInv EQ1. inv OK. econstructor; custom_tac69 transl_exprlist_charact; inv OK. econstructor; custom_tac69 transl_exprlist_charact; induction al; intros; try ( monadInv TR); saturateTrans. destruct rl; custom_tac65 TR. destruct rl; simpl in TR; monadInv TR. inv OK. econstructor. eapply transl_expr_charact; eauto with rtlg. generalize ( VALID2 r ( in_eq _ _)). eauto with rtlg. custom_tac26 tr_exprlist_incr s0. eapply transl_exprlist_charact; eauto with rtlg. custom_tac41 regs_valid_cons VALID2. auto with coqlib. auto. custom_tac10 ; apply VALID2; auto with coqlib. induction a; intros; try ( monadInv TR); saturateTrans. econstructor; custom_tac69 transl_exprlist_charact; custom_tac58 ; apply tr_condition_incr with s1; custom_tac29 tr_condition_incr s0; econstructor; custom_tac69 transl_expr_charact; apply tr_condition_incr with s1; custom_tac69 transl_condexpr_charact; custom_tac32 add_letvar_valid. Qed.
transl_expr_assign_charact
Proof. intros id a. induction a; intros; monadInv TR; saturateTrans. generalize EQ; unfold find_var. caseEq (map_vars map)!i; intros; inv EQ1. econstructor; eauto. eapply add_move_charact; eauto. econstructor; eauto with rtlg. eapply transl_exprlist_charact; eauto with rtlg. econstructor; eauto with rtlg. eapply transl_exprlist_charact; eauto with rtlg. econstructor; eauto with rtlg. eapply transl_condexpr_charact; eauto with rtlg. apply tr_expr_incr with s1; auto. eapply IHa1; eauto 2 with rtlg. apply tr_expr_incr with s0; auto. eapply IHa2; eauto 2 with rtlg. econstructor. eapply new_reg_not_in_map; eauto with rtlg. eapply transl_expr_charact; eauto 3 with rtlg. apply tr_expr_incr with s1; auto. eapply IHa2; eauto. apply add_letvar_valid; eauto with rtlg. inv OK. constructor. auto. generalize EQ; unfold find_letvar. caseEq (nth_error (map_letvars map) n); intros; inv EQ0. monadInv EQ1. econstructor; eauto with rtlg. eapply add_move_charact; eauto. monadInv EQ1. econstructor; eauto with rtlg. eapply transl_exprlist_charact; eauto with rtlg. econstructor; eauto with rtlg. eapply transl_exprlist_charact; eauto with rtlg. Qed.
alloc_optreg_map_ok
Proof. unfold alloc_optreg; intros. destruct optid. constructor. unfold find_var in H0. destruct (map_vars map)!i0; monadInv H0. auto. constructor. eapply new_reg_not_in_map; eauto. Qed.
tr_exitexpr_incr
Proof. intros s1 s2 EXT. generalize tr_expr_incr tr_condition_incr; intros I1 I2. induction 1; econstructor; eauto with rtlg. Qed.
tr_stmt_incr
Proof. intros s1 s2 EXT. generalize tr_expr_incr tr_condition_incr tr_exprlist_incr tr_exitexpr_incr; intros I1 I2 I3 I4. pose (AT := fun pc i => instr_at_incr s1 s2 pc i EXT). induction 1; econstructor; eauto. Qed.
transl_exit_charact
Proof. intros until incr. unfold transl_exit. destruct (nth_error nexits n); intro; monadInv H. auto. Qed.
transl_jumptable_charact
Proof. intros nexits tbl. induction tbl; intros. monadInv H. split. red. simpl. intros. discriminate. auto. monadInv H. exploit transl_exit_charact; eauto. intros [A B]. exploit IHtbl; eauto. intros [C D]. split. red. simpl. intros. destruct (zeq v 0). inv H. exists x; auto. auto. congruence. Qed.
transl_exitexpr_charact
Proof. intros nexits a. induction a; simpl; intros; try (monadInv TR); saturateTrans. - exploit transl_exit_charact; eauto. intros [A B]. econstructor; eauto. - exploit transl_jumptable_charact; eauto. intros [A B]. econstructor; eauto. eapply transl_expr_charact; eauto with rtlg. eauto with rtlg. - econstructor. eapply transl_condexpr_charact; eauto with rtlg. apply tr_exitexpr_incr with s1; eauto with rtlg. apply tr_exitexpr_incr with s0; eauto with rtlg. - econstructor; eauto with rtlg. eapply transl_expr_charact; eauto with rtlg. apply tr_exitexpr_incr with s1; auto. eapply IHa; eauto with rtlg. apply add_letvar_valid; eauto with rtlg. Qed.
convert_builtin_res_charact
Proof. intros map oty res. destruct res; simpl; intros. - monadInv TR. constructor. unfold find_var in EQ. destruct (map_vars map)!x; inv EQ; auto. - destruct (xtype_eq oty Xvoid); monadInv TR. + constructor. + constructor. eauto with rtlg. - monadInv TR. Qed.
transl_stmt_charact
Proof. intros map stmt. induction stmt; intros; simpl in TR; try (monadInv TR); saturateTrans. constructor. revert EQ. unfold find_var. case_eq (map_vars map)!i; intros; monadInv EQ. eapply tr_Sassign; eauto. eapply transl_expr_assign_charact; eauto with rtlg. constructor. auto. econstructor; eauto with rtlg. eapply transl_exprlist_charact; eauto 3 with rtlg. apply tr_expr_incr with s3; auto. eapply transl_expr_charact; eauto 4 with rtlg. destruct s0 as [b | id]; monadInv TR; saturateTrans. econstructor; eauto 4 with rtlg. eapply transl_expr_charact; eauto 3 with rtlg. apply tr_exprlist_incr with s5. auto. eapply transl_exprlist_charact; eauto 3 with rtlg. eapply alloc_regs_target_ok with (s1 := s0); eauto 3 with rtlg. apply regs_valid_cons; eauto 3 with rtlg. apply regs_valid_incr with s0; eauto 3 with rtlg. apply regs_valid_cons; eauto 3 with rtlg. apply regs_valid_incr with s2; eauto 3 with rtlg. eapply alloc_optreg_map_ok with (s1 := s2); eauto 3 with rtlg. econstructor; eauto 4 with rtlg. eapply transl_exprlist_charact; eauto 3 with rtlg. eapply alloc_optreg_map_ok with (s1 := s0); eauto 3 with rtlg. destruct s0 as [b | id]; monadInv TR; saturateTrans. assert (RV: regs_valid (x :: nil) s0). apply regs_valid_cons; eauto 3 with rtlg. econstructor; eauto 3 with rtlg. eapply transl_expr_charact; eauto 3 with rtlg. apply tr_exprlist_incr with s4; auto. eapply transl_exprlist_charact; eauto 4 with rtlg. econstructor; eauto 3 with rtlg. eapply transl_exprlist_charact; eauto 4 with rtlg. econstructor; eauto 4 with rtlg. eapply transl_exprlist_charact; eauto 3 with rtlg. eapply convert_builtin_res_charact; eauto with rtlg. econstructor. apply tr_stmt_incr with s0; auto. eapply IHstmt2; eauto with rtlg. eapply IHstmt1; eauto with rtlg. destruct (more_likely c stmt1 stmt2); monadInv TR. econstructor. apply tr_stmt_incr with s1; auto. eapply IHstmt1; eauto with rtlg. apply tr_stmt_incr with s0; auto. eapply IHstmt2; eauto with rtlg. eapply transl_condexpr_charact; eauto with rtlg. econstructor. apply tr_stmt_incr with s0; auto. eapply IHstmt1; eauto with rtlg. apply tr_stmt_incr with s1; auto. eapply IHstmt2; eauto with rtlg. eapply transl_condexpr_charact; eauto with rtlg. econstructor. apply tr_stmt_incr with s1; auto. eapply IHstmt; eauto with rtlg. eauto with rtlg. eauto with rtlg. econstructor. eapply IHstmt; eauto with rtlg. exploit transl_exit_charact; eauto. intros [A B]. econstructor. eauto. econstructor. eapply transl_exitexpr_charact; eauto. destruct o. destruct rret; inv TR. inv OK. econstructor; eauto with rtlg. eapply transl_expr_charact; eauto with rtlg. constructor. auto. simpl; tauto. monadInv TR. constructor. generalize EQ0; clear EQ0. case_eq (ngoto!l); intros; monadInv EQ0. generalize EQ1; clear EQ1. unfold handle_error. case_eq (update_instr n (Inop ns) s0); intros; inv EQ1. econstructor. eauto. eauto with rtlg. eapply tr_stmt_incr with s0; eauto with rtlg. generalize TR; clear TR. case_eq (ngoto!l); intros; monadInv TR. econstructor. auto. Qed.
transl_function_charact
Proof. intros until tf. unfold transl_function. caseEq (transl_fun f init_state). congruence. intros [nentry rparams] sfinal INCR TR E. inv E. monadInv TR. exploit add_vars_valid. eexact EQ1. apply init_mapping_valid. intros [A B]. exploit add_vars_valid. eexact EQ0. auto. intros [C D]. eapply tr_function_intro; eauto with rtlg. eapply transl_stmt_charact; eauto with rtlg. unfold ret_reg. destruct (xtype_eq (sig_res (CminorSel.fn_sig f)) Xvoid). constructor. constructor; eauto with rtlg. Qed.
