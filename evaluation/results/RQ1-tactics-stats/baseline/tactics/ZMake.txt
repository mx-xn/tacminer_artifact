Ltac custom_tac25 H0 H1 H2 H3 H4 H5 H6 H7 H8 := intros H0 H1; generalize ( spec_div_eucl H0 H1); unfold H2, H3; case div_eucl; case Z.div_eucl; simpl; auto; intros H4 H5 H6 H7 H8; injection H8; auto.
Ltac custom_tac35 H0 H1 H2 := intros H0 H1; unfold H2; destr_norm_pos H0; destr_norm_pos H1; simpl; rewrite ?NN.spec_succ, ?NN.spec_land, ?NN.spec_ldiff, ?NN.spec_lor, ?NN.spec_pred, ?Z.max_r, ?Zlnot_alt1; auto with zarith.
Ltac custom_tac14 H0 H1 H2 H3 := unfold H0, H1; intros [ x | x] [ y | y]; try ( rewrite NN.spec_add; auto with zarith); rewrite H2; case Z.compare_spec; unfold H3; rewrite ?NN.spec_0, ?NN.spec_sub; lia.
Ltac custom_tac31 H0 H1 H2 := intros [ n|n]; simpl; rewrite H0; trivial; destruct ( NN.to_Z H1) as [ |p|p]; now try destruct H2.
Ltac custom_tac8 H0 H1 H2 := unfold H0, H1; intros; rewrite H2; destruct Z.compare; auto.
Ltac custom_tac6 H0 H1 H2 H3 H4 := apply H0; rewrite H1; unfold H2, H3; rewrite H4.
Ltac custom_tac12 H0 := rewrite H0; ring.
Ltac custom_tac0 H0 := rewrite H0; auto.
Ltac custom_tac10  := simpl; auto with zarith.
Ltac custom_tac36 H0 H1 H2 := intros H0 H1; unfold H2; destr_norm_pos H0; destr_norm_pos H1; simpl.
Ltac custom_tac11 H0 := rewrite H0; case Z.compare_spec.
Ltac custom_tac20 H0 := intros; unfold H0.
Ltac custom_tac28 H0 H1 := rewrite H0, H1; case Z.eqb_spec.
Ltac custom_tac29 H0 H1 H2 := intros H0 H1; unfold H2.
Ltac custom_tac32 H0 H1 := unfold H0, H1; auto with zarith.
Ltac custom_tac2 H0 := intros H0; case H0.
Ltac custom_tac13 H0 := generalize ( NN.spec_pos H0); auto with zarith.
Ltac custom_tac15 H0 H1 := unfold H0, H1; intros [ x | x] [ y | y].
Ltac custom_tac24  := intros <-; auto.
Ltac custom_tac27 H0 := symmetry; rewrite H0.
Ltac custom_tac7 H0 H1 := apply H0; rewrite H1.
Ltac custom_tac16 H0 := intros [ x | x] [ y | y]; rewrite H0.
Ltac custom_tac23 H0 := destruct H0 as [ p|p]; simpl.
