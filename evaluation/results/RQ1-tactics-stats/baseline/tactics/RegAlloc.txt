Ltac custom_tac16 H0 H1 H2 H3 H4 H5 H6 H7 H8 H9 := split; intros; destruct ( OrderedEquation'.eq_dec H0 H1) as [ H2 | H3]; eelim EqSet2.remove_1; eauto; apply H4; assumption; apply ( H5 H6); apply H7 with H0; auto; destruct ( OrderedEquation.eq_dec H0 H1) as [ H2 | H3]; eelim EqSet.remove_1; eauto; apply H8; assumption; apply ( H5 H6); apply H9 with H0; auto.
Ltac custom_tac27 H0 H1 H2 H3 H4 H5 H6 H7 := split; intros; apply H0 in H1; destruct H1 as [ H1 | H1]; rewrite H2 in H1; apply H3; auto; apply H4; auto; apply H5 in H1; destruct H1 as [ H1 | H1]; rewrite <- H2 in H1; apply H6; auto; apply H7; auto.
Ltac custom_tac28 H0 H1 H2 H3 H4 H5 H6 H7 := unfold H0, H1, H2; intros; destruct H3 as [ H4 | H4]; destruct H5 as [ H6 | H6]; auto; intros; apply H7; auto.
Ltac custom_tac3  := red; auto.
Ltac custom_tac19 H0 H1 := intros; destruct H0 as [ e|e]; destruct H1 as [ e0|e0].
Ltac custom_tac10 H0 := intros; rewrite H0; auto.
Ltac custom_tac0 H0 := unfold H0; auto.
Ltac custom_tac22 H0 H1 := destruct H0 as [ e0|e0]; try contradiction; destruct H1 as [ e1|e1].
Ltac custom_tac23 H0 H1 H2 := unfold H0, H1; intros; destruct H2 as [ e|e].
Ltac custom_tac26 H0 H1 := destruct H0 as [ H1 | H1]; auto; intros.
