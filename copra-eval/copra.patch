From 800ecf88c32432ba24e62803be0ff78b5f661f59 Mon Sep 17 00:00:00 2001
From: Gabriel Poesia <poesia@stanford.edu>
Date: Wed, 31 Jul 2024 17:00:01 -0700
Subject: [PATCH] Support custom tactics and add coq-art

---
 data/benchmarks/coq-art/chap3.v               | 113 +++++
 data/benchmarks/coq-art/chap5.v               | 307 ++++++++++++++
 data/benchmarks/coq-art/chap8.v               | 394 ++++++++++++++++++
 data/benchmarks/coq-art/class.v               |  60 +++
 data/benchmarks/coq-art/cut_example.v         |  52 +++
 data/benchmarks/coq-art/exo_frac.v            |  89 ++++
 data/benchmarks/coq-art/nth_length.v          |  26 ++
 src/baselines/gpt4/few_shot_policy.py         |  17 +-
 .../gpt4/few_shot_policy_prompter.py          |  25 +-
 src/gpts/gpt_access.py                        |   3 +-
 src/main/config/benchmark/coqart.yaml         |  24 ++
 src/main/eval_benchmark.py                    |  36 +-
 12 files changed, 1123 insertions(+), 23 deletions(-)
 create mode 100644 data/benchmarks/coq-art/chap3.v
 create mode 100644 data/benchmarks/coq-art/chap5.v
 create mode 100644 data/benchmarks/coq-art/chap8.v
 create mode 100644 data/benchmarks/coq-art/class.v
 create mode 100644 data/benchmarks/coq-art/cut_example.v
 create mode 100644 data/benchmarks/coq-art/exo_frac.v
 create mode 100644 data/benchmarks/coq-art/nth_length.v
 create mode 100644 src/main/config/benchmark/coqart.yaml

diff --git a/data/benchmarks/coq-art/chap3.v b/data/benchmarks/coq-art/chap3.v
new file mode 100644
index 0000000..59ef462
--- /dev/null
+++ b/data/benchmarks/coq-art/chap3.v
@@ -0,0 +1,113 @@
+(** BEGIN_DREAMPROVER_TACTICS **)
+Ltac custom0 H0 H1 H2 := intros H0 H1 H2; [apply H2; [assumption |apply H1;[assumption|..]|..]|..].
+Ltac custom1 H0 H1 H2 := intros H0 H1 H2; [apply H1; [apply H2; [assumption|..]|..]|..].
+Ltac custom2 H0 H1 := apply H0; [assumption |apply H1; [assumption|..]|..].
+Ltac custom3 H0 := apply H0; [assumption | ..].
+(** END_DREAMPROVER_TACTICS **)
+
+Section Minimal_propositional_logic.
+ Variables P Q R T : Prop.
+
+
+ Theorem imp_trans : (P->Q)->(Q->R)->P->R.
+ Proof.
+  intros H H' p.
+  apply H'.
+  apply H.
+  assumption.
+ Qed.
+
+ 
+ Theorem imp_trans' : (P->Q)->(Q->R)->P->R.
+ Proof.
+  intros H H' p. apply H'. apply H. assumption.
+ Qed.
+
+ Theorem imp_trans'' : (P->Q)->(Q->R)->P->R.
+ Proof.
+  auto. 
+ Qed.
+
+ Theorem delta : (P->P->Q)->P->Q.
+ Proof (fun (H:P->P->Q)(p:P) => H p p).
+
+ Lemma apply_example : (Q->R->T)->(P->Q)->P->R->T.
+ Proof.
+  intros H H0 p.
+  apply H.
+  exact (H0 p).
+ Qed.
+
+ Theorem imp_dist : (P->Q->R)->(P->Q)->(P->R).
+ Proof.
+  intros H H' p.
+  apply H.  
+  - assumption.
+  - apply H'. assumption.
+ Qed.
+
+ Theorem K : P->Q->P.
+ Proof.
+  intros p q. assumption.
+ Qed.
+
+
+ 
+ Section proof_of_triple_impl.
+  Hypothesis H : ((P->Q)->Q)-> Q.
+  Hypothesis p : P.
+
+  Remark  R1 : (P->Q)->Q.
+  Proof fun H0:P->Q => H0 p.
+
+  Theorem triple_impl : Q.
+  Proof H R1.
+
+ End proof_of_triple_impl.
+
+
+ Theorem triple_impl_one_liner : (((P->Q)->Q)->Q)->P->Q.
+ Proof.
+  intros H p. apply H. intro H0. apply H0. assumption.
+ Qed.
+
+ Lemma imp_dist' : (P->Q->R)->(P->Q)->(P->R).
+ Proof.
+  intros H H' p.
+  apply H; [assumption | apply H'; assumption].
+ Qed.
+
+ Section section_assert_example.
+  Hypotheses (H : P->Q)
+             (H0 : Q->R)
+             (H1 : (P->R)->T->Q)
+             (H2 : (P->R)->T).
+ 
+  Lemma assert_example : Q.
+  Proof.
+   assert (H3 : P -> R).
+   -  intro p; apply H0; apply H; assumption.
+   -  apply H1; [assumption | apply H2; assumption].
+  Qed.
+
+ Print assert_example.
+
+ End section_assert_example.
+
+ Lemma triple_impl2 : (((P->Q)->Q)->Q)->P->Q.
+ Proof.
+  auto.
+ Qed.
+
+End Minimal_propositional_logic.
+
+Print imp_dist.
+
+Section using_imp_dist.
+ Variables (P1 P2 P3 : Prop).
+
+ Check imp_dist P1 P2 P3.
+
+ Check imp_dist (P1->P2) (P2->P3) (P3->P1).
+
+End using_imp_dist.
diff --git a/data/benchmarks/coq-art/chap5.v b/data/benchmarks/coq-art/chap5.v
new file mode 100644
index 0000000..a6b73ae
--- /dev/null
+++ b/data/benchmarks/coq-art/chap5.v
@@ -0,0 +1,307 @@
+(** BEGIN_DREAMPROVER_TACTICS **)
+Ltac custom0 H0 :=
+	apply H0; [assumption | ..].
+(** END_DREAMPROVER_TACTICS **)
+
+Require Export ZArith.
+Require Export List.
+Require Export Arith.
+Require Export ZArithRing.
+Require Import Relations.
+Require Import Lia.
+
+
+(** Example of use of the conversion rule
+*)
+Theorem conv_example : forall n:nat, 7*5 < n -> 6*6 <= n.
+Proof.
+ intros. assumption.
+Qed.
+
+Theorem imp_trans : forall P Q R:Prop, (P->Q)->(Q->R)->P->R.
+Proof.
+  intros P Q R H H0 p.
+  apply H0. apply H. assumption.
+Qed.
+
+(** Tests :
+
+Print imp_trans.
+
+Check (imp_trans _ _ _ (le_S 0 1)(le_S 0 2)).
+
+*)
+
+Definition neutral_left (A:Type)(op:A->A->A)(e:A) : Prop :=
+  forall x:A, op e x = x.
+
+Lemma one_neutral_left : neutral_left Z Zmult 1%Z.
+Proof.
+ intro z; ring.
+Qed.
+
+Lemma le_i_SSi : forall i:nat, i <= S (S i).
+Proof.
+ intro i.
+ do 2 apply le_S; apply le_n.
+Qed.
+
+Lemma all_imp_dist   :
+ forall (A:Type)(P Q:A->Prop),
+         (forall x:A, P x -> Q x)->
+         (forall y:A, P y)->
+          forall z:A, Q z.
+Proof.
+ intros A P Q H H0 z.
+ apply H. apply H0.
+Qed.
+
+
+Lemma mult_le_compat_r : forall m n p:nat, le n p -> le (n * m) (p * m).
+Proof.
+ intros m n p H. rewrite (Nat.mul_comm n m).
+   rewrite (Nat.mul_comm p m).
+ apply Nat.mul_le_mono_l. assumption.
+Qed.
+
+
+Lemma le_mult_mult :
+   forall a b c d:nat, a <= c -> b <= d -> a * b <= c * d.
+Proof.
+ intros a b c d H H0.
+ apply Nat.le_trans with (m := c * b).
+ - apply mult_le_compat_r; assumption.
+ - apply Nat.mul_le_mono_l; assumption.
+Qed.
+
+
+(** using eapply ...
+*)
+
+Lemma le_mult_mult' :
+ forall a b c d:nat, a <= c -> b <= d -> a*b <= c*d.
+Proof.
+ intros a b c d H H0.
+ eapply Nat.le_trans.
+ - eapply Nat.mul_le_mono_l.
+   eexact H0.
+ -  apply mult_le_compat_r. assumption.
+Qed.
+
+Lemma le_O_mult : forall n p:nat, 0 * n <= 0 * p.
+Proof.
+ intros n p; apply le_n.
+Qed.
+
+Lemma lt_8_9 : 8 < 9.
+Proof.
+ unfold lt; apply le_n.
+Qed.
+
+(** Tests :
+
+SearchPattern (_ + _ <= _)%Z.
+
+SearchPattern (?X1 * _ <= ?X1 * _)%Z.
+
+*)
+
+Lemma lt_S : forall n p:nat, n < p -> n < S p.
+Proof.
+ intros n p H.
+ unfold lt; apply le_S. assumption.
+Qed.
+
+Open Scope Z_scope.
+
+Definition Zsquare_diff (x y:Z):= x * x - y * y.
+
+Theorem unfold_example :
+ forall x y:Z,
+   x*x = y*y ->
+   Zsquare_diff x y * Zsquare_diff (x+y)(x*y) = 0.
+Proof.
+ intros x y Heq.
+ unfold Zsquare_diff at 1.
+ rewrite Heq; ring.
+Qed.
+
+Section ex_falso_quodlibet.
+ Hypothesis ff : False.
+
+ Lemma ex1 : 220 = 284.
+ Proof.
+   apply False_ind.
+   exact ff.
+ Qed.
+
+ Lemma ex2 : 220 = 284.
+ Proof.
+  destruct ff.
+ Qed.
+
+End ex_falso_quodlibet.
+
+Theorem absurd : forall P Q:Prop, P -> ~P -> Q.
+Proof.
+ intros P Q p H.
+ elim H.
+ assumption.
+Qed.
+
+Theorem double_neg_i : forall P:Prop, P->~~P.
+Proof.
+ intros P p H.
+ apply H; assumption.
+Qed.
+
+Theorem modus_ponens :forall P Q:Prop, P->(P->Q)->Q.
+Proof.
+ auto.
+Qed.
+
+
+Theorem double_neg_i' : forall P:Prop, P -> ~ ~ P.
+Proof.
+ intro P; exact (modus_ponens P False).
+Qed.
+
+Theorem contrap :forall A B:Prop, (A->B) -> ~B -> ~A.
+Proof.
+ intros A B; unfold not.
+ apply imp_trans.
+Qed.
+
+Theorem disj4_3' : forall P Q R S:Prop, R -> P \/ Q \/ R \/ S.
+Proof.
+  right; right; left; assumption.
+Qed.
+
+Lemma and_commutes : forall A B:Prop, A /\ B -> B /\ A.
+Proof.
+ intros A B H; destruct H.
+ split; assumption.
+Qed.
+
+Lemma or_commutes : forall A B:Prop, A\/B->B\/A.
+Proof.
+ intros A B H; destruct H as [H | H]; auto.
+Qed.
+
+Lemma ex_imp_ex :
+ forall (A:Type)(P Q:A->Prop), (ex P)->(forall x:A, P x -> Q x)->(ex Q).
+Proof.
+ intros A P Q H H0; destruct H as [a Ha].
+ exists a; apply H0; assumption.
+Qed.
+
+
+Lemma L36 : 6 * 6 =9 * 4.
+Proof. reflexivity. Qed.
+
+Lemma diff_of_squares : forall a b:Z, ((a + b) * (a - b) = a * a - b * b)%Z.
+Proof.
+ intros; ring.
+Qed.
+
+Theorem eq_sym' : forall (A:Type)(a b:A), a = b -> b = a.
+Proof.
+ intros A a b e; rewrite e; reflexivity.
+Qed.
+
+Lemma Zmult_distr_1 : forall n x:Z, n * x + x = ( n + 1) * x.
+Proof.
+ intros n x ; rewrite Zmult_plus_distr_l.
+ now rewrite  Zmult_1_l.
+Qed.
+
+Lemma regroup : forall x:Z, x + x + x + x + x = 5 * x.
+Proof.
+ intro x; pattern x at 1.
+ rewrite <- Zmult_1_l.
+ repeat rewrite Zmult_distr_1.
+ reflexivity.
+Qed.
+
+
+Open Scope nat_scope.
+
+Theorem le_lt_S_eq : forall n p:nat, n <= p -> p < S n -> n = p.
+Proof.
+ intros; lia.
+Qed.
+
+Lemma conditional_rewrite_example : forall n:nat,
+   8 <= n + 6 ->  3 + n < 6 -> n * n = n + n.
+Proof.
+ intros n H H0.
+ rewrite <- (le_lt_S_eq 2 n).
+ - reflexivity.
+ -  apply  Nat.add_le_mono_l with (p := 6).
+    rewrite Nat.add_comm in H; auto with arith.
+ - apply Nat.add_lt_mono_l with (p:= 3); auto with arith.
+Qed.
+
+(** A shorter proof ...
+*)
+
+Lemma conditional_rewrite_example' : forall n:nat,
+   8 <= n + 6 ->  3 + n < 6 -> n * n = n + n.
+Proof.
+ intros n H H0.
+ assert (n = 2) by lia.
+ now subst n.
+Qed.
+
+
+Theorem eq_trans :
+   forall (A:Type)(x y z:A), x = y -> y = z -> x = z.
+Proof.
+ intros A x y z H. rewrite H; auto.
+Qed.
+
+Definition my_True : Prop
+:= forall P:Prop, P -> P.
+
+Definition my_False : Prop
+:= forall P:Prop, P.
+
+Theorem my_I : my_True.
+Proof.
+ intros P p; assumption.
+Qed.
+
+
+Theorem my_False_ind : forall P:Prop, my_False->P.
+Proof.
+ intros P F; apply F.
+Qed.
+
+Definition my_not (P:Prop) : Prop := P->my_False.
+
+Section leibniz.
+
+ Variable A : Type.
+
+ Definition leibniz (a b:A) : Prop :=
+ forall P:A -> Prop, P a -> P b.
+
+
+Theorem leibniz_sym : symmetric A leibniz.
+Proof.
+ intros x y H Q; apply H; trivial.
+Qed.
+
+End leibniz.
+
+Definition my_and (P Q:Prop) :=
+  forall R:Prop, (P->Q->R)->R.
+
+Definition my_or (P Q:Prop) :=
+  forall R:Prop, (P->R)->(Q->R)->R.
+
+Definition my_ex (A:Type)(P:A->Prop) :=
+  forall R:Prop, (forall x:A, P x -> R)->R.
+
+Definition my_le (n p:nat) :=
+  forall P:nat -> Prop, P n ->(forall q:nat, P q -> P (S q))-> P p.
diff --git a/data/benchmarks/coq-art/chap8.v b/data/benchmarks/coq-art/chap8.v
new file mode 100644
index 0000000..6b3a42f
--- /dev/null
+++ b/data/benchmarks/coq-art/chap8.v
@@ -0,0 +1,394 @@
+Require Export ZArith.
+Require Export List.
+Require Export Arith.
+Require Export Lia.
+Require Export Zwf.
+
+
+(* taken from chapter 5 *)
+
+Inductive plane : Set :=
+    point : Z->Z->plane.
+
+Inductive htree (A:Type) : nat->Type :=
+  | hleaf : A -> htree A 0%nat
+  | hnode : forall n:nat, A -> htree A n -> htree A n -> htree A (S n).
+
+
+Inductive south_west : plane->plane->Prop :=
+  south_west_def :
+  forall a1 a2 b1 b2:Z, (a1 <= b1)%Z -> (a2 <= b2)%Z -> 
+        south_west (point a1 a2)(point b1 b2).
+
+Inductive even : nat->Prop :=
+  | O_even : even 0
+  | plus_2_even : forall n:nat, even n -> even (S (S n)).
+
+Inductive sorted {A:Type}(R:A->A->Prop) : list A -> Prop :=
+  | sorted0 : sorted  R nil
+  | sorted1 : forall x:A, sorted  R (x :: nil)
+  | sorted2 :
+      forall (x y:A)(l:list A),
+        R x y ->
+        sorted  R (y :: l)-> sorted  R (x  ::  y :: l).
+
+
+#[export] Hint Constructors sorted :  sorted_base.
+
+Require Export Relations.
+
+
+Inductive clos_trans {A:Type}(R:relation A) : A->A->Prop :=
+  | t_step : forall x y:A, R x y -> clos_trans  R x y
+  | t_trans :
+    forall x y z:A, clos_trans  R x y -> clos_trans  R y z -> 
+        clos_trans  R x z.
+
+
+Theorem sorted_nat_123 : sorted le (1::2::3::nil).
+Proof.
+ auto with sorted_base arith.
+Qed.
+
+Theorem xy_ord :
+ forall x y:nat, le x y -> sorted  le (x::y::nil).
+Proof.
+ auto with sorted_base.
+Qed.
+
+Theorem zero_cons_ord :
+ forall l:list nat, sorted le l -> sorted le (cons 0 l).
+Proof.
+ induction 1; auto with sorted_base arith.
+Qed.
+
+Theorem sorted1_inv {A:Type}{le : relation A} { x l} (H: sorted le (x::l))  :
+  sorted le l.
+Proof.
+ inversion H;  auto with sorted_base.
+Qed.
+
+Theorem sorted2_inv {A:Type}{le : relation A} {x y  l}
+        (H: sorted le (x::y::l)): le x y.
+Proof.
+ inversion H; auto with sorted_base.
+Qed.
+
+Theorem not_sorted_132 :  ~ sorted le (1::3::2::nil).
+Proof.
+ intros H; generalize  (sorted1_inv   H); intro H0. 
+ generalize (sorted2_inv H0).
+ lia.
+Qed.
+
+(** Tests :
+Check True_ind.
+
+Check False_ind.
+
+Check and_ind.
+
+Check or_ind.
+
+Check ex_ind.
+
+Check eq_ind.
+*)
+
+Require Import JMeq.
+
+(** Tests : 
+Check JMeq_eq.
+
+Check JMeq_ind.
+
+*)
+
+Inductive ahtree(A:Type) : Type :=
+  any_height : forall n:nat, htree A n -> ahtree A.
+
+Arguments any_height {A} n _.
+
+Theorem any_height_inj2 {A:Type} :
+ forall (n1 n2:nat)(t1:htree A n1)(t2:htree A n2),
+   any_height n1 t1 = any_height n2 t2 -> JMeq t1 t2.
+Proof.
+ intros  n1 n2 t1 t2 H.
+ injection H; intros H1 H2.
+ dependent rewrite <- H1.
+ trivial.
+Qed.
+
+
+Theorem any_height_inj2' {A:Type} :
+ forall (n1 n2:nat)(t1:htree A n1)(t2:htree A n2),
+   any_height n1 t1 = any_height   n2 t2 -> JMeq t1 t2.
+Proof. 
+ intros  n1 n2 t1 t2 H.
+ change (match any_height n2 t2 with
+        | any_height  n t => JMeq t1 t
+        end);
+   now rewrite <- H.
+Qed.
+
+Require Import List  Vector.
+
+Section vectors_and_lists.
+ Variable A : Type. 
+ (** Note :
+    The type of A-vectors of length n is just (t A n)
+    or (Vector.t A n)
+
+    Since the Vector library overloads nil and cons, we use qualified names
+    for the operations on lists *)
+
+ Fixpoint vector_to_list (n:nat)(v:t A n){struct v} 
+  : list A :=
+  match v with
+  | nil _ => List.nil 
+  | cons _ a p tl => List.cons a (vector_to_list p tl)
+  end.
+
+ Fixpoint list_to_vector (l:list A) : t A (length l) :=
+   match l as x return t A (length x) with
+   | List.nil => nil A
+   | List.cons a tl => cons A a (length tl)(list_to_vector tl)
+   end.
+
+ Theorem keep_length :
+  forall (n:nat)(v:t A n), length (vector_to_list n v) = n.
+ Proof.
+   intros n v; induction v; simpl; auto.
+ Qed.
+
+ Lemma Vconseq :
+  forall (a:A)(n m:nat),
+   n = m ->
+   forall (v:t A n)(w:t A m),
+     JMeq v w -> JMeq (cons A a n v)(cons A a m w).
+ Proof.
+  intros a n m Heq; rewrite Heq.
+  intros v w HJeq.
+  rewrite HJeq; reflexivity.
+Qed.
+
+ Theorem vect_to_list_and_back :
+  forall n (v:t A n),
+    JMeq v (list_to_vector (vector_to_list n v)).
+ Proof.
+  intros n v; induction  v as [ | h n v IHv].
+ -   reflexivity.
+ -    simpl;  apply Vconseq.
+   +   now rewrite  keep_length.
+   +   assumption.
+ Qed.
+
+End vectors_and_lists.
+
+Theorem structured_intro_example1 : forall A B C:Prop, A/\B/\C->A.
+Proof.
+ intros A B C [Ha [Hb Hc]];
+ assumption.
+Qed.
+
+Theorem structured_intro_example2 : forall A B:Prop, A \/ B/\(B->A)->A.
+Proof.
+ intros A B [Ha | [Hb Hi]].
+ - assumption.  
+ - now apply Hi. 
+Qed.
+
+Theorem sum_even : forall n p:nat, even n -> even p -> even (n+p).
+Proof.
+(** False start
+ intros n; elim n.
+ auto.
+ intros n' Hrec p Heven_Sn' Heven_p.
+Restart.
+*)
+
+ intros n p Heven_n; induction Heven_n.  
+ -  trivial.
+ -  intro H0; simpl;  constructor; auto. 
+Qed.
+
+(** 
+Check le_ind.
+
+*)
+
+Theorem lt_le : forall n p:nat, n < p -> n <= p.
+Proof.
+ intros n p H; induction H; repeat constructor; assumption.
+Qed.
+
+
+Open Scope Z_scope.
+
+Inductive Pfact : Z->Z->Prop :=
+  Pfact0 : Pfact 0 1
+| Pfact1 : forall n v:Z, n <> 0 -> Pfact (n-1) v -> Pfact n (n*v).
+
+Theorem pfact3 : Pfact 3 6.
+Proof.
+ apply Pfact1 with (n := 3)(v := 2).
+ discriminate.
+ apply (Pfact1 2 1).
+ discriminate.
+ apply (Pfact1 1 1).
+ discriminate.
+ apply Pfact0.
+Qed.
+ 
+Theorem fact_def_pos : forall x y:Z, Pfact x y ->  0 <= x.
+Proof.
+ intros x y H; induction  H.
+ -  auto with zarith.
+ -  lia.
+Qed.
+
+
+(**
+Check Zwf_well_founded. 
+
+Check well_founded_ind. 
+*)
+
+Theorem Zle_Pfact : forall x:Z, 0 <= x -> exists y:Z, Pfact x y.
+Proof.
+ intros x; induction  x using (well_founded_ind (Zwf_well_founded 0)).
+ intros  Hle; destruct  (Zle_lt_or_eq  _ _ Hle).
+ - destruct (H (x-1)).
+   +  unfold Zwf; lia.
+   +  lia.
+   + exists (x*x0); apply Pfact1; auto with zarith.
+ -  subst x; exists 1; constructor.
+
+Qed.
+
+Section little_semantics.
+ Variables Var aExp bExp : Set.
+ Inductive inst : Set :=
+ | Skip : inst
+ | Assign : Var->aExp->inst
+ | Sequence : inst->inst->inst
+ | WhileDo : bExp->inst->inst.
+
+ Variables
+  (state : Set)
+  (update : state->Var->Z -> option state)
+  (evalA : state->aExp -> option Z)
+  (evalB : state->bExp -> option bool).
+
+ Inductive exec : state->inst->state->Prop :=
+ | execSkip : forall s:state, exec s Skip s
+ | execAssign :
+    forall (s s1:state)(v:Var)(n:Z)(a:aExp),
+     evalA s a = Some n -> update s v n = Some s1 ->
+     exec s (Assign v a) s1
+ | execSequence :
+    forall (s s1 s2:state)(i1 i2:inst),
+     exec s i1 s1 -> exec s1 i2 s2 ->
+     exec s (Sequence i1 i2) s2
+ | execWhileFalse :
+    forall (s:state)(i:inst)(e:bExp),
+     evalB s e = Some false -> exec s (WhileDo e i) s
+ | execWhileTrue :
+    forall (s s1 s2:state)(i:inst)(e:bExp),
+     evalB s e = Some true ->
+     exec s i s1 ->
+     exec s1 (WhileDo e i) s2 ->
+     exec s (WhileDo e i) s2.
+
+ Theorem HoareWhileRule :
+  forall (P:state->Prop)(b:bExp)(i:inst)(s s':state),
+    (forall s1 s2:state,
+      P s1 -> evalB s1 b = Some true -> exec s1 i s2 -> P s2)->
+    P s -> exec s (WhileDo b i) s' ->
+    P s' /\ evalB s' b = Some false.
+ Proof.
+(*  intros P b i s s' H Hp Hexec; elim Hexec.
+ Restart.
+  intros P b i s s' H Hp Hexec; generalize H Hp; elim Hexec.
+ Restart. *)
+
+  intros P b i s s' H.
+  cut
+   (forall i':inst,
+     exec s i' s' ->
+     i' = WhileDo b i -> P s -> P s' /\ evalB s' b = Some false);
+   eauto.
+  intros i' Hexec; elim Hexec; try (intros; discriminate).
+  intros s0 i0 e Heval Heq; injection Heq; intros H1 H2.
+  rewrite <- H2; auto.
+  intros. injection H5. intros H' H''.
+  subst i0 b; eauto.
+ Qed.
+End little_semantics.
+
+Open Scope nat_scope.
+
+Inductive is_0_1 : nat->Prop :=
+  is_0 : is_0_1 0 | is_1 : is_0_1 1.
+
+#[export] Hint Resolve is_0 is_1 : core.
+
+Lemma sqr_01 : forall x:nat, is_0_1 x -> is_0_1 (x * x).
+Proof.
+  induction 1; simpl; auto.
+Qed.
+
+Theorem elim_example : forall n:nat, n <= 1 -> n*n <= 1.
+Proof.
+ intros n H.
+ destruct (sqr_01 n); auto.
+ inversion_clear H; auto.
+ inversion_clear H0; auto.
+Qed.
+
+
+(** bad attempt 
+Section bad_proof_for_inversion.
+
+ Theorem not_1_even : ~even 1.
+ Proof.
+  red; intros H; elim H.
+ Abort.
+
+End bad_proof_for_inversion.
+
+*)
+
+Theorem not_even_1 : ~even 1.
+Proof.
+ unfold not; intros H.
+ inversion H.
+Qed.
+
+Theorem plus_2_even_inv : forall n:nat, even (S (S n))-> even n.
+Proof.
+ intros n H; inversion H; assumption.
+Qed.
+
+
+(** Same theorems, but using basic tactics only 
+*)
+
+Theorem not_even_1' : ~even 1.
+Proof.
+ intro H.
+ generalize (refl_equal 1).
+ pattern 1 at -2.
+ induction H.
+ - discriminate.
+ - discriminate.
+Qed.
+
+Theorem plus_2_even_inv' : forall n:nat, even (S (S n))-> even n.
+Proof.
+ intros n H.
+ generalize (refl_equal (S (S n))). pattern (S (S n)) at -2.
+ induction H.
+ -  discriminate.
+ -  intros H0; injection H0; intro; now subst n0.
+Qed.
\ No newline at end of file
diff --git a/data/benchmarks/coq-art/class.v b/data/benchmarks/coq-art/class.v
new file mode 100644
index 0000000..2a81b2b
--- /dev/null
+++ b/data/benchmarks/coq-art/class.v
@@ -0,0 +1,60 @@
+
+Definition peirce := forall P Q:Prop, ((P->Q)->P)->P.
+Definition classic := forall P:Prop, ~~P -> P.
+Definition excluded_middle := forall P:Prop, P\/~P.
+Definition de_morgan_not_and_not := forall P Q:Prop, ~(~P/\~Q)->P\/Q.
+Definition implies_to_or := forall P Q:Prop, (P->Q)->(~P\/Q).
+
+
+Lemma excluded_middle_peirce : excluded_middle -> peirce.
+Proof.
+ unfold peirce; intros H P Q H0.
+ destruct (H P) as [p | np].
+ -  assumption.
+ -  apply H0; intro H1; now absurd P.
+Qed.
+
+Lemma peirce_classic : peirce -> classic.
+Proof.
+ intros HPeirce P H0; apply (HPeirce P False).
+ intro H1; now destruct H0.
+Qed.
+
+Lemma classic_excluded_middle: classic -> excluded_middle.
+Proof.
+ unfold excluded_middle; intros H P.
+ apply H; intro H0; absurd P.
+ -  intro H1; apply H0 ; now left.
+ -  apply H; intro H1; apply H0; now right.
+Qed.
+
+
+Lemma excluded_middle_implies_to_or :  excluded_middle -> implies_to_or.
+Proof.
+ intros H P Q H0;
+  destruct (H P) as [p | np].
+  - right; auto.
+  - now left.
+Qed.
+
+Lemma implies_to_or_excluded_middle : implies_to_or -> excluded_middle.
+Proof.
+ unfold excluded_middle; intros H P; destruct (H P P); auto.
+Qed.
+
+Lemma classic_de_morgan_not_and_not : classic -> 
+                                      de_morgan_not_and_not.
+Proof.
+ unfold de_morgan_not_and_not; intros H P Q H0.
+ apply H.
+ intro H1; apply H0; split. 
+ - intro. apply H1. auto.
+ - intro. apply H1. auto.
+Qed.
+
+Lemma de_morgan_not_and_not_excluded_middle : de_morgan_not_and_not ->
+                                              excluded_middle.
+Proof.
+ unfold excluded_middle; intros H P.
+ apply H. intros [H1 H2]. contradiction. 
+Qed.
\ No newline at end of file
diff --git a/data/benchmarks/coq-art/cut_example.v b/data/benchmarks/coq-art/cut_example.v
new file mode 100644
index 0000000..babf4ba
--- /dev/null
+++ b/data/benchmarks/coq-art/cut_example.v
@@ -0,0 +1,52 @@
+
+Section cutex.
+ Variables P Q R T : Prop.
+ Hypothesis H : P -> Q.
+ Hypothesis H0 : Q -> R.
+ Hypothesis H1 : (P -> R) -> T -> Q.
+ Hypothesis H2 : (P -> R) -> T.
+
+
+ Lemma Q0 : Q.
+ Proof.
+  apply H1.
+  -  intro p; apply H0; apply H; assumption.
+  -  apply H2.
+    +  intro p. apply H0; apply H; assumption.
+ Qed.
+
+ Lemma Q1 : Q.
+ Proof.
+  cut (P -> R).
+  - intro H3.
+    cut T.
+    + intro H4; apply H1; assumption.
+    + apply H2; assumption.
+  -  intro p; apply H0; apply H; assumption.
+ Qed.
+
+ Lemma Q2 : Q.
+ Proof.
+  assert (H3 : P -> R).
+  - intro p; apply H0; apply H; assumption.
+  - assert (H4 : T).
+    + apply H2; assumption.
+    + apply H1; assumption.
+ Qed.
+
+
+ Lemma Q3 : Q.
+ Proof.   auto.  Qed.
+
+(** Looking at the proof terms ...
+
+ Print Q0.
+
+ Print Q1.
+
+ Print Q2.
+
+ Print Q3.
+*)
+
+End cutex.
\ No newline at end of file
diff --git a/data/benchmarks/coq-art/exo_frac.v b/data/benchmarks/coq-art/exo_frac.v
new file mode 100644
index 0000000..572af72
--- /dev/null
+++ b/data/benchmarks/coq-art/exo_frac.v
@@ -0,0 +1,89 @@
+Require Arith.
+Require Import Lia.
+
+
+Inductive F: Set :=
+| one : F (* 1 *)
+| n : F -> F (* 1 + f *)
+| d : F -> F (* 1 / (1 + (1 / f)) *)
+.
+
+Fixpoint  fraction (f : F) : nat * nat :=
+  match f with
+  | one => (1,1)
+  | n f' => let (a, b) := fraction f' in (a + b, b)
+  | d f' => let (a, b) := fraction f' in (a, a + b)
+  end.
+
+
+
+(** Test:
+Compute  fraction (d (d (n (d (d one))))).
+
+= (4, 11) : nat*nat
+
+ *)
+
+
+(****************************************************************************
+
+ bonus proof (for readers of chapter 8) :
+   Let us admit that a/b is irreducible if
+   there exists u, v in Z such that au+bv=1.
+   Then fraction f is irreducible for every f
+
+ *****************************************************************************)
+
+Require Import ZArith.
+
+Open Scope Z_scope.
+Inductive bezout (a b:nat): Prop :=
+  mk_bezout :  forall u v : Z,
+    (lt 0 a) ->
+    (lt 0 b) ->
+    (Z_of_nat a) * u +  (Z_of_nat b) * v = 1  ->
+    bezout a b.
+
+Lemma b_one : bezout 1 1.
+Proof.
+  split with 1 0 ; auto.
+Qed.
+
+Lemma b_n : forall a b : nat, bezout a b -> bezout (a + b)%nat b.
+Proof.
+  intros a b H; case H.
+  intros u v H0 HA e.
+  split with u (v-u).
+  -  auto. lia.
+  -  auto with arith.
+  -  rewrite inj_plus; ring_simplify. auto.
+Qed.
+
+Lemma b_d : forall a b : nat, bezout a b -> bezout a (a + b)%nat.
+Proof.
+  intros a b H; case H.
+  (* split with u (v-u). *)
+  intros u v H0 HA e.
+  split with (u-v) v.
+  - auto with arith.
+  - auto with arith.
+  - rewrite inj_plus; ring_simplify.
+      now rewrite (Zmult_comm v (Z_of_nat b)).
+Qed.
+
+#[export] Hint Resolve b_one b_d b_n : core.
+
+Inductive simplified : nat*nat -> Prop :=
+  mk_simpl : forall a b : nat, bezout a b -> simplified (a, b).
+
+
+Lemma fractionsimplified  : forall f : F,
+    simplified (fraction f).
+Proof.
+  simple induction f ; simpl.
+  -  split; auto.
+  -  intro f0; case (fraction f0).
+     inversion_clear 1; split; auto.
+  -  intro f0; case (fraction f0).
+     inversion_clear 1; split; auto.
+Qed.
\ No newline at end of file
diff --git a/data/benchmarks/coq-art/nth_length.v b/data/benchmarks/coq-art/nth_length.v
new file mode 100644
index 0000000..8f0eb41
--- /dev/null
+++ b/data/benchmarks/coq-art/nth_length.v
@@ -0,0 +1,26 @@
+Require Import List.
+Require Import Arith.
+Require Import Lia.
+
+Fixpoint nth_option {A:Type}(n:nat)(l:list A) 
+  : option A :=
+  match n, l with
+  | O, cons a _ =>  Some a
+  | S p, cons  _ tl => nth_option  p tl
+  | _, nil => None
+  end.
+
+Lemma nth_length {A : Type} : 
+  forall (n:nat)(l:list A), nth_option  n l = None <->
+                                   length l <= n.
+Proof.
+ induction n as [| p IHp].
+ -  destruct l; simpl; split; auto with arith.
+   +  discriminate 1.
+   +  inversion 1.
+ - intro l; destruct l as [ | a l'].
+   +  split. 
+      * auto with arith. 
+      * auto with arith.
+   +  simpl; rewrite (IHp l'); split; auto with arith.  
+Qed.
diff --git a/src/baselines/gpt4/few_shot_policy.py b/src/baselines/gpt4/few_shot_policy.py
index 6b11171..d814fcb 100644
--- a/src/baselines/gpt4/few_shot_policy.py
+++ b/src/baselines/gpt4/few_shot_policy.py
@@ -1,6 +1,7 @@
 #!/usr/bin/env python3
 
 import sys
+import json
 
 root_dir = f"{__file__.split('src')[0]}"
 if root_dir not in sys.path:
@@ -21,6 +22,10 @@ from src.rl.simple_proof_env import ProofEnvInfo
 from src.tools.informal_proof_repo import InformalProofRepo
 
 
+with open('tactic_index.json') as f:
+    TACTIC_INDEX = json.load(f)
+
+
 class FewShotGptPolicy(Policy):
     def __init__(self,
         lemma_name: str, 
@@ -145,7 +150,15 @@ class FewShotGptPolicy(Policy):
                 raise Exception(f"Unsupported language {self.language}")
             while not success and tries > 0:
                 try:
-                    responses = self._policy_prompter.run_prompt(gpt_response)
+                    # Should look up the index with state.theorem_name
+                    if state.theorem_name in TACTIC_INDEX['theorem_file']:
+                        theorem_file = TACTIC_INDEX['theorem_file'][state.theorem_name]
+                        custom_tactics = TACTIC_INDEX['custom_tactics'][theorem_file]
+                    else:
+                        custom_tactics = None
+                    responses = self._policy_prompter.run_prompt(
+                            gpt_response,
+                            custom_tactics_header=custom_tactics)
                     actions_tuple : typing.List[typing.Tuple[ProofAction, float]] = self._policy_prompter.parse_response(responses)
                     chosen_message = actions_tuple[0][0].original_message # Selecting only top action here
                     self.logger.info(f"Chosen message: \n\n{chosen_message['content']}")
@@ -182,4 +195,4 @@ class FewShotGptPolicy(Policy):
     def get_efficiency_info(self) -> typing.Dict[str, typing.Any]:
         return {
             "queries": self._policy_prompter.get_efficiency_info()["api_calls"],
-        }
\ No newline at end of file
+        }
diff --git a/src/baselines/gpt4/few_shot_policy_prompter.py b/src/baselines/gpt4/few_shot_policy_prompter.py
index 248d36f..8d3f394 100644
--- a/src/baselines/gpt4/few_shot_policy_prompter.py
+++ b/src/baselines/gpt4/few_shot_policy_prompter.py
@@ -120,7 +120,7 @@ class FewShotGptPolicyPrompter(PolicyPrompter):
         self._message_history_token_count.append(message_token_count)
         self._history_token_count += message_token_count
 
-    def _get_prompt_message(self, request: FewShotGptResponse, max_tokens_in_prompt: int):
+    def _get_prompt_message(self, request: FewShotGptResponse, max_tokens_in_prompt: int, custom_tactics_header: str = None):
         assert max_tokens_in_prompt > 0, "Max token per prompt must be greater than 0, please decrease max_tokens_per_action"
         characters_per_token = 5
         prompt_message_tokens_underlimit = False
@@ -133,9 +133,10 @@ class FewShotGptPolicyPrompter(PolicyPrompter):
             max_token_for_examples = 0
             max_token_for_problem = max_tokens_in_prompt
             retrieved_examples = [] 
-        # Also return the custom system messages here
+
         custom_system_messages = []
         custom_system_message_count = 0
+
         if self._retrieve_prompt_examples:
             custom_message_tokens_underlimit = False
             characters_per_token = 5
@@ -196,6 +197,19 @@ class FewShotGptPolicyPrompter(PolicyPrompter):
             characters_per_token -= 1
         assert prompt_token_count <= max_token_for_problem, f"Prompt token count {prompt_token_count} is greater than max token per prompt {max_token_for_problem}"
         assert prompt_token_count + custom_system_message_count <= max_tokens_in_prompt, f"Prompt token count {prompt_token_count} + custom system message token count {custom_system_message_count} is greater than max token per prompt {max_tokens_in_prompt}"
+
+        # Also return the custom system messages here
+        if custom_tactics_header is not None:
+            custom_system_message_count += 1
+            custom_system_messages.append({
+                'role': 'system',
+                'name': 'example_assistant',
+                'content':
+                    f'In your proof, you can use the following custom tactics that were defined for this particular domain:\n'
+                    f'{custom_tactics_header}'
+                    f'\nThese tactics are highly useful, and you should ALWAYS use them when appropriate to shorten your proofs. Remember, to use a custom tactic in Coq (e.g., suppose its name is t and takes 2 arguments), you can use `t arg1 arg2.` in your proof.'
+            })
+
         return prompt_message, prompt_token_count, custom_system_messages, custom_system_message_count
 
     def _constrain_tokens_in_history(self, prompt_message, custom_example_system_messages : typing.List[dict[str, str]], custom_system_message_count: int, prompt_token_count: int, max_tokens_per_action: int) -> list:
@@ -256,9 +270,10 @@ class FewShotGptPolicyPrompter(PolicyPrompter):
             self._rate_limiter.reset()
             self.logger.info("Rate limit reset now.")
 
-    def run_prompt(self, request: FewShotGptRequest) -> list:
+    def run_prompt(self, request: FewShotGptRequest, custom_tactics_header: str = None) -> list:
         max_tokens_in_prompt = self._max_token_per_prompt - self.system_token_count - self._max_tokens_per_action
-        prompt_message, prompt_token_count, custom_system_msg, custom_system_msg_cnt = self._get_prompt_message(request, max_tokens_in_prompt)
+        prompt_message, prompt_token_count, custom_system_msg, custom_system_msg_cnt = self._get_prompt_message(
+                request, max_tokens_in_prompt, custom_tactics_header=custom_tactics_header)
         messages, total_token_count = self._constrain_tokens_in_history(prompt_message, custom_system_msg, custom_system_msg_cnt, prompt_token_count, self._max_tokens_per_action)
         success = False
         retries = 3
@@ -359,4 +374,4 @@ class FewShotGptPolicyPrompter(PolicyPrompter):
     def get_efficiency_info(self) -> typing.Dict[str, typing.Any]:
         return {
             "api_calls": self._num_api_calls
-        }
\ No newline at end of file
+        }
diff --git a/src/gpts/gpt_access.py b/src/gpts/gpt_access.py
index 6afe765..20e9ada 100644
--- a/src/gpts/gpt_access.py
+++ b/src/gpts/gpt_access.py
@@ -156,6 +156,7 @@ class GptAccess(object):
             self.usage["prompt_tokens"] += usage.prompt_tokens
             self.usage["completion_tokens"] += usage.completion_tokens
             self.usage["total_tokens"] += usage.total_tokens
+        print(model, 'response:', response.choices)
         return_responses = [{"role": choice.message.role, "content": choice.message.content} for choice in response.choices]
         for i in range(len(return_responses) - 1):
             return_responses[i]["finish_reason"] = "stop"
@@ -262,4 +263,4 @@ if __name__ == "__main__":
         }
     ]
     print(openai_access.complete_chat(messages, max_tokens=15, n=2, temperature=0.8))
-    pass
\ No newline at end of file
+    pass
diff --git a/src/main/config/benchmark/coqart.yaml b/src/main/config/benchmark/coqart.yaml
new file mode 100644
index 0000000..13a786f
--- /dev/null
+++ b/src/main/config/benchmark/coqart.yaml
@@ -0,0 +1,24 @@
+name: coqart
+num_files: 1
+language: COQ
+few_shot_data_path_for_retrieval: .log/tools/coq_raw_proofs/data/benchmarks/CompCert/2023-09-06-03-44-06/CompCert/train
+few_shot_metadata_filename_for_retrieval: single.meta.json
+dfs_data_path_for_retrieval: .log/run_data_generation_transforms/data/benchmarks/CompCert/train
+dfs_metadata_filename_for_retrieval: local.meta.json
+datasets:
+  - project: data/benchmarks/coq-art
+    files:
+            #      - path: chap3.v
+            #        theorems: "*"
+      - path: chap5.v
+        theorems: "*"
+        #      - path: chap8.v
+        #theorems: "*"
+        #      - path: class.v
+        #        theorems: "*"
+        #      - path: cut_example.v
+        #        theorems: "*"
+        #        #- path: exo_frac.v
+        #        #theorems: "*"
+        #      - path: nth_length.v
+        #        theorems: "*"
diff --git a/src/main/eval_benchmark.py b/src/main/eval_benchmark.py
index 9f6db51..ee40944 100644
--- a/src/main/eval_benchmark.py
+++ b/src/main/eval_benchmark.py
@@ -178,6 +178,8 @@ def eval_dataset(env_settings: EnvSettings, eval_benchmark: EvalBenchmark, promp
                 try:
                     ret_dict["lemmas"] = get_all_lemmas(get_all_lemmas_proof_exec_callback, logger)
                 except:
+                    print('Error extracting lemmas')
+                    import traceback; traceback.print_exc()
                     logger.exception(f"Exception occurred while getting all lemmas in file: {path}")
             manager = multiprocessing.Manager()
             return_dict = manager.dict()
@@ -193,13 +195,15 @@ def eval_dataset(env_settings: EnvSettings, eval_benchmark: EvalBenchmark, promp
                 logger.warning("Restarted the PISA service.")
             file_time_out = min(720, eval_settings.timeout_in_secs * eval_settings.max_proof_depth * 50)
             logger.info(f"Getting all lemmas in file: {path} with timeout: {file_time_out} seconds")
-            p = multiprocessing.Process(target=_get_all_lemmas, args=(return_dict, logger))
-            p.start()
-            p.join(file_time_out)
-            if p.is_alive():
-                p.kill()
-                p.join()
-            p.close()
+            #p = multiprocessing.Process(target=_get_all_lemmas, args=(return_dict, logger))
+            _get_all_lemmas(return_dict, logger)
+            #p.start()
+            #p.join(file_time_out)
+            #if p.is_alive():
+            #    p.kill()
+            #    p.join()
+            #p.close()
+            print('get_all_lemmas return dict for', path, ':', return_dict['lemmas'])
             if "lemmas" not in return_dict:
                 logger.info(f"Failed to get all lemmas in file: {path}, moving on to the next file.")
                 continue
@@ -398,14 +402,15 @@ def eval_dataset(env_settings: EnvSettings, eval_benchmark: EvalBenchmark, promp
                             if track_time and time_budget_tracker[path][lemma_name] < timeout:
                                 timeout = time_budget_tracker[path][lemma_name]
                             logger.info(f"Running the prover agent for lemma: {lemma_name} with timeout: {timeout} seconds")
-                            p = multiprocessing.Process(target=_run_prover, args=(return_dict,))
+                            #p = multiprocessing.Process(target=_run_prover, args=(return_dict,))
                             tic_start = time.time()
-                            p.start()
-                            p.join(timeout)
-                            if p.is_alive():
-                                p.kill()
-                                p.join()
-                            p.close()
+                            _run_prover(return_dict)
+                            #p.start()
+                            #p.join(timeout)
+                            #if p.is_alive():
+                            #    p.kill()
+                            #    p.join()
+                            #p.close()
                             toc_end = time.time()
                             if eval_benchmark.language == ProofAction.Language.ISABELLE and \
                                 not IsabelleExecutor.check_server_running(logger) and \
@@ -542,6 +547,7 @@ def eval_benchmark(experiment: Experiments, log_dir: str, logger: logging.Logger
     # Load the checkpoint file if it exists
     checkpoint_file = os.path.join(eval_settings.checkpoint_dir, "checkpoint_info.json")
     if os.path.exists(checkpoint_file):
+        print('Checkpoint file exists:', checkpoint_file)
         with open(checkpoint_file, "r") as f:
             checkpoint_info: EvalRunCheckpointInfo = EvalRunCheckpointInfo.from_json(f.read())
         eval_settings.proof_dump_dir = checkpoint_info.proof_dump_dir
@@ -591,4 +597,4 @@ def main(cfg):
 
 if __name__ == "__main__":
     # RayUtils.init_ray(num_of_cpus=20, object_store_memory_in_gb=50, memory_in_gb=1)
-    main()
\ No newline at end of file
+    main()
-- 
2.25.1

