[
    {
        "lemma_name": "index_inj",
        "proof": [
            {
                "tactic_sig": "Lemma index_inj : forall x y , index x = index y -> x = y .",
                "tactic_sig_no_out_arg": "Lemma index_inj : forall x y , index x = index y -> x = y .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (x y : t) (_ : eq (index x) (index y)), eq x y"
                ]
            },
            {
                "tactic_sig": "intros _o _o .",
                "tactic_sig_no_out_arg": "intros x y .",
                "tactic_args": [
                    "c1_goal : forall (x y : t) (_ : eq (index x) (index y)), eq x y"
                ],
                "tactic_res": [
                    "c2_goal : forall _ : eq (index x) (index y), eq x y",
                    "c2_x : True",
                    "c2_y : True"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  | | ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c2_goal : forall _ : eq (index x) (index y), eq x y",
                    "c2_x : True",
                    "c2_y : True"
                ],
                "tactic_res": [
                    "c3_goal : forall _ : eq (index Full) (index y), eq Full y",
                    "c4_goal : forall _ : eq (index Low) (index y), eq Low y",
                    "c5_goal : forall _ : eq (index High) (index y), eq High y"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  | | ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c3_goal : forall _ : eq (index Full) (index y), eq Full y",
                    "c2_y : True"
                ],
                "tactic_res": [
                    "c6_goal : forall _ : eq (index Full) (index Full), eq Full Full",
                    "c7_goal : forall _ : eq (index Full) (index Low), eq Full Low",
                    "c8_goal : forall _ : eq (index Full) (index High), eq Full High"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c6_goal : forall _ : eq (index Full) (index Full), eq Full Full"
                ],
                "tactic_res": [
                    "c9_goal : forall _ : eq 1%positive 1%positive, eq Full Full"
                ]
            },
            {
                "tactic_sig": "congruence .",
                "tactic_sig_no_out_arg": "congruence .",
                "tactic_args": [
                    "c9_goal : forall _ : eq 1%positive 1%positive, eq Full Full"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c7_goal : forall _ : eq (index Full) (index Low), eq Full Low"
                ],
                "tactic_res": [
                    "c10_goal : forall _ : eq 1%positive 2%positive, eq Full Low"
                ]
            },
            {
                "tactic_sig": "congruence .",
                "tactic_sig_no_out_arg": "congruence .",
                "tactic_args": [
                    "c10_goal : forall _ : eq 1%positive 2%positive, eq Full Low"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c8_goal : forall _ : eq (index Full) (index High), eq Full High"
                ],
                "tactic_res": [
                    "c11_goal : forall _ : eq 1%positive 3%positive, eq Full High"
                ]
            },
            {
                "tactic_sig": "congruence .",
                "tactic_sig_no_out_arg": "congruence .",
                "tactic_args": [
                    "c11_goal : forall _ : eq 1%positive 3%positive, eq Full High"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [  | | ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c4_goal : forall _ : eq (index Low) (index y), eq Low y",
                    "c2_y : True"
                ],
                "tactic_res": [
                    "c12_goal : forall _ : eq (index Low) (index Full), eq Low Full",
                    "c13_goal : forall _ : eq (index Low) (index Low), eq Low Low",
                    "c14_goal : forall _ : eq (index Low) (index High), eq Low High"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c12_goal : forall _ : eq (index Low) (index Full), eq Low Full"
                ],
                "tactic_res": [
                    "c15_goal : forall _ : eq 2%positive 1%positive, eq Low Full"
                ]
            },
            {
                "tactic_sig": "congruence .",
                "tactic_sig_no_out_arg": "congruence .",
                "tactic_args": [
                    "c15_goal : forall _ : eq 2%positive 1%positive, eq Low Full"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c13_goal : forall _ : eq (index Low) (index Low), eq Low Low"
                ],
                "tactic_res": [
                    "c16_goal : forall _ : eq 2%positive 2%positive, eq Low Low"
                ]
            },
            {
                "tactic_sig": "congruence .",
                "tactic_sig_no_out_arg": "congruence .",
                "tactic_args": [
                    "c16_goal : forall _ : eq 2%positive 2%positive, eq Low Low"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c14_goal : forall _ : eq (index Low) (index High), eq Low High"
                ],
                "tactic_res": [
                    "c17_goal : forall _ : eq 2%positive 3%positive, eq Low High"
                ]
            },
            {
                "tactic_sig": "congruence .",
                "tactic_sig_no_out_arg": "congruence .",
                "tactic_args": [
                    "c17_goal : forall _ : eq 2%positive 3%positive, eq Low High"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [  | | ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c5_goal : forall _ : eq (index High) (index y), eq High y",
                    "c2_y : True"
                ],
                "tactic_res": [
                    "c18_goal : forall _ : eq (index High) (index Full), eq High Full",
                    "c19_goal : forall _ : eq (index High) (index Low), eq High Low",
                    "c20_goal : forall _ : eq (index High) (index High), eq High High"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c18_goal : forall _ : eq (index High) (index Full), eq High Full"
                ],
                "tactic_res": [
                    "c21_goal : forall _ : eq 3%positive 1%positive, eq High Full"
                ]
            },
            {
                "tactic_sig": "congruence .",
                "tactic_sig_no_out_arg": "congruence .",
                "tactic_args": [
                    "c21_goal : forall _ : eq 3%positive 1%positive, eq High Full"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c19_goal : forall _ : eq (index High) (index Low), eq High Low"
                ],
                "tactic_res": [
                    "c22_goal : forall _ : eq 3%positive 2%positive, eq High Low"
                ]
            },
            {
                "tactic_sig": "congruence .",
                "tactic_sig_no_out_arg": "congruence .",
                "tactic_args": [
                    "c22_goal : forall _ : eq 3%positive 2%positive, eq High Low"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c20_goal : forall _ : eq (index High) (index High), eq High High"
                ],
                "tactic_res": [
                    "c23_goal : forall _ : eq 3%positive 3%positive, eq High High"
                ]
            },
            {
                "tactic_sig": "congruence .",
                "tactic_sig_no_out_arg": "congruence .",
                "tactic_args": [
                    "c23_goal : forall _ : eq 3%positive 3%positive, eq High High"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "eq_refl",
        "proof": [
            {
                "tactic_sig": "Lemma eq_refl : forall x : t , eq x x .",
                "tactic_sig_no_out_arg": "Lemma eq_refl : forall x : t , eq x x .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall x : t, eq x x"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c1_goal : forall x : t, eq x x",
                    "_global_eq : forall (_ : t) (_ : t), Prop"
                ],
                "tactic_res": [
                    "c2_goal : forall x : t, Logic.eq x x"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c2_goal : forall x : t, Logic.eq x x"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "eq_sym",
        "proof": [
            {
                "tactic_sig": "Lemma eq_sym : forall x y : t , eq x y -> eq y x .",
                "tactic_sig_no_out_arg": "Lemma eq_sym : forall x y : t , eq x y -> eq y x .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (x y : t) (_ : eq x y), eq y x"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c1_goal : forall (x y : t) (_ : eq x y), eq y x",
                    "_global_eq : forall (_ : t) (_ : t), Prop"
                ],
                "tactic_res": [
                    "c2_goal : forall (x y : t) (_ : Logic.eq x y), Logic.eq y x"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c2_goal : forall (x y : t) (_ : Logic.eq x y), Logic.eq y x"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "eq_trans",
        "proof": [
            {
                "tactic_sig": "Lemma eq_trans : forall x y z : t , eq x y -> eq y z -> eq x z .",
                "tactic_sig_no_out_arg": "Lemma eq_trans : forall x y z : t , eq x y -> eq y z -> eq x z .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (x y z : t) (_ : eq x y) (_ : eq y z), eq x z"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c1_goal : forall (x y z : t) (_ : eq x y) (_ : eq y z), eq x z"
                ],
                "tactic_res": [
                    "c2_goal : eq x z",
                    "c2_x : True",
                    "c2_y : True",
                    "c2_z : True",
                    "c2_H : eq x y",
                    "c2_H0 : eq y z"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c2_goal : eq x z",
                    "_global_eq : forall (_ : t) (_ : t), Prop"
                ],
                "tactic_res": [
                    "c3_goal : Logic.eq x z"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c3_goal : Logic.eq x z",
                    "c2_H : eq x y"
                ],
                "tactic_res": [
                    "c4_goal : Logic.eq y z"
                ]
            },
            {
                "tactic_sig": "exact _i .",
                "tactic_sig_no_out_arg": "exact _i .",
                "tactic_args": [
                    "c4_goal : Logic.eq y z",
                    "c2_H0 : eq y z"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "lt_trans",
        "proof": [
            {
                "tactic_sig": "Lemma lt_trans : forall x y z : t , lt x y -> lt y z -> lt x z .",
                "tactic_sig_no_out_arg": "Lemma lt_trans : forall x y z : t , lt x y -> lt y z -> lt x z .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (x y z : t) (_ : lt x y) (_ : lt y z), lt x z"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c1_goal : forall (x y z : t) (_ : lt x y) (_ : lt y z), lt x z",
                    "_global_lt : forall (_ : t) (_ : t), Prop"
                ],
                "tactic_res": [
                    "c2_goal : forall (x y z : t)\n  (_ : or (Plt (ereg x) (ereg y))\n         (and (Logic.eq (ereg x) (ereg y))\n            (or (OrderedLoc.lt (eloc x) (eloc y))\n               (and (Logic.eq (eloc x) (eloc y))\n                  (OrderedEqKind.lt (ekind x) (ekind y))))))\n  (_ : or (Plt (ereg y) (ereg z))\n         (and (Logic.eq (ereg y) (ereg z))\n            (or (OrderedLoc.lt (eloc y) (eloc z))\n               (and (Logic.eq (eloc y) (eloc z))\n                  (OrderedEqKind.lt (ekind y) (ekind z)))))),\nor (Plt (ereg x) (ereg z))\n  (and (Logic.eq (ereg x) (ereg z))\n     (or (OrderedLoc.lt (eloc x) (eloc z))\n        (and (Logic.eq (eloc x) (eloc z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c2_goal : forall (x y z : t)\n  (_ : or (Plt (ereg x) (ereg y))\n         (and (Logic.eq (ereg x) (ereg y))\n            (or (OrderedLoc.lt (eloc x) (eloc y))\n               (and (Logic.eq (eloc x) (eloc y))\n                  (OrderedEqKind.lt (ekind x) (ekind y))))))\n  (_ : or (Plt (ereg y) (ereg z))\n         (and (Logic.eq (ereg y) (ereg z))\n            (or (OrderedLoc.lt (eloc y) (eloc z))\n               (and (Logic.eq (eloc y) (eloc z))\n                  (OrderedEqKind.lt (ekind y) (ekind z)))))),\nor (Plt (ereg x) (ereg z))\n  (and (Logic.eq (ereg x) (ereg z))\n     (or (OrderedLoc.lt (eloc x) (eloc z))\n        (and (Logic.eq (eloc x) (eloc z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))"
                ],
                "tactic_res": [
                    "c3_goal : or (Plt (ereg x) (ereg z))\n  (and (Logic.eq (ereg x) (ereg z))\n     (or (OrderedLoc.lt (eloc x) (eloc z))\n        (and (Logic.eq (eloc x) (eloc z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))",
                    "c3_x : True",
                    "c3_y : True",
                    "c3_z : True",
                    "c3_H : or (Plt (ereg x) (ereg y))\n  (and (Logic.eq (ereg x) (ereg y))\n     (or (OrderedLoc.lt (eloc x) (eloc y))\n        (and (Logic.eq (eloc x) (eloc y))\n           (OrderedEqKind.lt (ekind x) (ekind y)))))",
                    "c3_H0 : or (Plt (ereg y) (ereg z))\n  (and (Logic.eq (ereg y) (ereg z))\n     (or (OrderedLoc.lt (eloc y) (eloc z))\n        (and (Logic.eq (eloc y) (eloc z))\n           (OrderedEqKind.lt (ekind y) (ekind z)))))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c3_goal : or (Plt (ereg x) (ereg z))\n  (and (Logic.eq (ereg x) (ereg z))\n     (or (OrderedLoc.lt (eloc x) (eloc z))\n        (and (Logic.eq (eloc x) (eloc z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))",
                    "c3_H : or (Plt (ereg x) (ereg y))\n  (and (Logic.eq (ereg x) (ereg y))\n     (or (OrderedLoc.lt (eloc x) (eloc y))\n        (and (Logic.eq (eloc x) (eloc y))\n           (OrderedEqKind.lt (ekind x) (ekind y)))))",
                    "c3_H0 : or (Plt (ereg y) (ereg z))\n  (and (Logic.eq (ereg y) (ereg z))\n     (or (OrderedLoc.lt (eloc y) (eloc z))\n        (and (Logic.eq (eloc y) (eloc z))\n           (OrderedEqKind.lt (ekind y) (ekind z)))))",
                    "c3_x : True",
                    "c3_z : True"
                ],
                "tactic_res": [
                    "c4_goal : or (Plt (ereg x) (ereg z))\n  (and (Logic.eq (ereg x) (ereg z))\n     (or (OrderedLoc.lt (eloc x) (eloc z))\n        (and (Logic.eq (eloc x) (eloc z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))",
                    "c4_H : Plt (ereg x) (ereg y)",
                    "c5_goal : or (Plt (ereg x) (ereg z))\n  (and (Logic.eq (ereg x) (ereg z))\n     (or (OrderedLoc.lt (eloc x) (eloc z))\n        (and (Logic.eq (eloc x) (eloc z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))",
                    "c5_H : and (Logic.eq (ereg x) (ereg y))\n  (or (OrderedLoc.lt (eloc x) (eloc y))\n     (and (Logic.eq (eloc x) (eloc y))\n        (OrderedEqKind.lt (ekind x) (ekind y))))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c4_goal : or (Plt (ereg x) (ereg z))\n  (and (Logic.eq (ereg x) (ereg z))\n     (or (OrderedLoc.lt (eloc x) (eloc z))\n        (and (Logic.eq (eloc x) (eloc z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))",
                    "c3_H0 : or (Plt (ereg y) (ereg z))\n  (and (Logic.eq (ereg y) (ereg z))\n     (or (OrderedLoc.lt (eloc y) (eloc z))\n        (and (Logic.eq (eloc y) (eloc z))\n           (OrderedEqKind.lt (ekind y) (ekind z)))))",
                    "c4_H : Plt (ereg x) (ereg y)",
                    "c3_x : True",
                    "c3_z : True"
                ],
                "tactic_res": [
                    "c6_goal : or (Plt (ereg x) (ereg z))\n  (and (Logic.eq (ereg x) (ereg z))\n     (or (OrderedLoc.lt (eloc x) (eloc z))\n        (and (Logic.eq (eloc x) (eloc z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))",
                    "c6_H0 : Plt (ereg y) (ereg z)",
                    "c7_goal : or (Plt (ereg x) (ereg z))\n  (and (Logic.eq (ereg x) (ereg z))\n     (or (OrderedLoc.lt (eloc x) (eloc z))\n        (and (Logic.eq (eloc x) (eloc z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))",
                    "c7_H0 : and (Logic.eq (ereg y) (ereg z))\n  (or (OrderedLoc.lt (eloc y) (eloc z))\n     (and (Logic.eq (eloc y) (eloc z))\n        (OrderedEqKind.lt (ekind y) (ekind z))))"
                ]
            },
            {
                "tactic_sig": "left .",
                "tactic_sig_no_out_arg": "left .",
                "tactic_args": [
                    "c6_goal : or (Plt (ereg x) (ereg z))\n  (and (Logic.eq (ereg x) (ereg z))\n     (or (OrderedLoc.lt (eloc x) (eloc z))\n        (and (Logic.eq (eloc x) (eloc z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))"
                ],
                "tactic_res": [
                    "c8_goal : Plt (ereg x) (ereg z)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c8_goal : Plt (ereg x) (ereg z)",
                    "_global_Plt_trans : forall (x y z : positive) (_ : Plt x y) (_ : Plt y z), Plt x z"
                ],
                "tactic_res": [
                    "c9_goal : Plt (ereg x) ?y",
                    "c10_goal : Plt (ereg y) (ereg z)"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c9_goal : Plt (ereg x) ?y",
                    "c4_H : Plt (ereg x) (ereg y)",
                    "c3_x : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c10_goal : Plt (ereg y) (ereg z)",
                    "c6_H0 : Plt (ereg y) (ereg z)",
                    "c3_y : True",
                    "c3_z : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c7_H0 : and (Logic.eq (ereg y) (ereg z))\n  (or (OrderedLoc.lt (eloc y) (eloc z))\n     (and (Logic.eq (eloc y) (eloc z))\n        (OrderedEqKind.lt (ekind y) (ekind z))))",
                    "c4_H : Plt (ereg x) (ereg y)",
                    "c3_x : True",
                    "c3_z : True"
                ],
                "tactic_res": [
                    "c7_H1 : or (OrderedLoc.lt (eloc y) (eloc z))\n  (and (Logic.eq (eloc y) (eloc z))\n     (OrderedEqKind.lt (ekind y) (ekind z)))",
                    "c7_H0 : Logic.eq (ereg y) (ereg z)"
                ]
            },
            {
                "tactic_sig": "rewrite <- _i .",
                "tactic_sig_no_out_arg": "rewrite <- _i .",
                "tactic_args": [
                    "c7_goal : or (Plt (ereg x) (ereg z))\n  (and (Logic.eq (ereg x) (ereg z))\n     (or (OrderedLoc.lt (eloc x) (eloc z))\n        (and (Logic.eq (eloc x) (eloc z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))",
                    "c7_H0 : Logic.eq (ereg y) (ereg z)"
                ],
                "tactic_res": [
                    "c11_goal : or (Plt (ereg x) (ereg y))\n  (and (Logic.eq (ereg x) (ereg y))\n     (or (OrderedLoc.lt (eloc x) (eloc z))\n        (and (Logic.eq (eloc x) (eloc z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c11_goal : or (Plt (ereg x) (ereg y))\n  (and (Logic.eq (ereg x) (ereg y))\n     (or (OrderedLoc.lt (eloc x) (eloc z))\n        (and (Logic.eq (eloc x) (eloc z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))",
                    "c4_H : Plt (ereg x) (ereg y)",
                    "c3_x : True",
                    "c3_y : True",
                    "c3_z : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c5_H : and (Logic.eq (ereg x) (ereg y))\n  (or (OrderedLoc.lt (eloc x) (eloc y))\n     (and (Logic.eq (eloc x) (eloc y))\n        (OrderedEqKind.lt (ekind x) (ekind y))))",
                    "c3_H0 : or (Plt (ereg y) (ereg z))\n  (and (Logic.eq (ereg y) (ereg z))\n     (or (OrderedLoc.lt (eloc y) (eloc z))\n        (and (Logic.eq (eloc y) (eloc z))\n           (OrderedEqKind.lt (ekind y) (ekind z)))))",
                    "c3_x : True",
                    "c3_z : True"
                ],
                "tactic_res": [
                    "c5_H1 : or (OrderedLoc.lt (eloc x) (eloc y))\n  (and (Logic.eq (eloc x) (eloc y))\n     (OrderedEqKind.lt (ekind x) (ekind y)))",
                    "c5_H : Logic.eq (ereg x) (ereg y)"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c5_goal : or (Plt (ereg x) (ereg z))\n  (and (Logic.eq (ereg x) (ereg z))\n     (or (OrderedLoc.lt (eloc x) (eloc z))\n        (and (Logic.eq (eloc x) (eloc z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))",
                    "c5_H : Logic.eq (ereg x) (ereg y)"
                ],
                "tactic_res": [
                    "c12_goal : or (Plt (ereg y) (ereg z))\n  (and (Logic.eq (ereg y) (ereg z))\n     (or (OrderedLoc.lt (eloc x) (eloc z))\n        (and (Logic.eq (eloc x) (eloc z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c12_goal : or (Plt (ereg y) (ereg z))\n  (and (Logic.eq (ereg y) (ereg z))\n     (or (OrderedLoc.lt (eloc x) (eloc z))\n        (and (Logic.eq (eloc x) (eloc z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))",
                    "c3_H0 : or (Plt (ereg y) (ereg z))\n  (and (Logic.eq (ereg y) (ereg z))\n     (or (OrderedLoc.lt (eloc y) (eloc z))\n        (and (Logic.eq (eloc y) (eloc z))\n           (OrderedEqKind.lt (ekind y) (ekind z)))))",
                    "c5_H1 : or (OrderedLoc.lt (eloc x) (eloc y))\n  (and (Logic.eq (eloc x) (eloc y))\n     (OrderedEqKind.lt (ekind x) (ekind y)))",
                    "c5_H : Logic.eq (ereg x) (ereg y)",
                    "c3_x : True",
                    "c3_y : True",
                    "c3_z : True"
                ],
                "tactic_res": [
                    "c13_goal : or (Plt (ereg y) (ereg z))\n  (and (Logic.eq (ereg y) (ereg z))\n     (or (OrderedLoc.lt (eloc x) (eloc z))\n        (and (Logic.eq (eloc x) (eloc z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))",
                    "c13_H0 : Plt (ereg y) (ereg z)",
                    "c14_goal : or (Plt (ereg y) (ereg z))\n  (and (Logic.eq (ereg y) (ereg z))\n     (or (OrderedLoc.lt (eloc x) (eloc z))\n        (and (Logic.eq (eloc x) (eloc z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))",
                    "c14_H0 : and (Logic.eq (ereg y) (ereg z))\n  (or (OrderedLoc.lt (eloc y) (eloc z))\n     (and (Logic.eq (eloc y) (eloc z))\n        (OrderedEqKind.lt (ekind y) (ekind z))))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c13_goal : or (Plt (ereg y) (ereg z))\n  (and (Logic.eq (ereg y) (ereg z))\n     (or (OrderedLoc.lt (eloc x) (eloc z))\n        (and (Logic.eq (eloc x) (eloc z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))",
                    "c13_H0 : Plt (ereg y) (ereg z)",
                    "c3_x : True",
                    "c3_y : True",
                    "c3_z : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c14_H0 : and (Logic.eq (ereg y) (ereg z))\n  (or (OrderedLoc.lt (eloc y) (eloc z))\n     (and (Logic.eq (eloc y) (eloc z))\n        (OrderedEqKind.lt (ekind y) (ekind z))))",
                    "c5_H1 : or (OrderedLoc.lt (eloc x) (eloc y))\n  (and (Logic.eq (eloc x) (eloc y))\n     (OrderedEqKind.lt (ekind x) (ekind y)))",
                    "c5_H : Logic.eq (ereg x) (ereg y)",
                    "c3_x : True",
                    "c3_y : True",
                    "c3_z : True"
                ],
                "tactic_res": [
                    "c14_H2 : or (OrderedLoc.lt (eloc y) (eloc z))\n  (and (Logic.eq (eloc y) (eloc z))\n     (OrderedEqKind.lt (ekind y) (ekind z)))",
                    "c14_H0 : Logic.eq (ereg y) (ereg z)"
                ]
            },
            {
                "tactic_sig": "right .",
                "tactic_sig_no_out_arg": "right .",
                "tactic_args": [
                    "c14_goal : or (Plt (ereg y) (ereg z))\n  (and (Logic.eq (ereg y) (ereg z))\n     (or (OrderedLoc.lt (eloc x) (eloc z))\n        (and (Logic.eq (eloc x) (eloc z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))"
                ],
                "tactic_res": [
                    "c15_goal : and (Logic.eq (ereg y) (ereg z))\n  (or (OrderedLoc.lt (eloc x) (eloc z))\n     (and (Logic.eq (eloc x) (eloc z))\n        (OrderedEqKind.lt (ekind x) (ekind z))))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c15_goal : and (Logic.eq (ereg y) (ereg z))\n  (or (OrderedLoc.lt (eloc x) (eloc z))\n     (and (Logic.eq (eloc x) (eloc z))\n        (OrderedEqKind.lt (ekind x) (ekind z))))"
                ],
                "tactic_res": [
                    "c16_goal : Logic.eq (ereg y) (ereg z)",
                    "c17_goal : or (OrderedLoc.lt (eloc x) (eloc z))\n  (and (Logic.eq (eloc x) (eloc z))\n     (OrderedEqKind.lt (ekind x) (ekind z)))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c16_goal : Logic.eq (ereg y) (ereg z)",
                    "c14_H0 : Logic.eq (ereg y) (ereg z)",
                    "c3_y : True",
                    "c3_z : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "intuition .",
                "tactic_sig_no_out_arg": "intuition .",
                "tactic_args": [
                    "c17_goal : or (OrderedLoc.lt (eloc x) (eloc z))\n  (and (Logic.eq (eloc x) (eloc z))\n     (OrderedEqKind.lt (ekind x) (ekind z)))",
                    "c14_H2 : or (OrderedLoc.lt (eloc y) (eloc z))\n  (and (Logic.eq (eloc y) (eloc z))\n     (OrderedEqKind.lt (ekind y) (ekind z)))",
                    "c14_H0 : Logic.eq (ereg y) (ereg z)",
                    "c5_H1 : or (OrderedLoc.lt (eloc x) (eloc y))\n  (and (Logic.eq (eloc x) (eloc y))\n     (OrderedEqKind.lt (ekind x) (ekind y)))",
                    "c5_H : Logic.eq (ereg x) (ereg y)",
                    "c3_x : True",
                    "c3_z : True"
                ],
                "tactic_res": [
                    "c18_goal : or (OrderedLoc.lt (eloc x) (eloc z))\n  (and (Logic.eq (eloc x) (eloc z))\n     (OrderedEqKind.lt (ekind x) (ekind z)))",
                    "c18_H1 : OrderedLoc.lt (eloc y) (eloc z)",
                    "c18_H3 : OrderedLoc.lt (eloc x) (eloc y)",
                    "c19_goal : or (OrderedLoc.lt (eloc x) (eloc z))\n  (and (Logic.eq (eloc x) (eloc z))\n     (OrderedEqKind.lt (ekind x) (ekind z)))",
                    "c19_H4 : OrderedEqKind.lt (ekind y) (ekind z)",
                    "c19_H2 : Logic.eq (eloc y) (eloc z)",
                    "c19_H3 : OrderedLoc.lt (eloc x) (eloc y)",
                    "c20_goal : or (OrderedLoc.lt (eloc x) (eloc z))\n  (and (Logic.eq (eloc x) (eloc z))\n     (OrderedEqKind.lt (ekind x) (ekind z)))",
                    "c20_H3 : OrderedLoc.lt (eloc y) (eloc z)",
                    "c20_H4 : OrderedEqKind.lt (ekind x) (ekind y)",
                    "c20_H1 : Logic.eq (eloc x) (eloc y)",
                    "c21_goal : or (OrderedLoc.lt (eloc x) (eloc z))\n  (and (Logic.eq (eloc x) (eloc z))\n     (OrderedEqKind.lt (ekind x) (ekind z)))",
                    "c21_H5 : OrderedEqKind.lt (ekind y) (ekind z)",
                    "c21_H2 : Logic.eq (eloc y) (eloc z)",
                    "c21_H4 : OrderedEqKind.lt (ekind x) (ekind y)",
                    "c21_H1 : Logic.eq (eloc x) (eloc y)"
                ]
            },
            {
                "tactic_sig": "left .",
                "tactic_sig_no_out_arg": "left .",
                "tactic_args": [
                    "c18_goal : or (OrderedLoc.lt (eloc x) (eloc z))\n  (and (Logic.eq (eloc x) (eloc z))\n     (OrderedEqKind.lt (ekind x) (ekind z)))"
                ],
                "tactic_res": [
                    "c22_goal : OrderedLoc.lt (eloc x) (eloc z)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c22_goal : OrderedLoc.lt (eloc x) (eloc z)",
                    "_global_OrderedLoc.lt_trans : forall (x y z : OrderedLoc.t) (_ : OrderedLoc.lt x y)\n         (_ : OrderedLoc.lt y z), OrderedLoc.lt x z"
                ],
                "tactic_res": [
                    "c23_goal : OrderedLoc.lt (eloc x) ?y",
                    "c24_goal : OrderedLoc.lt (eloc y) (eloc z)"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c23_goal : OrderedLoc.lt (eloc x) ?y",
                    "c18_H3 : OrderedLoc.lt (eloc x) (eloc y)",
                    "c3_x : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c24_goal : OrderedLoc.lt (eloc y) (eloc z)",
                    "c18_H1 : OrderedLoc.lt (eloc y) (eloc z)",
                    "c3_y : True",
                    "c3_z : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "left .",
                "tactic_sig_no_out_arg": "left .",
                "tactic_args": [
                    "c19_goal : or (OrderedLoc.lt (eloc x) (eloc z))\n  (and (Logic.eq (eloc x) (eloc z))\n     (OrderedEqKind.lt (ekind x) (ekind z)))"
                ],
                "tactic_res": [
                    "c25_goal : OrderedLoc.lt (eloc x) (eloc z)"
                ]
            },
            {
                "tactic_sig": "congruence .",
                "tactic_sig_no_out_arg": "congruence .",
                "tactic_args": [
                    "c25_goal : OrderedLoc.lt (eloc x) (eloc z)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "left .",
                "tactic_sig_no_out_arg": "left .",
                "tactic_args": [
                    "c20_goal : or (OrderedLoc.lt (eloc x) (eloc z))\n  (and (Logic.eq (eloc x) (eloc z))\n     (OrderedEqKind.lt (ekind x) (ekind z)))"
                ],
                "tactic_res": [
                    "c26_goal : OrderedLoc.lt (eloc x) (eloc z)"
                ]
            },
            {
                "tactic_sig": "congruence .",
                "tactic_sig_no_out_arg": "congruence .",
                "tactic_args": [
                    "c26_goal : OrderedLoc.lt (eloc x) (eloc z)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "right .",
                "tactic_sig_no_out_arg": "right .",
                "tactic_args": [
                    "c21_goal : or (OrderedLoc.lt (eloc x) (eloc z))\n  (and (Logic.eq (eloc x) (eloc z))\n     (OrderedEqKind.lt (ekind x) (ekind z)))"
                ],
                "tactic_res": [
                    "c27_goal : and (Logic.eq (eloc x) (eloc z)) (OrderedEqKind.lt (ekind x) (ekind z))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c27_goal : and (Logic.eq (eloc x) (eloc z)) (OrderedEqKind.lt (ekind x) (ekind z))"
                ],
                "tactic_res": [
                    "c28_goal : Logic.eq (eloc x) (eloc z)",
                    "c29_goal : OrderedEqKind.lt (ekind x) (ekind z)"
                ]
            },
            {
                "tactic_sig": "congruence .",
                "tactic_sig_no_out_arg": "congruence .",
                "tactic_args": [
                    "c28_goal : Logic.eq (eloc x) (eloc z)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c29_goal : OrderedEqKind.lt (ekind x) (ekind z)",
                    "_global_OrderedEqKind.lt_trans : forall (x y z : OrderedEqKind.t) (_ : OrderedEqKind.lt x y)\n         (_ : OrderedEqKind.lt y z), OrderedEqKind.lt x z"
                ],
                "tactic_res": [
                    "c30_goal : OrderedEqKind.lt (ekind x) ?y",
                    "c31_goal : OrderedEqKind.lt (ekind y) (ekind z)"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c30_goal : OrderedEqKind.lt (ekind x) ?y",
                    "c21_H4 : OrderedEqKind.lt (ekind x) (ekind y)",
                    "c3_x : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c31_goal : OrderedEqKind.lt (ekind y) (ekind z)",
                    "c21_H5 : OrderedEqKind.lt (ekind y) (ekind z)",
                    "c3_y : True",
                    "c3_z : True"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "lt_not_eq",
        "proof": [
            {
                "tactic_sig": "Lemma lt_not_eq : forall x y : t , lt x y -> ~ eq x y .",
                "tactic_sig_no_out_arg": "Lemma lt_not_eq : forall x y : t , lt x y -> ~ eq x y .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (x y : t) (_ : lt x y), not (eq x y)"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c1_goal : forall (x y : t) (_ : lt x y), not (eq x y)",
                    "_global_lt : forall (_ : t) (_ : t), Prop"
                ],
                "tactic_res": [
                    "c2_goal : forall (x y : t)\n  (_ : or (Plt (ereg x) (ereg y))\n         (and (Logic.eq (ereg x) (ereg y))\n            (or (OrderedLoc.lt (eloc x) (eloc y))\n               (and (Logic.eq (eloc x) (eloc y))\n                  (OrderedEqKind.lt (ekind x) (ekind y)))))),\nnot (eq x y)"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c2_goal : forall (x y : t)\n  (_ : or (Plt (ereg x) (ereg y))\n         (and (Logic.eq (ereg x) (ereg y))\n            (or (OrderedLoc.lt (eloc x) (eloc y))\n               (and (Logic.eq (eloc x) (eloc y))\n                  (OrderedEqKind.lt (ekind x) (ekind y)))))),\nnot (eq x y)",
                    "_global_eq : forall (_ : t) (_ : t), Prop"
                ],
                "tactic_res": [
                    "c3_goal : forall (x y : t)\n  (_ : or (Plt (ereg x) (ereg y))\n         (and (Logic.eq (ereg x) (ereg y))\n            (or (OrderedLoc.lt (eloc x) (eloc y))\n               (and (Logic.eq (eloc x) (eloc y))\n                  (OrderedEqKind.lt (ekind x) (ekind y)))))),\nnot (Logic.eq x y)"
                ]
            },
            {
                "tactic_sig": "red .",
                "tactic_sig_no_out_arg": "red .",
                "tactic_args": [
                    "c3_goal : forall (x y : t)\n  (_ : or (Plt (ereg x) (ereg y))\n         (and (Logic.eq (ereg x) (ereg y))\n            (or (OrderedLoc.lt (eloc x) (eloc y))\n               (and (Logic.eq (eloc x) (eloc y))\n                  (OrderedEqKind.lt (ekind x) (ekind y)))))),\nnot (Logic.eq x y)"
                ],
                "tactic_res": [
                    "c4_goal : forall (x y : t)\n  (_ : or (Plt (ereg x) (ereg y))\n         (and (Logic.eq (ereg x) (ereg y))\n            (or (OrderedLoc.lt (eloc x) (eloc y))\n               (and (Logic.eq (eloc x) (eloc y))\n                  (OrderedEqKind.lt (ekind x) (ekind y))))))\n  (_ : Logic.eq x y), False"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c4_goal : forall (x y : t)\n  (_ : or (Plt (ereg x) (ereg y))\n         (and (Logic.eq (ereg x) (ereg y))\n            (or (OrderedLoc.lt (eloc x) (eloc y))\n               (and (Logic.eq (eloc x) (eloc y))\n                  (OrderedEqKind.lt (ekind x) (ekind y))))))\n  (_ : Logic.eq x y), False"
                ],
                "tactic_res": [
                    "c5_goal : False",
                    "c5_x : True",
                    "c5_y : True",
                    "c5_H : or (Plt (ereg x) (ereg y))\n  (and (Logic.eq (ereg x) (ereg y))\n     (or (OrderedLoc.lt (eloc x) (eloc y))\n        (and (Logic.eq (eloc x) (eloc y))\n           (OrderedEqKind.lt (ekind x) (ekind y)))))",
                    "c5_H0 : Logic.eq x y"
                ]
            },
            {
                "tactic_sig": "subst _i .",
                "tactic_sig_no_out_arg": "subst _i .",
                "tactic_args": [
                    "c5_y : True",
                    "c5_H0 : Logic.eq x y"
                ],
                "tactic_res": [
                    "c5_H : or (Plt (ereg x) (ereg x))\n  (and (Logic.eq (ereg x) (ereg x))\n     (or (OrderedLoc.lt (eloc x) (eloc x))\n        (and (Logic.eq (eloc x) (eloc x))\n           (OrderedEqKind.lt (ekind x) (ekind x)))))"
                ]
            },
            {
                "tactic_sig": "intuition .",
                "tactic_sig_no_out_arg": "intuition .",
                "tactic_args": [
                    "c5_goal : False",
                    "c5_H : or (Plt (ereg x) (ereg x))\n  (and (Logic.eq (ereg x) (ereg x))\n     (or (OrderedLoc.lt (eloc x) (eloc x))\n        (and (Logic.eq (eloc x) (eloc x))\n           (OrderedEqKind.lt (ekind x) (ekind x)))))"
                ],
                "tactic_res": [
                    "c6_goal : False",
                    "c6_H0 : Plt (ereg x) (ereg x)",
                    "c7_goal : False",
                    "c7_H0 : OrderedLoc.lt (eloc x) (eloc x)",
                    "c7_H : Logic.eq (ereg x) (ereg x)",
                    "c8_goal : False",
                    "c8_H2 : OrderedEqKind.lt (ekind x) (ekind x)",
                    "c8_H1 : Logic.eq (eloc x) (eloc x)",
                    "c8_H : Logic.eq (ereg x) (ereg x)"
                ]
            },
            {
                "tactic_sig": "eelim Plt_strict .",
                "tactic_sig_no_out_arg": "eelim Plt_strict .",
                "tactic_args": [
                    "c6_goal : False"
                ],
                "tactic_res": [
                    "c9_goal : Plt ?p ?p"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c9_goal : Plt ?p ?p",
                    "c6_H0 : Plt (ereg x) (ereg x)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eelim OrderedLoc.lt_not_eq .",
                "tactic_sig_no_out_arg": "eelim OrderedLoc.lt_not_eq .",
                "tactic_args": [
                    "c7_goal : False"
                ],
                "tactic_res": [
                    "c10_goal : OrderedLoc.lt ?x ?y",
                    "c11_goal : OrderedLoc.eq (eloc x) (eloc x)"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c10_goal : OrderedLoc.lt ?x ?y",
                    "c7_H0 : OrderedLoc.lt (eloc x) (eloc x)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "red .",
                "tactic_sig_no_out_arg": "red .",
                "tactic_args": [
                    "c11_goal : OrderedLoc.eq (eloc x) (eloc x)"
                ],
                "tactic_res": [
                    "c12_goal : Logic.eq (eloc x) (eloc x)"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c12_goal : Logic.eq (eloc x) (eloc x)",
                    "c5_x : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eelim OrderedEqKind.lt_not_eq .",
                "tactic_sig_no_out_arg": "eelim OrderedEqKind.lt_not_eq .",
                "tactic_args": [
                    "c8_goal : False"
                ],
                "tactic_res": [
                    "c13_goal : OrderedEqKind.lt ?x ?y",
                    "c14_goal : OrderedEqKind.eq (ekind x) (ekind x)"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c13_goal : OrderedEqKind.lt ?x ?y",
                    "c8_H2 : OrderedEqKind.lt (ekind x) (ekind x)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "red .",
                "tactic_sig_no_out_arg": "red .",
                "tactic_args": [
                    "c14_goal : OrderedEqKind.eq (ekind x) (ekind x)"
                ],
                "tactic_res": [
                    "c15_goal : Logic.eq (ekind x) (ekind x)"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c15_goal : Logic.eq (ekind x) (ekind x)",
                    "c5_x : True"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "compare",
        "proof": [
            {
                "tactic_sig": "Definition compare : forall x y : t , Compare lt eq x y .",
                "tactic_sig_no_out_arg": "Definition compare : forall x y : t , Compare lt eq x y .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall x y : t, Compare lt eq x y"
                ]
            },
            {
                "tactic_sig": "intros _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c1_goal : forall x y : t, Compare lt eq x y"
                ],
                "tactic_res": [
                    "c2_goal : Compare lt eq x y",
                    "c2_x : True",
                    "c2_y : True"
                ]
            },
            {
                "tactic_sig": "destruct ( OrderedPositive.compare ( ereg _i ) ( ereg _i ) ) as [  _o | _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct ( OrderedPositive.compare ( ereg _i ) ( ereg _i ) ) .",
                "tactic_args": [
                    "c2_goal : Compare lt eq x y",
                    "c2_x : True",
                    "c2_y : True"
                ],
                "tactic_res": [
                    "c3_goal : Compare lt eq x y",
                    "c3_l : OrderedPositive.lt (ereg x) (ereg y)",
                    "c4_goal : Compare lt eq x y",
                    "c4_e : OrderedPositive.eq (ereg x) (ereg y)",
                    "c5_goal : Compare lt eq x y",
                    "c5_l : OrderedPositive.lt (ereg y) (ereg x)"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c3_goal : Compare lt eq x y",
                    "_global_LT : forall (X : Type) (lt eq : forall (_ : X) (_ : X), Prop) \n         (x y : X) (_ : lt x y), Compare lt eq x y"
                ],
                "tactic_res": [
                    "c6_goal : lt x y"
                ]
            },
            {
                "tactic_sig": "red .",
                "tactic_sig_no_out_arg": "red .",
                "tactic_args": [
                    "c6_goal : lt x y"
                ],
                "tactic_res": [
                    "c7_goal : or (Plt (ereg x) (ereg y))\n  (and (Logic.eq (ereg x) (ereg y))\n     (or (OrderedLoc.lt (eloc x) (eloc y))\n        (and (Logic.eq (eloc x) (eloc y))\n           (OrderedEqKind.lt (ekind x) (ekind y)))))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c7_goal : or (Plt (ereg x) (ereg y))\n  (and (Logic.eq (ereg x) (ereg y))\n     (or (OrderedLoc.lt (eloc x) (eloc y))\n        (and (Logic.eq (eloc x) (eloc y))\n           (OrderedEqKind.lt (ekind x) (ekind y)))))",
                    "c3_l : OrderedPositive.lt (ereg x) (ereg y)",
                    "c2_x : True",
                    "c2_y : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct ( OrderedLoc.compare ( eloc _i ) ( eloc _i ) ) as [  _o | _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct ( OrderedLoc.compare ( eloc _i ) ( eloc _i ) ) .",
                "tactic_args": [
                    "c4_goal : Compare lt eq x y",
                    "c2_x : True",
                    "c2_y : True",
                    "c4_e : OrderedPositive.eq (ereg x) (ereg y)"
                ],
                "tactic_res": [
                    "c8_goal : Compare lt eq x y",
                    "c8_l : OrderedLoc.lt (eloc x) (eloc y)",
                    "c9_goal : Compare lt eq x y",
                    "c9_e0 : OrderedLoc.eq (eloc x) (eloc y)",
                    "c10_goal : Compare lt eq x y",
                    "c10_l : OrderedLoc.lt (eloc y) (eloc x)"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c8_goal : Compare lt eq x y",
                    "_global_LT : forall (X : Type) (lt eq : forall (_ : X) (_ : X), Prop) \n         (x y : X) (_ : lt x y), Compare lt eq x y"
                ],
                "tactic_res": [
                    "c11_goal : lt x y"
                ]
            },
            {
                "tactic_sig": "red .",
                "tactic_sig_no_out_arg": "red .",
                "tactic_args": [
                    "c11_goal : lt x y"
                ],
                "tactic_res": [
                    "c12_goal : or (Plt (ereg x) (ereg y))\n  (and (Logic.eq (ereg x) (ereg y))\n     (or (OrderedLoc.lt (eloc x) (eloc y))\n        (and (Logic.eq (eloc x) (eloc y))\n           (OrderedEqKind.lt (ekind x) (ekind y)))))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c12_goal : or (Plt (ereg x) (ereg y))\n  (and (Logic.eq (ereg x) (ereg y))\n     (or (OrderedLoc.lt (eloc x) (eloc y))\n        (and (Logic.eq (eloc x) (eloc y))\n           (OrderedEqKind.lt (ekind x) (ekind y)))))",
                    "c8_l : OrderedLoc.lt (eloc x) (eloc y)",
                    "c4_e : OrderedPositive.eq (ereg x) (ereg y)",
                    "c2_x : True",
                    "c2_y : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct ( OrderedEqKind.compare ( ekind _i ) ( ekind _i ) ) as [  _o | _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct ( OrderedEqKind.compare ( ekind _i ) ( ekind _i ) ) .",
                "tactic_args": [
                    "c9_goal : Compare lt eq x y",
                    "c2_x : True",
                    "c2_y : True",
                    "c9_e0 : OrderedLoc.eq (eloc x) (eloc y)",
                    "c4_e : OrderedPositive.eq (ereg x) (ereg y)"
                ],
                "tactic_res": [
                    "c13_goal : Compare lt eq x y",
                    "c13_l : OrderedEqKind.lt (ekind x) (ekind y)",
                    "c14_goal : Compare lt eq x y",
                    "c14_e1 : OrderedEqKind.eq (ekind x) (ekind y)",
                    "c15_goal : Compare lt eq x y",
                    "c15_l : OrderedEqKind.lt (ekind y) (ekind x)"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c13_goal : Compare lt eq x y",
                    "_global_LT : forall (X : Type) (lt eq : forall (_ : X) (_ : X), Prop) \n         (x y : X) (_ : lt x y), Compare lt eq x y"
                ],
                "tactic_res": [
                    "c16_goal : lt x y"
                ]
            },
            {
                "tactic_sig": "red .",
                "tactic_sig_no_out_arg": "red .",
                "tactic_args": [
                    "c16_goal : lt x y"
                ],
                "tactic_res": [
                    "c17_goal : or (Plt (ereg x) (ereg y))\n  (and (Logic.eq (ereg x) (ereg y))\n     (or (OrderedLoc.lt (eloc x) (eloc y))\n        (and (Logic.eq (eloc x) (eloc y))\n           (OrderedEqKind.lt (ekind x) (ekind y)))))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c17_goal : or (Plt (ereg x) (ereg y))\n  (and (Logic.eq (ereg x) (ereg y))\n     (or (OrderedLoc.lt (eloc x) (eloc y))\n        (and (Logic.eq (eloc x) (eloc y))\n           (OrderedEqKind.lt (ekind x) (ekind y)))))",
                    "c13_l : OrderedEqKind.lt (ekind x) (ekind y)",
                    "c9_e0 : OrderedLoc.eq (eloc x) (eloc y)",
                    "c4_e : OrderedPositive.eq (ereg x) (ereg y)",
                    "c2_x : True",
                    "c2_y : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c14_goal : Compare lt eq x y",
                    "_global_EQ : forall (X : Type) (lt eq : forall (_ : X) (_ : X), Prop) \n         (x y : X) (_ : eq x y), Compare lt eq x y"
                ],
                "tactic_res": [
                    "c18_goal : eq x y"
                ]
            },
            {
                "tactic_sig": "red in _i .",
                "tactic_sig_no_out_arg": "red in _i .",
                "tactic_args": [
                    "c18_e : OrderedPositive.eq (ereg x) (ereg y)"
                ],
                "tactic_res": [
                    "c18_e : Logic.eq (ereg x) (ereg y)"
                ]
            },
            {
                "tactic_sig": "red in _i .",
                "tactic_sig_no_out_arg": "red in _i .",
                "tactic_args": [
                    "c18_e0 : OrderedLoc.eq (eloc x) (eloc y)"
                ],
                "tactic_res": [
                    "c18_e0 : Logic.eq (eloc x) (eloc y)"
                ]
            },
            {
                "tactic_sig": "red in _i .",
                "tactic_sig_no_out_arg": "red in _i .",
                "tactic_args": [
                    "c18_e1 : OrderedEqKind.eq (ekind x) (ekind y)"
                ],
                "tactic_res": [
                    "c18_e1 : Logic.eq (ekind x) (ekind y)"
                ]
            },
            {
                "tactic_sig": "red .",
                "tactic_sig_no_out_arg": "red .",
                "tactic_args": [
                    "c18_goal : eq x y"
                ],
                "tactic_res": [
                    "c19_goal : Logic.eq x y"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ ??? ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ ??? ] .",
                "tactic_args": [
                    "c19_goal : Logic.eq x y",
                    "c2_x : True",
                    "c18_e1 : Logic.eq (ekind x) (ekind y)",
                    "c18_e0 : Logic.eq (eloc x) (eloc y)",
                    "c18_e : Logic.eq (ereg x) (ereg y)",
                    "c2_y : True"
                ],
                "tactic_res": [
                    "c20_goal : Logic.eq {| ekind := ekind0; ereg := ereg0; eloc := eloc0 |} y",
                    "c20_e1 : Logic.eq (ekind {| ekind := ekind0; ereg := ereg0; eloc := eloc0 |})\n  (ekind y)",
                    "c20_e0 : Logic.eq (eloc {| ekind := ekind0; ereg := ereg0; eloc := eloc0 |})\n  (eloc y)",
                    "c20_e : Logic.eq (ereg {| ekind := ekind0; ereg := ereg0; eloc := eloc0 |})\n  (ereg y)",
                    "c20_eloc0 : loc",
                    "c20_ereg0 : reg",
                    "c20_ekind0 : equation_kind"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ ??? ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ ??? ] .",
                "tactic_args": [
                    "c20_goal : Logic.eq {| ekind := ekind0; ereg := ereg0; eloc := eloc0 |} y",
                    "c2_y : True",
                    "c20_e1 : Logic.eq (ekind {| ekind := ekind0; ereg := ereg0; eloc := eloc0 |})\n  (ekind y)",
                    "c20_e0 : Logic.eq (eloc {| ekind := ekind0; ereg := ereg0; eloc := eloc0 |})\n  (eloc y)",
                    "c20_e : Logic.eq (ereg {| ekind := ekind0; ereg := ereg0; eloc := eloc0 |})\n  (ereg y)",
                    "c20_eloc0 : loc",
                    "c20_ereg0 : reg",
                    "c20_ekind0 : equation_kind"
                ],
                "tactic_res": [
                    "c21_goal : Logic.eq {| ekind := ekind0; ereg := ereg0; eloc := eloc0 |}\n  {| ekind := ekind1; ereg := ereg1; eloc := eloc1 |}",
                    "c21_e1 : Logic.eq (ekind {| ekind := ekind0; ereg := ereg0; eloc := eloc0 |})\n  (ekind {| ekind := ekind1; ereg := ereg1; eloc := eloc1 |})",
                    "c21_e0 : Logic.eq (eloc {| ekind := ekind0; ereg := ereg0; eloc := eloc0 |})\n  (eloc {| ekind := ekind1; ereg := ereg1; eloc := eloc1 |})",
                    "c21_e : Logic.eq (ereg {| ekind := ekind0; ereg := ereg0; eloc := eloc0 |})\n  (ereg {| ekind := ekind1; ereg := ereg1; eloc := eloc1 |})",
                    "c21_eloc1 : loc",
                    "c21_ereg1 : reg",
                    "c21_ekind1 : equation_kind"
                ]
            },
            {
                "tactic_sig": "congruence .",
                "tactic_sig_no_out_arg": "congruence .",
                "tactic_args": [
                    "c21_goal : Logic.eq {| ekind := ekind0; ereg := ereg0; eloc := eloc0 |}\n  {| ekind := ekind1; ereg := ereg1; eloc := eloc1 |}"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c15_goal : Compare lt eq x y",
                    "_global_GT : forall (X : Type) (lt eq : forall (_ : X) (_ : X), Prop) \n         (x y : X) (_ : lt y x), Compare lt eq x y"
                ],
                "tactic_res": [
                    "c22_goal : lt y x"
                ]
            },
            {
                "tactic_sig": "red .",
                "tactic_sig_no_out_arg": "red .",
                "tactic_args": [
                    "c22_goal : lt y x"
                ],
                "tactic_res": [
                    "c23_goal : or (Plt (ereg y) (ereg x))\n  (and (Logic.eq (ereg y) (ereg x))\n     (or (OrderedLoc.lt (eloc y) (eloc x))\n        (and (Logic.eq (eloc y) (eloc x))\n           (OrderedEqKind.lt (ekind y) (ekind x)))))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c23_goal : or (Plt (ereg y) (ereg x))\n  (and (Logic.eq (ereg y) (ereg x))\n     (or (OrderedLoc.lt (eloc y) (eloc x))\n        (and (Logic.eq (eloc y) (eloc x))\n           (OrderedEqKind.lt (ekind y) (ekind x)))))",
                    "c15_l : OrderedEqKind.lt (ekind y) (ekind x)",
                    "c9_e0 : OrderedLoc.eq (eloc x) (eloc y)",
                    "c4_e : OrderedPositive.eq (ereg x) (ereg y)",
                    "c2_x : True",
                    "c2_y : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c10_goal : Compare lt eq x y",
                    "_global_GT : forall (X : Type) (lt eq : forall (_ : X) (_ : X), Prop) \n         (x y : X) (_ : lt y x), Compare lt eq x y"
                ],
                "tactic_res": [
                    "c24_goal : lt y x"
                ]
            },
            {
                "tactic_sig": "red .",
                "tactic_sig_no_out_arg": "red .",
                "tactic_args": [
                    "c24_goal : lt y x"
                ],
                "tactic_res": [
                    "c25_goal : or (Plt (ereg y) (ereg x))\n  (and (Logic.eq (ereg y) (ereg x))\n     (or (OrderedLoc.lt (eloc y) (eloc x))\n        (and (Logic.eq (eloc y) (eloc x))\n           (OrderedEqKind.lt (ekind y) (ekind x)))))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c25_goal : or (Plt (ereg y) (ereg x))\n  (and (Logic.eq (ereg y) (ereg x))\n     (or (OrderedLoc.lt (eloc y) (eloc x))\n        (and (Logic.eq (eloc y) (eloc x))\n           (OrderedEqKind.lt (ekind y) (ekind x)))))",
                    "c10_l : OrderedLoc.lt (eloc y) (eloc x)",
                    "c4_e : OrderedPositive.eq (ereg x) (ereg y)",
                    "c2_x : True",
                    "c2_y : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c5_goal : Compare lt eq x y",
                    "_global_GT : forall (X : Type) (lt eq : forall (_ : X) (_ : X), Prop) \n         (x y : X) (_ : lt y x), Compare lt eq x y"
                ],
                "tactic_res": [
                    "c26_goal : lt y x"
                ]
            },
            {
                "tactic_sig": "red .",
                "tactic_sig_no_out_arg": "red .",
                "tactic_args": [
                    "c26_goal : lt y x"
                ],
                "tactic_res": [
                    "c27_goal : or (Plt (ereg y) (ereg x))\n  (and (Logic.eq (ereg y) (ereg x))\n     (or (OrderedLoc.lt (eloc y) (eloc x))\n        (and (Logic.eq (eloc y) (eloc x))\n           (OrderedEqKind.lt (ekind y) (ekind x)))))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c27_goal : or (Plt (ereg y) (ereg x))\n  (and (Logic.eq (ereg y) (ereg x))\n     (or (OrderedLoc.lt (eloc y) (eloc x))\n        (and (Logic.eq (eloc y) (eloc x))\n           (OrderedEqKind.lt (ekind y) (ekind x)))))",
                    "c5_l : OrderedPositive.lt (ereg y) (ereg x)",
                    "c2_x : True",
                    "c2_y : True"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "eq_dec",
        "proof": [
            {
                "tactic_sig": "Definition eq_dec ( x y : t ) : { x = y } + { x <> y } .",
                "tactic_sig_no_out_arg": "Definition eq_dec ( x y : t ) : { x = y } + { x <> y } .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : sumbool (Logic.eq x y) (not (Logic.eq x y))",
                    "c1_y : True",
                    "c1_x : True"
                ]
            },
            {
                "tactic_sig": "decide equality .",
                "tactic_sig_no_out_arg": "decide equality .",
                "tactic_args": [
                    "c1_goal : sumbool (Logic.eq x y) (not (Logic.eq x y))"
                ],
                "tactic_res": [
                    "c2_goal : sumbool (Logic.eq eloc0 eloc1) (not (Logic.eq eloc0 eloc1))",
                    "c2_a0 : Logic.eq ereg0 ereg1",
                    "c2_a : Logic.eq ekind0 ekind1",
                    "c2_eloc1 : loc",
                    "c2_ereg1 : reg",
                    "c2_ekind1 : equation_kind",
                    "c2_eloc0 : loc",
                    "c2_ereg0 : reg",
                    "c2_ekind0 : equation_kind",
                    "c3_goal : sumbool (Logic.eq ereg0 ereg1) (not (Logic.eq ereg0 ereg1))",
                    "c3_a : Logic.eq ekind0 ekind1",
                    "c3_eloc1 : loc",
                    "c3_ereg1 : reg",
                    "c3_ekind1 : equation_kind",
                    "c3_eloc0 : loc",
                    "c3_ereg0 : reg",
                    "c3_ekind0 : equation_kind",
                    "c4_goal : sumbool (Logic.eq ekind0 ekind1) (not (Logic.eq ekind0 ekind1))",
                    "c4_eloc1 : loc",
                    "c4_ereg1 : reg",
                    "c4_ekind1 : equation_kind",
                    "c4_eloc0 : loc",
                    "c4_ereg0 : reg",
                    "c4_ekind0 : equation_kind"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c2_goal : sumbool (Logic.eq eloc0 eloc1) (not (Logic.eq eloc0 eloc1))",
                    "_global_Loc.eq : forall p q : loc, sumbool (Logic.eq p q) (not (Logic.eq p q))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c3_goal : sumbool (Logic.eq ereg0 ereg1) (not (Logic.eq ereg0 ereg1))",
                    "_global_peq : forall x y : positive, sumbool (Logic.eq x y) (not (Logic.eq x y))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c4_goal : sumbool (Logic.eq ekind0 ekind1) (not (Logic.eq ekind0 ekind1))",
                    "_global_IndexedEqKind.eq : forall x y : IndexedEqKind.t,\n       sumbool (Logic.eq x y) (not (Logic.eq x y))"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "eq_refl",
        "proof": [
            {
                "tactic_sig": "Lemma eq_refl : forall x : t , eq x x .",
                "tactic_sig_no_out_arg": "Lemma eq_refl : forall x : t , eq x x .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall x : t, eq x x"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c1_goal : forall x : t, eq x x",
                    "_global_eq : forall (_ : t) (_ : t), Prop"
                ],
                "tactic_res": [
                    "c2_goal : forall x : t, Logic.eq x x"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c2_goal : forall x : t, Logic.eq x x"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "eq_sym",
        "proof": [
            {
                "tactic_sig": "Lemma eq_sym : forall x y : t , eq x y -> eq y x .",
                "tactic_sig_no_out_arg": "Lemma eq_sym : forall x y : t , eq x y -> eq y x .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (x y : t) (_ : eq x y), eq y x"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c1_goal : forall (x y : t) (_ : eq x y), eq y x",
                    "_global_eq : forall (_ : t) (_ : t), Prop"
                ],
                "tactic_res": [
                    "c2_goal : forall (x y : t) (_ : Logic.eq x y), Logic.eq y x"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c2_goal : forall (x y : t) (_ : Logic.eq x y), Logic.eq y x"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "eq_trans",
        "proof": [
            {
                "tactic_sig": "Lemma eq_trans : forall x y z : t , eq x y -> eq y z -> eq x z .",
                "tactic_sig_no_out_arg": "Lemma eq_trans : forall x y z : t , eq x y -> eq y z -> eq x z .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (x y z : t) (_ : eq x y) (_ : eq y z), eq x z"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c1_goal : forall (x y z : t) (_ : eq x y) (_ : eq y z), eq x z",
                    "_global_eq : forall (_ : t) (_ : t), Prop"
                ],
                "tactic_res": [
                    "c2_goal : forall (x y z : t) (_ : Logic.eq x y) (_ : Logic.eq y z), Logic.eq x z"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c2_goal : forall (x y z : t) (_ : Logic.eq x y) (_ : Logic.eq y z), Logic.eq x z"
                ],
                "tactic_res": [
                    "c3_goal : Logic.eq x z",
                    "c3_x : True",
                    "c3_y : True",
                    "c3_z : True",
                    "c3_H : Logic.eq x y",
                    "c3_H0 : Logic.eq y z"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c3_goal : Logic.eq x z",
                    "c3_H : Logic.eq x y"
                ],
                "tactic_res": [
                    "c4_goal : Logic.eq y z"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c4_goal : Logic.eq y z",
                    "c3_H0 : Logic.eq y z",
                    "c3_y : True",
                    "c3_z : True"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "lt_trans",
        "proof": [
            {
                "tactic_sig": "Lemma lt_trans : forall x y z : t , lt x y -> lt y z -> lt x z .",
                "tactic_sig_no_out_arg": "Lemma lt_trans : forall x y z : t , lt x y -> lt y z -> lt x z .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (x y z : t) (_ : lt x y) (_ : lt y z), lt x z"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c1_goal : forall (x y z : t) (_ : lt x y) (_ : lt y z), lt x z",
                    "_global_lt : forall (_ : t) (_ : t), Prop"
                ],
                "tactic_res": [
                    "c2_goal : forall (x y z : t)\n  (_ : or (OrderedLoc.lt (eloc x) (eloc y))\n         (and (Logic.eq (eloc x) (eloc y))\n            (or (Plt (ereg x) (ereg y))\n               (and (Logic.eq (ereg x) (ereg y))\n                  (OrderedEqKind.lt (ekind x) (ekind y))))))\n  (_ : or (OrderedLoc.lt (eloc y) (eloc z))\n         (and (Logic.eq (eloc y) (eloc z))\n            (or (Plt (ereg y) (ereg z))\n               (and (Logic.eq (ereg y) (ereg z))\n                  (OrderedEqKind.lt (ekind y) (ekind z)))))),\nor (OrderedLoc.lt (eloc x) (eloc z))\n  (and (Logic.eq (eloc x) (eloc z))\n     (or (Plt (ereg x) (ereg z))\n        (and (Logic.eq (ereg x) (ereg z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c2_goal : forall (x y z : t)\n  (_ : or (OrderedLoc.lt (eloc x) (eloc y))\n         (and (Logic.eq (eloc x) (eloc y))\n            (or (Plt (ereg x) (ereg y))\n               (and (Logic.eq (ereg x) (ereg y))\n                  (OrderedEqKind.lt (ekind x) (ekind y))))))\n  (_ : or (OrderedLoc.lt (eloc y) (eloc z))\n         (and (Logic.eq (eloc y) (eloc z))\n            (or (Plt (ereg y) (ereg z))\n               (and (Logic.eq (ereg y) (ereg z))\n                  (OrderedEqKind.lt (ekind y) (ekind z)))))),\nor (OrderedLoc.lt (eloc x) (eloc z))\n  (and (Logic.eq (eloc x) (eloc z))\n     (or (Plt (ereg x) (ereg z))\n        (and (Logic.eq (ereg x) (ereg z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))"
                ],
                "tactic_res": [
                    "c3_goal : or (OrderedLoc.lt (eloc x) (eloc z))\n  (and (Logic.eq (eloc x) (eloc z))\n     (or (Plt (ereg x) (ereg z))\n        (and (Logic.eq (ereg x) (ereg z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))",
                    "c3_x : True",
                    "c3_y : True",
                    "c3_z : True",
                    "c3_H : or (OrderedLoc.lt (eloc x) (eloc y))\n  (and (Logic.eq (eloc x) (eloc y))\n     (or (Plt (ereg x) (ereg y))\n        (and (Logic.eq (ereg x) (ereg y))\n           (OrderedEqKind.lt (ekind x) (ekind y)))))",
                    "c3_H0 : or (OrderedLoc.lt (eloc y) (eloc z))\n  (and (Logic.eq (eloc y) (eloc z))\n     (or (Plt (ereg y) (ereg z))\n        (and (Logic.eq (ereg y) (ereg z))\n           (OrderedEqKind.lt (ekind y) (ekind z)))))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c3_goal : or (OrderedLoc.lt (eloc x) (eloc z))\n  (and (Logic.eq (eloc x) (eloc z))\n     (or (Plt (ereg x) (ereg z))\n        (and (Logic.eq (ereg x) (ereg z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))",
                    "c3_H : or (OrderedLoc.lt (eloc x) (eloc y))\n  (and (Logic.eq (eloc x) (eloc y))\n     (or (Plt (ereg x) (ereg y))\n        (and (Logic.eq (ereg x) (ereg y))\n           (OrderedEqKind.lt (ekind x) (ekind y)))))",
                    "c3_H0 : or (OrderedLoc.lt (eloc y) (eloc z))\n  (and (Logic.eq (eloc y) (eloc z))\n     (or (Plt (ereg y) (ereg z))\n        (and (Logic.eq (ereg y) (ereg z))\n           (OrderedEqKind.lt (ekind y) (ekind z)))))",
                    "c3_x : True",
                    "c3_z : True"
                ],
                "tactic_res": [
                    "c4_goal : or (OrderedLoc.lt (eloc x) (eloc z))\n  (and (Logic.eq (eloc x) (eloc z))\n     (or (Plt (ereg x) (ereg z))\n        (and (Logic.eq (ereg x) (ereg z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))",
                    "c4_H : OrderedLoc.lt (eloc x) (eloc y)",
                    "c5_goal : or (OrderedLoc.lt (eloc x) (eloc z))\n  (and (Logic.eq (eloc x) (eloc z))\n     (or (Plt (ereg x) (ereg z))\n        (and (Logic.eq (ereg x) (ereg z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))",
                    "c5_H : and (Logic.eq (eloc x) (eloc y))\n  (or (Plt (ereg x) (ereg y))\n     (and (Logic.eq (ereg x) (ereg y))\n        (OrderedEqKind.lt (ekind x) (ekind y))))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c4_goal : or (OrderedLoc.lt (eloc x) (eloc z))\n  (and (Logic.eq (eloc x) (eloc z))\n     (or (Plt (ereg x) (ereg z))\n        (and (Logic.eq (ereg x) (ereg z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))",
                    "c3_H0 : or (OrderedLoc.lt (eloc y) (eloc z))\n  (and (Logic.eq (eloc y) (eloc z))\n     (or (Plt (ereg y) (ereg z))\n        (and (Logic.eq (ereg y) (ereg z))\n           (OrderedEqKind.lt (ekind y) (ekind z)))))",
                    "c4_H : OrderedLoc.lt (eloc x) (eloc y)",
                    "c3_x : True",
                    "c3_z : True"
                ],
                "tactic_res": [
                    "c6_goal : or (OrderedLoc.lt (eloc x) (eloc z))\n  (and (Logic.eq (eloc x) (eloc z))\n     (or (Plt (ereg x) (ereg z))\n        (and (Logic.eq (ereg x) (ereg z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))",
                    "c6_H0 : OrderedLoc.lt (eloc y) (eloc z)",
                    "c7_goal : or (OrderedLoc.lt (eloc x) (eloc z))\n  (and (Logic.eq (eloc x) (eloc z))\n     (or (Plt (ereg x) (ereg z))\n        (and (Logic.eq (ereg x) (ereg z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))",
                    "c7_H0 : and (Logic.eq (eloc y) (eloc z))\n  (or (Plt (ereg y) (ereg z))\n     (and (Logic.eq (ereg y) (ereg z))\n        (OrderedEqKind.lt (ekind y) (ekind z))))"
                ]
            },
            {
                "tactic_sig": "left .",
                "tactic_sig_no_out_arg": "left .",
                "tactic_args": [
                    "c6_goal : or (OrderedLoc.lt (eloc x) (eloc z))\n  (and (Logic.eq (eloc x) (eloc z))\n     (or (Plt (ereg x) (ereg z))\n        (and (Logic.eq (ereg x) (ereg z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))"
                ],
                "tactic_res": [
                    "c8_goal : OrderedLoc.lt (eloc x) (eloc z)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c8_goal : OrderedLoc.lt (eloc x) (eloc z)",
                    "_global_OrderedLoc.lt_trans : forall (x y z : OrderedLoc.t) (_ : OrderedLoc.lt x y)\n         (_ : OrderedLoc.lt y z), OrderedLoc.lt x z"
                ],
                "tactic_res": [
                    "c9_goal : OrderedLoc.lt (eloc x) ?y",
                    "c10_goal : OrderedLoc.lt (eloc y) (eloc z)"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c9_goal : OrderedLoc.lt (eloc x) ?y",
                    "c4_H : OrderedLoc.lt (eloc x) (eloc y)",
                    "c3_x : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c10_goal : OrderedLoc.lt (eloc y) (eloc z)",
                    "c6_H0 : OrderedLoc.lt (eloc y) (eloc z)",
                    "c3_y : True",
                    "c3_z : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c7_H0 : and (Logic.eq (eloc y) (eloc z))\n  (or (Plt (ereg y) (ereg z))\n     (and (Logic.eq (ereg y) (ereg z))\n        (OrderedEqKind.lt (ekind y) (ekind z))))",
                    "c4_H : OrderedLoc.lt (eloc x) (eloc y)",
                    "c3_x : True",
                    "c3_z : True"
                ],
                "tactic_res": [
                    "c7_H1 : or (Plt (ereg y) (ereg z))\n  (and (Logic.eq (ereg y) (ereg z))\n     (OrderedEqKind.lt (ekind y) (ekind z)))",
                    "c7_H0 : Logic.eq (eloc y) (eloc z)"
                ]
            },
            {
                "tactic_sig": "rewrite <- _i .",
                "tactic_sig_no_out_arg": "rewrite <- _i .",
                "tactic_args": [
                    "c7_goal : or (OrderedLoc.lt (eloc x) (eloc z))\n  (and (Logic.eq (eloc x) (eloc z))\n     (or (Plt (ereg x) (ereg z))\n        (and (Logic.eq (ereg x) (ereg z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))",
                    "c7_H0 : Logic.eq (eloc y) (eloc z)"
                ],
                "tactic_res": [
                    "c11_goal : or (OrderedLoc.lt (eloc x) (eloc y))\n  (and (Logic.eq (eloc x) (eloc y))\n     (or (Plt (ereg x) (ereg z))\n        (and (Logic.eq (ereg x) (ereg z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c11_goal : or (OrderedLoc.lt (eloc x) (eloc y))\n  (and (Logic.eq (eloc x) (eloc y))\n     (or (Plt (ereg x) (ereg z))\n        (and (Logic.eq (ereg x) (ereg z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))",
                    "c4_H : OrderedLoc.lt (eloc x) (eloc y)",
                    "c3_x : True",
                    "c3_y : True",
                    "c3_z : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c5_H : and (Logic.eq (eloc x) (eloc y))\n  (or (Plt (ereg x) (ereg y))\n     (and (Logic.eq (ereg x) (ereg y))\n        (OrderedEqKind.lt (ekind x) (ekind y))))",
                    "c3_H0 : or (OrderedLoc.lt (eloc y) (eloc z))\n  (and (Logic.eq (eloc y) (eloc z))\n     (or (Plt (ereg y) (ereg z))\n        (and (Logic.eq (ereg y) (ereg z))\n           (OrderedEqKind.lt (ekind y) (ekind z)))))",
                    "c3_x : True",
                    "c3_z : True"
                ],
                "tactic_res": [
                    "c5_H1 : or (Plt (ereg x) (ereg y))\n  (and (Logic.eq (ereg x) (ereg y))\n     (OrderedEqKind.lt (ekind x) (ekind y)))",
                    "c5_H : Logic.eq (eloc x) (eloc y)"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c5_goal : or (OrderedLoc.lt (eloc x) (eloc z))\n  (and (Logic.eq (eloc x) (eloc z))\n     (or (Plt (ereg x) (ereg z))\n        (and (Logic.eq (ereg x) (ereg z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))",
                    "c5_H : Logic.eq (eloc x) (eloc y)"
                ],
                "tactic_res": [
                    "c12_goal : or (OrderedLoc.lt (eloc y) (eloc z))\n  (and (Logic.eq (eloc y) (eloc z))\n     (or (Plt (ereg x) (ereg z))\n        (and (Logic.eq (ereg x) (ereg z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c12_goal : or (OrderedLoc.lt (eloc y) (eloc z))\n  (and (Logic.eq (eloc y) (eloc z))\n     (or (Plt (ereg x) (ereg z))\n        (and (Logic.eq (ereg x) (ereg z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))",
                    "c3_H0 : or (OrderedLoc.lt (eloc y) (eloc z))\n  (and (Logic.eq (eloc y) (eloc z))\n     (or (Plt (ereg y) (ereg z))\n        (and (Logic.eq (ereg y) (ereg z))\n           (OrderedEqKind.lt (ekind y) (ekind z)))))",
                    "c5_H1 : or (Plt (ereg x) (ereg y))\n  (and (Logic.eq (ereg x) (ereg y))\n     (OrderedEqKind.lt (ekind x) (ekind y)))",
                    "c5_H : Logic.eq (eloc x) (eloc y)",
                    "c3_x : True",
                    "c3_y : True",
                    "c3_z : True"
                ],
                "tactic_res": [
                    "c13_goal : or (OrderedLoc.lt (eloc y) (eloc z))\n  (and (Logic.eq (eloc y) (eloc z))\n     (or (Plt (ereg x) (ereg z))\n        (and (Logic.eq (ereg x) (ereg z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))",
                    "c13_H0 : OrderedLoc.lt (eloc y) (eloc z)",
                    "c14_goal : or (OrderedLoc.lt (eloc y) (eloc z))\n  (and (Logic.eq (eloc y) (eloc z))\n     (or (Plt (ereg x) (ereg z))\n        (and (Logic.eq (ereg x) (ereg z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))",
                    "c14_H0 : and (Logic.eq (eloc y) (eloc z))\n  (or (Plt (ereg y) (ereg z))\n     (and (Logic.eq (ereg y) (ereg z))\n        (OrderedEqKind.lt (ekind y) (ekind z))))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c13_goal : or (OrderedLoc.lt (eloc y) (eloc z))\n  (and (Logic.eq (eloc y) (eloc z))\n     (or (Plt (ereg x) (ereg z))\n        (and (Logic.eq (ereg x) (ereg z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))",
                    "c13_H0 : OrderedLoc.lt (eloc y) (eloc z)",
                    "c3_x : True",
                    "c3_y : True",
                    "c3_z : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c14_H0 : and (Logic.eq (eloc y) (eloc z))\n  (or (Plt (ereg y) (ereg z))\n     (and (Logic.eq (ereg y) (ereg z))\n        (OrderedEqKind.lt (ekind y) (ekind z))))",
                    "c5_H1 : or (Plt (ereg x) (ereg y))\n  (and (Logic.eq (ereg x) (ereg y))\n     (OrderedEqKind.lt (ekind x) (ekind y)))",
                    "c5_H : Logic.eq (eloc x) (eloc y)",
                    "c3_x : True",
                    "c3_y : True",
                    "c3_z : True"
                ],
                "tactic_res": [
                    "c14_H2 : or (Plt (ereg y) (ereg z))\n  (and (Logic.eq (ereg y) (ereg z))\n     (OrderedEqKind.lt (ekind y) (ekind z)))",
                    "c14_H0 : Logic.eq (eloc y) (eloc z)"
                ]
            },
            {
                "tactic_sig": "right .",
                "tactic_sig_no_out_arg": "right .",
                "tactic_args": [
                    "c14_goal : or (OrderedLoc.lt (eloc y) (eloc z))\n  (and (Logic.eq (eloc y) (eloc z))\n     (or (Plt (ereg x) (ereg z))\n        (and (Logic.eq (ereg x) (ereg z))\n           (OrderedEqKind.lt (ekind x) (ekind z)))))"
                ],
                "tactic_res": [
                    "c15_goal : and (Logic.eq (eloc y) (eloc z))\n  (or (Plt (ereg x) (ereg z))\n     (and (Logic.eq (ereg x) (ereg z))\n        (OrderedEqKind.lt (ekind x) (ekind z))))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c15_goal : and (Logic.eq (eloc y) (eloc z))\n  (or (Plt (ereg x) (ereg z))\n     (and (Logic.eq (ereg x) (ereg z))\n        (OrderedEqKind.lt (ekind x) (ekind z))))"
                ],
                "tactic_res": [
                    "c16_goal : Logic.eq (eloc y) (eloc z)",
                    "c17_goal : or (Plt (ereg x) (ereg z))\n  (and (Logic.eq (ereg x) (ereg z))\n     (OrderedEqKind.lt (ekind x) (ekind z)))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c16_goal : Logic.eq (eloc y) (eloc z)",
                    "c14_H0 : Logic.eq (eloc y) (eloc z)",
                    "c3_y : True",
                    "c3_z : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "intuition .",
                "tactic_sig_no_out_arg": "intuition .",
                "tactic_args": [
                    "c17_goal : or (Plt (ereg x) (ereg z))\n  (and (Logic.eq (ereg x) (ereg z))\n     (OrderedEqKind.lt (ekind x) (ekind z)))",
                    "c14_H2 : or (Plt (ereg y) (ereg z))\n  (and (Logic.eq (ereg y) (ereg z))\n     (OrderedEqKind.lt (ekind y) (ekind z)))",
                    "c14_H0 : Logic.eq (eloc y) (eloc z)",
                    "c5_H1 : or (Plt (ereg x) (ereg y))\n  (and (Logic.eq (ereg x) (ereg y))\n     (OrderedEqKind.lt (ekind x) (ekind y)))",
                    "c5_H : Logic.eq (eloc x) (eloc y)",
                    "c3_x : True",
                    "c3_z : True"
                ],
                "tactic_res": [
                    "c18_goal : or (Plt (ereg x) (ereg z))\n  (and (Logic.eq (ereg x) (ereg z))\n     (OrderedEqKind.lt (ekind x) (ekind z)))",
                    "c18_H1 : Plt (ereg y) (ereg z)",
                    "c18_H3 : Plt (ereg x) (ereg y)",
                    "c19_goal : or (Plt (ereg x) (ereg z))\n  (and (Logic.eq (ereg x) (ereg z))\n     (OrderedEqKind.lt (ekind x) (ekind z)))",
                    "c19_H4 : OrderedEqKind.lt (ekind y) (ekind z)",
                    "c19_H2 : Logic.eq (ereg y) (ereg z)",
                    "c19_H3 : Plt (ereg x) (ereg y)",
                    "c20_goal : or (Plt (ereg x) (ereg z))\n  (and (Logic.eq (ereg x) (ereg z))\n     (OrderedEqKind.lt (ekind x) (ekind z)))",
                    "c20_H3 : Plt (ereg y) (ereg z)",
                    "c20_H4 : OrderedEqKind.lt (ekind x) (ekind y)",
                    "c20_H1 : Logic.eq (ereg x) (ereg y)",
                    "c21_goal : or (Plt (ereg x) (ereg z))\n  (and (Logic.eq (ereg x) (ereg z))\n     (OrderedEqKind.lt (ekind x) (ekind z)))",
                    "c21_H5 : OrderedEqKind.lt (ekind y) (ekind z)",
                    "c21_H2 : Logic.eq (ereg y) (ereg z)",
                    "c21_H4 : OrderedEqKind.lt (ekind x) (ekind y)",
                    "c21_H1 : Logic.eq (ereg x) (ereg y)"
                ]
            },
            {
                "tactic_sig": "left .",
                "tactic_sig_no_out_arg": "left .",
                "tactic_args": [
                    "c18_goal : or (Plt (ereg x) (ereg z))\n  (and (Logic.eq (ereg x) (ereg z))\n     (OrderedEqKind.lt (ekind x) (ekind z)))"
                ],
                "tactic_res": [
                    "c22_goal : Plt (ereg x) (ereg z)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c22_goal : Plt (ereg x) (ereg z)",
                    "_global_Plt_trans : forall (x y z : positive) (_ : Plt x y) (_ : Plt y z), Plt x z"
                ],
                "tactic_res": [
                    "c23_goal : Plt (ereg x) ?y",
                    "c24_goal : Plt (ereg y) (ereg z)"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c23_goal : Plt (ereg x) ?y",
                    "c18_H3 : Plt (ereg x) (ereg y)",
                    "c3_x : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c24_goal : Plt (ereg y) (ereg z)",
                    "c18_H1 : Plt (ereg y) (ereg z)",
                    "c3_y : True",
                    "c3_z : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "left .",
                "tactic_sig_no_out_arg": "left .",
                "tactic_args": [
                    "c19_goal : or (Plt (ereg x) (ereg z))\n  (and (Logic.eq (ereg x) (ereg z))\n     (OrderedEqKind.lt (ekind x) (ekind z)))"
                ],
                "tactic_res": [
                    "c25_goal : Plt (ereg x) (ereg z)"
                ]
            },
            {
                "tactic_sig": "congruence .",
                "tactic_sig_no_out_arg": "congruence .",
                "tactic_args": [
                    "c25_goal : Plt (ereg x) (ereg z)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "left .",
                "tactic_sig_no_out_arg": "left .",
                "tactic_args": [
                    "c20_goal : or (Plt (ereg x) (ereg z))\n  (and (Logic.eq (ereg x) (ereg z))\n     (OrderedEqKind.lt (ekind x) (ekind z)))"
                ],
                "tactic_res": [
                    "c26_goal : Plt (ereg x) (ereg z)"
                ]
            },
            {
                "tactic_sig": "congruence .",
                "tactic_sig_no_out_arg": "congruence .",
                "tactic_args": [
                    "c26_goal : Plt (ereg x) (ereg z)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "right .",
                "tactic_sig_no_out_arg": "right .",
                "tactic_args": [
                    "c21_goal : or (Plt (ereg x) (ereg z))\n  (and (Logic.eq (ereg x) (ereg z))\n     (OrderedEqKind.lt (ekind x) (ekind z)))"
                ],
                "tactic_res": [
                    "c27_goal : and (Logic.eq (ereg x) (ereg z)) (OrderedEqKind.lt (ekind x) (ekind z))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c27_goal : and (Logic.eq (ereg x) (ereg z)) (OrderedEqKind.lt (ekind x) (ekind z))"
                ],
                "tactic_res": [
                    "c28_goal : Logic.eq (ereg x) (ereg z)",
                    "c29_goal : OrderedEqKind.lt (ekind x) (ekind z)"
                ]
            },
            {
                "tactic_sig": "congruence .",
                "tactic_sig_no_out_arg": "congruence .",
                "tactic_args": [
                    "c28_goal : Logic.eq (ereg x) (ereg z)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c29_goal : OrderedEqKind.lt (ekind x) (ekind z)",
                    "_global_OrderedEqKind.lt_trans : forall (x y z : OrderedEqKind.t) (_ : OrderedEqKind.lt x y)\n         (_ : OrderedEqKind.lt y z), OrderedEqKind.lt x z"
                ],
                "tactic_res": [
                    "c30_goal : OrderedEqKind.lt (ekind x) ?y",
                    "c31_goal : OrderedEqKind.lt (ekind y) (ekind z)"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c30_goal : OrderedEqKind.lt (ekind x) ?y",
                    "c21_H4 : OrderedEqKind.lt (ekind x) (ekind y)",
                    "c3_x : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c31_goal : OrderedEqKind.lt (ekind y) (ekind z)",
                    "c21_H5 : OrderedEqKind.lt (ekind y) (ekind z)",
                    "c3_y : True",
                    "c3_z : True"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "lt_not_eq",
        "proof": [
            {
                "tactic_sig": "Lemma lt_not_eq : forall x y : t , lt x y -> ~ eq x y .",
                "tactic_sig_no_out_arg": "Lemma lt_not_eq : forall x y : t , lt x y -> ~ eq x y .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (x y : t) (_ : lt x y), not (eq x y)"
                ]
            },
            {
                "tactic_sig": "unfold _i , _i .",
                "tactic_sig_no_out_arg": "unfold _i , _i .",
                "tactic_args": [
                    "c1_goal : forall (x y : t) (_ : lt x y), not (eq x y)",
                    "_global_lt : forall (_ : t) (_ : t), Prop",
                    "_global_eq : forall (_ : t) (_ : t), Prop"
                ],
                "tactic_res": [
                    "c2_goal : forall (x y : t)\n  (_ : or (OrderedLoc.lt (eloc x) (eloc y))\n         (and (Logic.eq (eloc x) (eloc y))\n            (or (Plt (ereg x) (ereg y))\n               (and (Logic.eq (ereg x) (ereg y))\n                  (OrderedEqKind.lt (ekind x) (ekind y)))))),\nnot (Logic.eq x y)"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c2_goal : forall (x y : t)\n  (_ : or (OrderedLoc.lt (eloc x) (eloc y))\n         (and (Logic.eq (eloc x) (eloc y))\n            (or (Plt (ereg x) (ereg y))\n               (and (Logic.eq (ereg x) (ereg y))\n                  (OrderedEqKind.lt (ekind x) (ekind y)))))),\nnot (Logic.eq x y)"
                ],
                "tactic_res": [
                    "c3_goal : not (Logic.eq x y)",
                    "c3_x : True",
                    "c3_y : True",
                    "c3_H : or (OrderedLoc.lt (eloc x) (eloc y))\n  (and (Logic.eq (eloc x) (eloc y))\n     (or (Plt (ereg x) (ereg y))\n        (and (Logic.eq (ereg x) (ereg y))\n           (OrderedEqKind.lt (ekind x) (ekind y)))))"
                ]
            },
            {
                "tactic_sig": "red .",
                "tactic_sig_no_out_arg": "red .",
                "tactic_args": [
                    "c3_goal : not (Logic.eq x y)"
                ],
                "tactic_res": [
                    "c4_goal : forall _ : Logic.eq x y, False"
                ]
            },
            {
                "tactic_sig": "intros _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c4_goal : forall _ : Logic.eq x y, False"
                ],
                "tactic_res": [
                    "c5_goal : False",
                    "c5_H0 : Logic.eq x y"
                ]
            },
            {
                "tactic_sig": "subst _i .",
                "tactic_sig_no_out_arg": "subst _i .",
                "tactic_args": [
                    "c3_y : True",
                    "c5_H0 : Logic.eq x y"
                ],
                "tactic_res": [
                    "c5_H : or (OrderedLoc.lt (eloc x) (eloc x))\n  (and (Logic.eq (eloc x) (eloc x))\n     (or (Plt (ereg x) (ereg x))\n        (and (Logic.eq (ereg x) (ereg x))\n           (OrderedEqKind.lt (ekind x) (ekind x)))))"
                ]
            },
            {
                "tactic_sig": "intuition .",
                "tactic_sig_no_out_arg": "intuition .",
                "tactic_args": [
                    "c5_goal : False",
                    "c5_H : or (OrderedLoc.lt (eloc x) (eloc x))\n  (and (Logic.eq (eloc x) (eloc x))\n     (or (Plt (ereg x) (ereg x))\n        (and (Logic.eq (ereg x) (ereg x))\n           (OrderedEqKind.lt (ekind x) (ekind x)))))"
                ],
                "tactic_res": [
                    "c6_goal : False",
                    "c6_H0 : OrderedLoc.lt (eloc x) (eloc x)",
                    "c7_goal : False",
                    "c7_H0 : Plt (ereg x) (ereg x)",
                    "c7_H : Logic.eq (eloc x) (eloc x)",
                    "c8_goal : False",
                    "c8_H2 : OrderedEqKind.lt (ekind x) (ekind x)",
                    "c8_H1 : Logic.eq (ereg x) (ereg x)",
                    "c8_H : Logic.eq (eloc x) (eloc x)"
                ]
            },
            {
                "tactic_sig": "eelim OrderedLoc.lt_not_eq .",
                "tactic_sig_no_out_arg": "eelim OrderedLoc.lt_not_eq .",
                "tactic_args": [
                    "c6_goal : False"
                ],
                "tactic_res": [
                    "c9_goal : OrderedLoc.lt ?x ?y",
                    "c10_goal : OrderedLoc.eq (eloc x) (eloc x)"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c9_goal : OrderedLoc.lt ?x ?y",
                    "c6_H0 : OrderedLoc.lt (eloc x) (eloc x)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "red .",
                "tactic_sig_no_out_arg": "red .",
                "tactic_args": [
                    "c10_goal : OrderedLoc.eq (eloc x) (eloc x)"
                ],
                "tactic_res": [
                    "c11_goal : Logic.eq (eloc x) (eloc x)"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c11_goal : Logic.eq (eloc x) (eloc x)",
                    "c3_x : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eelim Plt_strict .",
                "tactic_sig_no_out_arg": "eelim Plt_strict .",
                "tactic_args": [
                    "c7_goal : False"
                ],
                "tactic_res": [
                    "c12_goal : Plt ?p ?p"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c12_goal : Plt ?p ?p",
                    "c7_H0 : Plt (ereg x) (ereg x)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eelim OrderedEqKind.lt_not_eq .",
                "tactic_sig_no_out_arg": "eelim OrderedEqKind.lt_not_eq .",
                "tactic_args": [
                    "c8_goal : False"
                ],
                "tactic_res": [
                    "c13_goal : OrderedEqKind.lt ?x ?y",
                    "c14_goal : OrderedEqKind.eq (ekind x) (ekind x)"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c13_goal : OrderedEqKind.lt ?x ?y",
                    "c8_H2 : OrderedEqKind.lt (ekind x) (ekind x)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "red .",
                "tactic_sig_no_out_arg": "red .",
                "tactic_args": [
                    "c14_goal : OrderedEqKind.eq (ekind x) (ekind x)"
                ],
                "tactic_res": [
                    "c15_goal : Logic.eq (ekind x) (ekind x)"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c15_goal : Logic.eq (ekind x) (ekind x)",
                    "c3_x : True"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "compare",
        "proof": [
            {
                "tactic_sig": "Definition compare : forall x y : t , Compare lt eq x y .",
                "tactic_sig_no_out_arg": "Definition compare : forall x y : t , Compare lt eq x y .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall x y : t, Compare lt eq x y"
                ]
            },
            {
                "tactic_sig": "intros _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c1_goal : forall x y : t, Compare lt eq x y"
                ],
                "tactic_res": [
                    "c2_goal : Compare lt eq x y",
                    "c2_x : True",
                    "c2_y : True"
                ]
            },
            {
                "tactic_sig": "destruct ( OrderedLoc.compare ( eloc _i ) ( eloc _i ) ) as [  _o | _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct ( OrderedLoc.compare ( eloc _i ) ( eloc _i ) ) .",
                "tactic_args": [
                    "c2_goal : Compare lt eq x y",
                    "c2_x : True",
                    "c2_y : True"
                ],
                "tactic_res": [
                    "c3_goal : Compare lt eq x y",
                    "c3_l : OrderedLoc.lt (eloc x) (eloc y)",
                    "c4_goal : Compare lt eq x y",
                    "c4_e : OrderedLoc.eq (eloc x) (eloc y)",
                    "c5_goal : Compare lt eq x y",
                    "c5_l : OrderedLoc.lt (eloc y) (eloc x)"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c3_goal : Compare lt eq x y",
                    "_global_LT : forall (X : Type) (lt eq : forall (_ : X) (_ : X), Prop) \n         (x y : X) (_ : lt x y), Compare lt eq x y"
                ],
                "tactic_res": [
                    "c6_goal : lt x y"
                ]
            },
            {
                "tactic_sig": "red .",
                "tactic_sig_no_out_arg": "red .",
                "tactic_args": [
                    "c6_goal : lt x y"
                ],
                "tactic_res": [
                    "c7_goal : or (OrderedLoc.lt (eloc x) (eloc y))\n  (and (Logic.eq (eloc x) (eloc y))\n     (or (Plt (ereg x) (ereg y))\n        (and (Logic.eq (ereg x) (ereg y))\n           (OrderedEqKind.lt (ekind x) (ekind y)))))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c7_goal : or (OrderedLoc.lt (eloc x) (eloc y))\n  (and (Logic.eq (eloc x) (eloc y))\n     (or (Plt (ereg x) (ereg y))\n        (and (Logic.eq (ereg x) (ereg y))\n           (OrderedEqKind.lt (ekind x) (ekind y)))))",
                    "c3_l : OrderedLoc.lt (eloc x) (eloc y)",
                    "c2_x : True",
                    "c2_y : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct ( OrderedPositive.compare ( ereg _i ) ( ereg _i ) ) as [  _o | _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct ( OrderedPositive.compare ( ereg _i ) ( ereg _i ) ) .",
                "tactic_args": [
                    "c4_goal : Compare lt eq x y",
                    "c2_x : True",
                    "c2_y : True",
                    "c4_e : OrderedLoc.eq (eloc x) (eloc y)"
                ],
                "tactic_res": [
                    "c8_goal : Compare lt eq x y",
                    "c8_l : OrderedPositive.lt (ereg x) (ereg y)",
                    "c9_goal : Compare lt eq x y",
                    "c9_e0 : OrderedPositive.eq (ereg x) (ereg y)",
                    "c10_goal : Compare lt eq x y",
                    "c10_l : OrderedPositive.lt (ereg y) (ereg x)"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c8_goal : Compare lt eq x y",
                    "_global_LT : forall (X : Type) (lt eq : forall (_ : X) (_ : X), Prop) \n         (x y : X) (_ : lt x y), Compare lt eq x y"
                ],
                "tactic_res": [
                    "c11_goal : lt x y"
                ]
            },
            {
                "tactic_sig": "red .",
                "tactic_sig_no_out_arg": "red .",
                "tactic_args": [
                    "c11_goal : lt x y"
                ],
                "tactic_res": [
                    "c12_goal : or (OrderedLoc.lt (eloc x) (eloc y))\n  (and (Logic.eq (eloc x) (eloc y))\n     (or (Plt (ereg x) (ereg y))\n        (and (Logic.eq (ereg x) (ereg y))\n           (OrderedEqKind.lt (ekind x) (ekind y)))))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c12_goal : or (OrderedLoc.lt (eloc x) (eloc y))\n  (and (Logic.eq (eloc x) (eloc y))\n     (or (Plt (ereg x) (ereg y))\n        (and (Logic.eq (ereg x) (ereg y))\n           (OrderedEqKind.lt (ekind x) (ekind y)))))",
                    "c8_l : OrderedPositive.lt (ereg x) (ereg y)",
                    "c4_e : OrderedLoc.eq (eloc x) (eloc y)",
                    "c2_x : True",
                    "c2_y : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct ( OrderedEqKind.compare ( ekind _i ) ( ekind _i ) ) as [  _o | _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct ( OrderedEqKind.compare ( ekind _i ) ( ekind _i ) ) .",
                "tactic_args": [
                    "c9_goal : Compare lt eq x y",
                    "c2_x : True",
                    "c2_y : True",
                    "c9_e0 : OrderedPositive.eq (ereg x) (ereg y)",
                    "c4_e : OrderedLoc.eq (eloc x) (eloc y)"
                ],
                "tactic_res": [
                    "c13_goal : Compare lt eq x y",
                    "c13_l : OrderedEqKind.lt (ekind x) (ekind y)",
                    "c14_goal : Compare lt eq x y",
                    "c14_e1 : OrderedEqKind.eq (ekind x) (ekind y)",
                    "c15_goal : Compare lt eq x y",
                    "c15_l : OrderedEqKind.lt (ekind y) (ekind x)"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c13_goal : Compare lt eq x y",
                    "_global_LT : forall (X : Type) (lt eq : forall (_ : X) (_ : X), Prop) \n         (x y : X) (_ : lt x y), Compare lt eq x y"
                ],
                "tactic_res": [
                    "c16_goal : lt x y"
                ]
            },
            {
                "tactic_sig": "red .",
                "tactic_sig_no_out_arg": "red .",
                "tactic_args": [
                    "c16_goal : lt x y"
                ],
                "tactic_res": [
                    "c17_goal : or (OrderedLoc.lt (eloc x) (eloc y))\n  (and (Logic.eq (eloc x) (eloc y))\n     (or (Plt (ereg x) (ereg y))\n        (and (Logic.eq (ereg x) (ereg y))\n           (OrderedEqKind.lt (ekind x) (ekind y)))))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c17_goal : or (OrderedLoc.lt (eloc x) (eloc y))\n  (and (Logic.eq (eloc x) (eloc y))\n     (or (Plt (ereg x) (ereg y))\n        (and (Logic.eq (ereg x) (ereg y))\n           (OrderedEqKind.lt (ekind x) (ekind y)))))",
                    "c13_l : OrderedEqKind.lt (ekind x) (ekind y)",
                    "c9_e0 : OrderedPositive.eq (ereg x) (ereg y)",
                    "c4_e : OrderedLoc.eq (eloc x) (eloc y)",
                    "c2_x : True",
                    "c2_y : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c14_goal : Compare lt eq x y",
                    "_global_EQ : forall (X : Type) (lt eq : forall (_ : X) (_ : X), Prop) \n         (x y : X) (_ : eq x y), Compare lt eq x y"
                ],
                "tactic_res": [
                    "c18_goal : eq x y"
                ]
            },
            {
                "tactic_sig": "red in _i .",
                "tactic_sig_no_out_arg": "red in _i .",
                "tactic_args": [
                    "c18_e : OrderedLoc.eq (eloc x) (eloc y)"
                ],
                "tactic_res": [
                    "c18_e : Logic.eq (eloc x) (eloc y)"
                ]
            },
            {
                "tactic_sig": "red in _i .",
                "tactic_sig_no_out_arg": "red in _i .",
                "tactic_args": [
                    "c18_e0 : OrderedPositive.eq (ereg x) (ereg y)"
                ],
                "tactic_res": [
                    "c18_e0 : Logic.eq (ereg x) (ereg y)"
                ]
            },
            {
                "tactic_sig": "red in _i .",
                "tactic_sig_no_out_arg": "red in _i .",
                "tactic_args": [
                    "c18_e1 : OrderedEqKind.eq (ekind x) (ekind y)"
                ],
                "tactic_res": [
                    "c18_e1 : Logic.eq (ekind x) (ekind y)"
                ]
            },
            {
                "tactic_sig": "red .",
                "tactic_sig_no_out_arg": "red .",
                "tactic_args": [
                    "c18_goal : eq x y"
                ],
                "tactic_res": [
                    "c19_goal : Logic.eq x y"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o _o _o _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c19_goal : Logic.eq x y",
                    "c2_x : True",
                    "c18_e1 : Logic.eq (ekind x) (ekind y)",
                    "c18_e0 : Logic.eq (ereg x) (ereg y)",
                    "c18_e : Logic.eq (eloc x) (eloc y)",
                    "c2_y : True"
                ],
                "tactic_res": [
                    "c20_goal : Logic.eq {| ekind := ekind0; ereg := ereg0; eloc := eloc0 |} y",
                    "c20_e1 : Logic.eq (ekind {| ekind := ekind0; ereg := ereg0; eloc := eloc0 |})\n  (ekind y)",
                    "c20_e0 : Logic.eq (ereg {| ekind := ekind0; ereg := ereg0; eloc := eloc0 |})\n  (ereg y)",
                    "c20_e : Logic.eq (eloc {| ekind := ekind0; ereg := ereg0; eloc := eloc0 |})\n  (eloc y)",
                    "c20_eloc0 : loc",
                    "c20_ereg0 : reg",
                    "c20_ekind0 : equation_kind"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o _o _o _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c20_goal : Logic.eq {| ekind := ekind0; ereg := ereg0; eloc := eloc0 |} y",
                    "c2_y : True",
                    "c20_e1 : Logic.eq (ekind {| ekind := ekind0; ereg := ereg0; eloc := eloc0 |})\n  (ekind y)",
                    "c20_e0 : Logic.eq (ereg {| ekind := ekind0; ereg := ereg0; eloc := eloc0 |})\n  (ereg y)",
                    "c20_e : Logic.eq (eloc {| ekind := ekind0; ereg := ereg0; eloc := eloc0 |})\n  (eloc y)",
                    "c20_eloc0 : loc",
                    "c20_ereg0 : reg",
                    "c20_ekind0 : equation_kind"
                ],
                "tactic_res": [
                    "c21_goal : Logic.eq {| ekind := ekind0; ereg := ereg0; eloc := eloc0 |}\n  {| ekind := ekind1; ereg := ereg1; eloc := eloc1 |}",
                    "c21_e1 : Logic.eq (ekind {| ekind := ekind0; ereg := ereg0; eloc := eloc0 |})\n  (ekind {| ekind := ekind1; ereg := ereg1; eloc := eloc1 |})",
                    "c21_e0 : Logic.eq (ereg {| ekind := ekind0; ereg := ereg0; eloc := eloc0 |})\n  (ereg {| ekind := ekind1; ereg := ereg1; eloc := eloc1 |})",
                    "c21_e : Logic.eq (eloc {| ekind := ekind0; ereg := ereg0; eloc := eloc0 |})\n  (eloc {| ekind := ekind1; ereg := ereg1; eloc := eloc1 |})",
                    "c21_eloc1 : loc",
                    "c21_ereg1 : reg",
                    "c21_ekind1 : equation_kind"
                ]
            },
            {
                "tactic_sig": "congruence .",
                "tactic_sig_no_out_arg": "congruence .",
                "tactic_args": [
                    "c21_goal : Logic.eq {| ekind := ekind0; ereg := ereg0; eloc := eloc0 |}\n  {| ekind := ekind1; ereg := ereg1; eloc := eloc1 |}"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c15_goal : Compare lt eq x y",
                    "_global_GT : forall (X : Type) (lt eq : forall (_ : X) (_ : X), Prop) \n         (x y : X) (_ : lt y x), Compare lt eq x y"
                ],
                "tactic_res": [
                    "c22_goal : lt y x"
                ]
            },
            {
                "tactic_sig": "red .",
                "tactic_sig_no_out_arg": "red .",
                "tactic_args": [
                    "c22_goal : lt y x"
                ],
                "tactic_res": [
                    "c23_goal : or (OrderedLoc.lt (eloc y) (eloc x))\n  (and (Logic.eq (eloc y) (eloc x))\n     (or (Plt (ereg y) (ereg x))\n        (and (Logic.eq (ereg y) (ereg x))\n           (OrderedEqKind.lt (ekind y) (ekind x)))))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c23_goal : or (OrderedLoc.lt (eloc y) (eloc x))\n  (and (Logic.eq (eloc y) (eloc x))\n     (or (Plt (ereg y) (ereg x))\n        (and (Logic.eq (ereg y) (ereg x))\n           (OrderedEqKind.lt (ekind y) (ekind x)))))",
                    "c15_l : OrderedEqKind.lt (ekind y) (ekind x)",
                    "c9_e0 : OrderedPositive.eq (ereg x) (ereg y)",
                    "c4_e : OrderedLoc.eq (eloc x) (eloc y)",
                    "c2_x : True",
                    "c2_y : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c10_goal : Compare lt eq x y",
                    "_global_GT : forall (X : Type) (lt eq : forall (_ : X) (_ : X), Prop) \n         (x y : X) (_ : lt y x), Compare lt eq x y"
                ],
                "tactic_res": [
                    "c24_goal : lt y x"
                ]
            },
            {
                "tactic_sig": "red .",
                "tactic_sig_no_out_arg": "red .",
                "tactic_args": [
                    "c24_goal : lt y x"
                ],
                "tactic_res": [
                    "c25_goal : or (OrderedLoc.lt (eloc y) (eloc x))\n  (and (Logic.eq (eloc y) (eloc x))\n     (or (Plt (ereg y) (ereg x))\n        (and (Logic.eq (ereg y) (ereg x))\n           (OrderedEqKind.lt (ekind y) (ekind x)))))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c25_goal : or (OrderedLoc.lt (eloc y) (eloc x))\n  (and (Logic.eq (eloc y) (eloc x))\n     (or (Plt (ereg y) (ereg x))\n        (and (Logic.eq (ereg y) (ereg x))\n           (OrderedEqKind.lt (ekind y) (ekind x)))))",
                    "c10_l : OrderedPositive.lt (ereg y) (ereg x)",
                    "c4_e : OrderedLoc.eq (eloc x) (eloc y)",
                    "c2_x : True",
                    "c2_y : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c5_goal : Compare lt eq x y",
                    "_global_GT : forall (X : Type) (lt eq : forall (_ : X) (_ : X), Prop) \n         (x y : X) (_ : lt y x), Compare lt eq x y"
                ],
                "tactic_res": [
                    "c26_goal : lt y x"
                ]
            },
            {
                "tactic_sig": "red .",
                "tactic_sig_no_out_arg": "red .",
                "tactic_args": [
                    "c26_goal : lt y x"
                ],
                "tactic_res": [
                    "c27_goal : or (OrderedLoc.lt (eloc y) (eloc x))\n  (and (Logic.eq (eloc y) (eloc x))\n     (or (Plt (ereg y) (ereg x))\n        (and (Logic.eq (ereg y) (ereg x))\n           (OrderedEqKind.lt (ekind y) (ekind x)))))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c27_goal : or (OrderedLoc.lt (eloc y) (eloc x))\n  (and (Logic.eq (eloc y) (eloc x))\n     (or (Plt (ereg y) (ereg x))\n        (and (Logic.eq (ereg y) (ereg x))\n           (OrderedEqKind.lt (ekind y) (ekind x)))))",
                    "c5_l : OrderedLoc.lt (eloc y) (eloc x)",
                    "c2_x : True",
                    "c2_y : True"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": null,
        "proof": [
            {
                "tactic_sig": "Next Obligation .",
                "tactic_sig_no_out_arg": "Next Obligation .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : iff (EqSet2.In q EqSet2.empty) (EqSet.In q EqSet.empty)",
                    "c1_q : EqSet2\\.elt"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c1_goal : iff (EqSet2.In q EqSet2.empty) (EqSet.In q EqSet.empty)"
                ],
                "tactic_res": [
                    "c2_goal : forall _ : EqSet2.In q EqSet2.empty, EqSet.In q EqSet.empty",
                    "c3_goal : forall _ : EqSet.In q EqSet.empty, EqSet2.In q EqSet2.empty"
                ]
            },
            {
                "tactic_sig": "intros _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c2_goal : forall _ : EqSet2.In q EqSet2.empty, EqSet.In q EqSet.empty"
                ],
                "tactic_res": [
                    "c4_goal : EqSet.In q EqSet.empty",
                    "c4_H : EqSet2.In q EqSet2.empty"
                ]
            },
            {
                "tactic_sig": "intros _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c3_goal : forall _ : EqSet.In q EqSet.empty, EqSet2.In q EqSet2.empty"
                ],
                "tactic_res": [
                    "c5_goal : EqSet2.In q EqSet2.empty",
                    "c5_H : EqSet.In q EqSet.empty"
                ]
            },
            {
                "tactic_sig": "eelim EqSet2.empty_1 .",
                "tactic_sig_no_out_arg": "eelim EqSet2.empty_1 .",
                "tactic_args": [
                    "c4_goal : EqSet.In q EqSet.empty"
                ],
                "tactic_res": [
                    "c6_goal : EqSet2.In ?a EqSet2.empty"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c6_goal : EqSet2.In ?a EqSet2.empty",
                    "c4_H : EqSet2.In q EqSet2.empty"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eelim EqSet.empty_1 .",
                "tactic_sig_no_out_arg": "eelim EqSet.empty_1 .",
                "tactic_args": [
                    "c5_goal : EqSet2.In q EqSet2.empty"
                ],
                "tactic_res": [
                    "c7_goal : EqSet.In ?a EqSet.empty"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c7_goal : EqSet.In ?a EqSet.empty",
                    "c5_H : EqSet.In q EqSet.empty"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "empty_eqs_dup",
        "proof": [
            {
                "tactic_sig": "Lemma empty_eqs_dup q : EqSet2.In q EqSet2.empty <- > EqSet.In q EqSet.empty .",
                "tactic_sig_no_out_arg": "Lemma empty_eqs_dup q : EqSet2.In q EqSet2.empty <- > EqSet.In q EqSet.empty .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : iff (EqSet2.In q EqSet2.empty) (EqSet.In q EqSet.empty)",
                    "c1_q : EqSet2\\.elt"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c1_goal : iff (EqSet2.In q EqSet2.empty) (EqSet.In q EqSet.empty)"
                ],
                "tactic_res": [
                    "c2_goal : forall _ : EqSet2.In q EqSet2.empty, EqSet.In q EqSet.empty",
                    "c3_goal : forall _ : EqSet.In q EqSet.empty, EqSet2.In q EqSet2.empty"
                ]
            },
            {
                "tactic_sig": "intros _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c2_goal : forall _ : EqSet2.In q EqSet2.empty, EqSet.In q EqSet.empty"
                ],
                "tactic_res": [
                    "c4_goal : EqSet.In q EqSet.empty",
                    "c4_H : EqSet2.In q EqSet2.empty"
                ]
            },
            {
                "tactic_sig": "intros _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c3_goal : forall _ : EqSet.In q EqSet.empty, EqSet2.In q EqSet2.empty"
                ],
                "tactic_res": [
                    "c5_goal : EqSet2.In q EqSet2.empty",
                    "c5_H : EqSet.In q EqSet.empty"
                ]
            },
            {
                "tactic_sig": "eelim EqSet2.empty_1 .",
                "tactic_sig_no_out_arg": "eelim EqSet2.empty_1 .",
                "tactic_args": [
                    "c4_goal : EqSet.In q EqSet.empty"
                ],
                "tactic_res": [
                    "c6_goal : EqSet2.In ?a EqSet2.empty"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c6_goal : EqSet2.In ?a EqSet2.empty",
                    "c4_H : EqSet2.In q EqSet2.empty"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eelim EqSet.empty_1 .",
                "tactic_sig_no_out_arg": "eelim EqSet.empty_1 .",
                "tactic_args": [
                    "c5_goal : EqSet2.In q EqSet2.empty"
                ],
                "tactic_res": [
                    "c7_goal : EqSet.In ?a EqSet.empty"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c7_goal : EqSet.In ?a EqSet.empty",
                    "c5_H : EqSet.In q EqSet.empty"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": null,
        "proof": [
            {
                "tactic_sig": "Next Obligation .",
                "tactic_sig_no_out_arg": "Next Obligation .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : iff (EqSet2.In q0 (EqSet2.add q (eqs2 e)))\n  (EqSet.In q0 (EqSet.add q e))",
                    "c1_q0 : EqSet2\\.elt",
                    "c1_e : eqs",
                    "c1_q : equation"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c1_goal : iff (EqSet2.In q0 (EqSet2.add q (eqs2 e)))\n  (EqSet.In q0 (EqSet.add q e))"
                ],
                "tactic_res": [
                    "c2_goal : forall _ : EqSet2.In q0 (EqSet2.add q (eqs2 e)),\nEqSet.In q0 (EqSet.add q e)",
                    "c3_goal : forall _ : EqSet.In q0 (EqSet.add q e),\nEqSet2.In q0 (EqSet2.add q (eqs2 e))"
                ]
            },
            {
                "tactic_sig": "intros _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c2_goal : forall _ : EqSet2.In q0 (EqSet2.add q (eqs2 e)),\nEqSet.In q0 (EqSet.add q e)"
                ],
                "tactic_res": [
                    "c4_goal : EqSet.In q0 (EqSet.add q e)",
                    "c4_H : EqSet2.In q0 (EqSet2.add q (eqs2 e))"
                ]
            },
            {
                "tactic_sig": "intros _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c3_goal : forall _ : EqSet.In q0 (EqSet.add q e),\nEqSet2.In q0 (EqSet2.add q (eqs2 e))"
                ],
                "tactic_res": [
                    "c5_goal : EqSet2.In q0 (EqSet2.add q (eqs2 e))",
                    "c5_H : EqSet.In q0 (EqSet.add q e)"
                ]
            },
            {
                "tactic_sig": "destruct ( OrderedEquation'.eq_dec _i _i ) as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct ( OrderedEquation'.eq_dec _i _i ) .",
                "tactic_args": [
                    "c4_goal : EqSet.In q0 (EqSet.add q e)",
                    "c1_q : equation",
                    "c1_q0 : EqSet2\\.elt",
                    "c4_H : EqSet2.In q0 (EqSet2.add q (eqs2 e))",
                    "c1_e : eqs"
                ],
                "tactic_res": [
                    "c6_goal : EqSet.In q0 (EqSet.add q e)",
                    "c6_e0 : eq q q0",
                    "c7_goal : EqSet.In q0 (EqSet.add q e)",
                    "c7_n : not (eq q q0)"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c6_goal : EqSet.In q0 (EqSet.add q e)",
                    "_global_EqSet.add_1 : forall (s : EqSet.t) (x y : EqSet.elt) (_ : eq x y),\n       EqSet.In y (EqSet.add x s)"
                ],
                "tactic_res": [
                    "c8_goal : eq q q0"
                ]
            },
            {
                "tactic_sig": "assumption .",
                "tactic_sig_no_out_arg": "assumption .",
                "tactic_args": [
                    "c8_goal : eq q q0",
                    "c6_e0 : eq q q0",
                    "c1_q0 : EqSet2\\.elt",
                    "c1_q : equation"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c7_goal : EqSet.In q0 (EqSet.add q e)",
                    "_global_EqSet.add_2 : forall (s : EqSet.t) (x y : EqSet.elt) (_ : EqSet.In y s),\n       EqSet.In y (EqSet.add x s)"
                ],
                "tactic_res": [
                    "c9_goal : EqSet.In q0 e"
                ]
            },
            {
                "tactic_sig": "apply ( _i _i ) .",
                "tactic_sig_no_out_arg": "apply ( _i _i ) .",
                "tactic_args": [
                    "c9_goal : EqSet.In q0 e",
                    "_global_eqs_same : forall (e : eqs) (q : EqSet2.elt),\n       iff (EqSet2.In q (eqs2 e)) (EqSet.In q e)",
                    "c1_e : eqs"
                ],
                "tactic_res": [
                    "c10_goal : EqSet2.In q0 (eqs2 e)"
                ]
            },
            {
                "tactic_sig": "apply _i with _i .",
                "tactic_sig_no_out_arg": "apply _i with _i .",
                "tactic_args": [
                    "c10_goal : EqSet2.In q0 (eqs2 e)",
                    "_global_EqSet2.add_3 : forall (s : EqSet2.t) (x y : EqSet2.elt) (_ : not (eq x y))\n         (_ : EqSet2.In y (EqSet2.add x s)), EqSet2.In y s",
                    "c1_q : equation"
                ],
                "tactic_res": [
                    "c11_goal : not (eq q q0)",
                    "c12_goal : EqSet2.In q0 (EqSet2.add q (eqs2 e))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c11_goal : not (eq q q0)",
                    "c7_n : not (eq q q0)",
                    "c1_q0 : EqSet2\\.elt",
                    "c1_q : equation"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c12_goal : EqSet2.In q0 (EqSet2.add q (eqs2 e))",
                    "c4_H : EqSet2.In q0 (EqSet2.add q (eqs2 e))",
                    "c1_q0 : EqSet2\\.elt",
                    "c1_e : eqs",
                    "c1_q : equation"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct ( OrderedEquation.eq_dec _i _i ) as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct ( OrderedEquation.eq_dec _i _i ) .",
                "tactic_args": [
                    "c5_goal : EqSet2.In q0 (EqSet2.add q (eqs2 e))",
                    "c1_q : equation",
                    "c1_q0 : EqSet2\\.elt",
                    "c5_H : EqSet.In q0 (EqSet.add q e)",
                    "c1_e : eqs"
                ],
                "tactic_res": [
                    "c13_goal : EqSet2.In q0 (EqSet2.add q (eqs2 e))",
                    "c13_e0 : eq q q0",
                    "c14_goal : EqSet2.In q0 (EqSet2.add q (eqs2 e))",
                    "c14_n : not (eq q q0)"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c13_goal : EqSet2.In q0 (EqSet2.add q (eqs2 e))",
                    "_global_EqSet2.add_1 : forall (s : EqSet2.t) (x y : EqSet2.elt) (_ : eq x y),\n       EqSet2.In y (EqSet2.add x s)"
                ],
                "tactic_res": [
                    "c15_goal : eq q q0"
                ]
            },
            {
                "tactic_sig": "assumption .",
                "tactic_sig_no_out_arg": "assumption .",
                "tactic_args": [
                    "c15_goal : eq q q0",
                    "c13_e0 : eq q q0",
                    "c1_q0 : EqSet2\\.elt",
                    "c1_q : equation"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c14_goal : EqSet2.In q0 (EqSet2.add q (eqs2 e))",
                    "_global_EqSet2.add_2 : forall (s : EqSet2.t) (x y : EqSet2.elt) (_ : EqSet2.In y s),\n       EqSet2.In y (EqSet2.add x s)"
                ],
                "tactic_res": [
                    "c16_goal : EqSet2.In q0 (eqs2 e)"
                ]
            },
            {
                "tactic_sig": "apply ( _i _i ) .",
                "tactic_sig_no_out_arg": "apply ( _i _i ) .",
                "tactic_args": [
                    "c16_goal : EqSet2.In q0 (eqs2 e)",
                    "_global_eqs_same : forall (e : eqs) (q : EqSet2.elt),\n       iff (EqSet2.In q (eqs2 e)) (EqSet.In q e)",
                    "c1_e : eqs"
                ],
                "tactic_res": [
                    "c17_goal : EqSet.In q0 e"
                ]
            },
            {
                "tactic_sig": "apply _i with _i .",
                "tactic_sig_no_out_arg": "apply _i with _i .",
                "tactic_args": [
                    "c17_goal : EqSet.In q0 e",
                    "_global_EqSet.add_3 : forall (s : EqSet.t) (x y : EqSet.elt) (_ : not (eq x y))\n         (_ : EqSet.In y (EqSet.add x s)), EqSet.In y s",
                    "c1_q : equation"
                ],
                "tactic_res": [
                    "c18_goal : not (eq q q0)",
                    "c19_goal : EqSet.In q0 (EqSet.add q e)"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c18_goal : not (eq q q0)",
                    "c14_n : not (eq q q0)",
                    "c1_q0 : EqSet2\\.elt",
                    "c1_q : equation"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c19_goal : EqSet.In q0 (EqSet.add q e)",
                    "c5_H : EqSet.In q0 (EqSet.add q e)",
                    "c1_q0 : EqSet2\\.elt",
                    "c1_e : eqs",
                    "c1_q : equation"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "add_equation_dup",
        "proof": [
            {
                "tactic_sig": "Lemma add_equation_dup ( q : equation ) ( e : eqs ) q0 : EqSet2.In q0 ( EqSet2.add q ( eqs2 e ) ) <- > EqSet.In q0 ( EqSet.add q e ) .",
                "tactic_sig_no_out_arg": "Lemma add_equation_dup ( q : equation ) ( e : eqs ) q0 : EqSet2.In q0 ( EqSet2.add q ( eqs2 e ) ) <- > EqSet.In q0 ( EqSet.add q e ) .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : iff (EqSet2.In q0 (EqSet2.add q (eqs2 e)))\n  (EqSet.In q0 (EqSet.add q e))",
                    "c1_q0 : EqSet2\\.elt",
                    "c1_e : eqs",
                    "c1_q : equation"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c1_goal : iff (EqSet2.In q0 (EqSet2.add q (eqs2 e)))\n  (EqSet.In q0 (EqSet.add q e))"
                ],
                "tactic_res": [
                    "c2_goal : forall _ : EqSet2.In q0 (EqSet2.add q (eqs2 e)),\nEqSet.In q0 (EqSet.add q e)",
                    "c3_goal : forall _ : EqSet.In q0 (EqSet.add q e),\nEqSet2.In q0 (EqSet2.add q (eqs2 e))"
                ]
            },
            {
                "tactic_sig": "intros _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c2_goal : forall _ : EqSet2.In q0 (EqSet2.add q (eqs2 e)),\nEqSet.In q0 (EqSet.add q e)"
                ],
                "tactic_res": [
                    "c4_goal : EqSet.In q0 (EqSet.add q e)",
                    "c4_H : EqSet2.In q0 (EqSet2.add q (eqs2 e))"
                ]
            },
            {
                "tactic_sig": "intros _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c3_goal : forall _ : EqSet.In q0 (EqSet.add q e),\nEqSet2.In q0 (EqSet2.add q (eqs2 e))"
                ],
                "tactic_res": [
                    "c5_goal : EqSet2.In q0 (EqSet2.add q (eqs2 e))",
                    "c5_H : EqSet.In q0 (EqSet.add q e)"
                ]
            },
            {
                "tactic_sig": "destruct ( OrderedEquation'.eq_dec _i _i ) as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct ( OrderedEquation'.eq_dec _i _i ) .",
                "tactic_args": [
                    "c4_goal : EqSet.In q0 (EqSet.add q e)",
                    "c1_q : equation",
                    "c1_q0 : EqSet2\\.elt",
                    "c4_H : EqSet2.In q0 (EqSet2.add q (eqs2 e))",
                    "c1_e : eqs"
                ],
                "tactic_res": [
                    "c6_goal : EqSet.In q0 (EqSet.add q e)",
                    "c6_e0 : eq q q0",
                    "c7_goal : EqSet.In q0 (EqSet.add q e)",
                    "c7_n : not (eq q q0)"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c6_goal : EqSet.In q0 (EqSet.add q e)",
                    "_global_EqSet.add_1 : forall (s : EqSet.t) (x y : EqSet.elt) (_ : eq x y),\n       EqSet.In y (EqSet.add x s)"
                ],
                "tactic_res": [
                    "c8_goal : eq q q0"
                ]
            },
            {
                "tactic_sig": "assumption .",
                "tactic_sig_no_out_arg": "assumption .",
                "tactic_args": [
                    "c8_goal : eq q q0",
                    "c6_e0 : eq q q0",
                    "c1_q0 : EqSet2\\.elt",
                    "c1_q : equation"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c7_goal : EqSet.In q0 (EqSet.add q e)",
                    "_global_EqSet.add_2 : forall (s : EqSet.t) (x y : EqSet.elt) (_ : EqSet.In y s),\n       EqSet.In y (EqSet.add x s)"
                ],
                "tactic_res": [
                    "c9_goal : EqSet.In q0 e"
                ]
            },
            {
                "tactic_sig": "apply ( _i _i ) .",
                "tactic_sig_no_out_arg": "apply ( _i _i ) .",
                "tactic_args": [
                    "c9_goal : EqSet.In q0 e",
                    "_global_eqs_same : forall (e : eqs) (q : EqSet2.elt),\n       iff (EqSet2.In q (eqs2 e)) (EqSet.In q e)",
                    "c1_e : eqs"
                ],
                "tactic_res": [
                    "c10_goal : EqSet2.In q0 (eqs2 e)"
                ]
            },
            {
                "tactic_sig": "apply _i with _i .",
                "tactic_sig_no_out_arg": "apply _i with _i .",
                "tactic_args": [
                    "c10_goal : EqSet2.In q0 (eqs2 e)",
                    "_global_EqSet2.add_3 : forall (s : EqSet2.t) (x y : EqSet2.elt) (_ : not (eq x y))\n         (_ : EqSet2.In y (EqSet2.add x s)), EqSet2.In y s",
                    "c1_q : equation"
                ],
                "tactic_res": [
                    "c11_goal : not (eq q q0)",
                    "c12_goal : EqSet2.In q0 (EqSet2.add q (eqs2 e))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c11_goal : not (eq q q0)",
                    "c7_n : not (eq q q0)",
                    "c1_q0 : EqSet2\\.elt",
                    "c1_q : equation"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c12_goal : EqSet2.In q0 (EqSet2.add q (eqs2 e))",
                    "c4_H : EqSet2.In q0 (EqSet2.add q (eqs2 e))",
                    "c1_q0 : EqSet2\\.elt",
                    "c1_e : eqs",
                    "c1_q : equation"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct ( OrderedEquation.eq_dec _i _i ) as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct ( OrderedEquation.eq_dec _i _i ) .",
                "tactic_args": [
                    "c5_goal : EqSet2.In q0 (EqSet2.add q (eqs2 e))",
                    "c1_q : equation",
                    "c1_q0 : EqSet2\\.elt",
                    "c5_H : EqSet.In q0 (EqSet.add q e)",
                    "c1_e : eqs"
                ],
                "tactic_res": [
                    "c13_goal : EqSet2.In q0 (EqSet2.add q (eqs2 e))",
                    "c13_e0 : eq q q0",
                    "c14_goal : EqSet2.In q0 (EqSet2.add q (eqs2 e))",
                    "c14_n : not (eq q q0)"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c13_goal : EqSet2.In q0 (EqSet2.add q (eqs2 e))",
                    "_global_EqSet2.add_1 : forall (s : EqSet2.t) (x y : EqSet2.elt) (_ : eq x y),\n       EqSet2.In y (EqSet2.add x s)"
                ],
                "tactic_res": [
                    "c15_goal : eq q q0"
                ]
            },
            {
                "tactic_sig": "assumption .",
                "tactic_sig_no_out_arg": "assumption .",
                "tactic_args": [
                    "c15_goal : eq q q0",
                    "c13_e0 : eq q q0",
                    "c1_q0 : EqSet2\\.elt",
                    "c1_q : equation"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c14_goal : EqSet2.In q0 (EqSet2.add q (eqs2 e))",
                    "_global_EqSet2.add_2 : forall (s : EqSet2.t) (x y : EqSet2.elt) (_ : EqSet2.In y s),\n       EqSet2.In y (EqSet2.add x s)"
                ],
                "tactic_res": [
                    "c16_goal : EqSet2.In q0 (eqs2 e)"
                ]
            },
            {
                "tactic_sig": "apply ( _i _i ) .",
                "tactic_sig_no_out_arg": "apply ( _i _i ) .",
                "tactic_args": [
                    "c16_goal : EqSet2.In q0 (eqs2 e)",
                    "_global_eqs_same : forall (e : eqs) (q : EqSet2.elt),\n       iff (EqSet2.In q (eqs2 e)) (EqSet.In q e)",
                    "c1_e : eqs"
                ],
                "tactic_res": [
                    "c17_goal : EqSet.In q0 e"
                ]
            },
            {
                "tactic_sig": "apply _i with _i .",
                "tactic_sig_no_out_arg": "apply _i with _i .",
                "tactic_args": [
                    "c17_goal : EqSet.In q0 e",
                    "_global_EqSet.add_3 : forall (s : EqSet.t) (x y : EqSet.elt) (_ : not (eq x y))\n         (_ : EqSet.In y (EqSet.add x s)), EqSet.In y s",
                    "c1_q : equation"
                ],
                "tactic_res": [
                    "c18_goal : not (eq q q0)",
                    "c19_goal : EqSet.In q0 (EqSet.add q e)"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c18_goal : not (eq q q0)",
                    "c14_n : not (eq q q0)",
                    "c1_q0 : EqSet2\\.elt",
                    "c1_q : equation"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c19_goal : EqSet.In q0 (EqSet.add q e)",
                    "c5_H : EqSet.In q0 (EqSet.add q e)",
                    "c1_q0 : EqSet2\\.elt",
                    "c1_e : eqs",
                    "c1_q : equation"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": null,
        "proof": [
            {
                "tactic_sig": "Next Obligation .",
                "tactic_sig_no_out_arg": "Next Obligation .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : iff (EqSet2.In q0 (EqSet2.remove q (eqs2 e)))\n  (EqSet.In q0 (EqSet.remove q e))",
                    "c1_q0 : EqSet2\\.elt",
                    "c1_e : eqs",
                    "c1_q : equation"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c1_goal : iff (EqSet2.In q0 (EqSet2.remove q (eqs2 e)))\n  (EqSet.In q0 (EqSet.remove q e))"
                ],
                "tactic_res": [
                    "c2_goal : forall _ : EqSet2.In q0 (EqSet2.remove q (eqs2 e)),\nEqSet.In q0 (EqSet.remove q e)",
                    "c3_goal : forall _ : EqSet.In q0 (EqSet.remove q e),\nEqSet2.In q0 (EqSet2.remove q (eqs2 e))"
                ]
            },
            {
                "tactic_sig": "intros _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c2_goal : forall _ : EqSet2.In q0 (EqSet2.remove q (eqs2 e)),\nEqSet.In q0 (EqSet.remove q e)"
                ],
                "tactic_res": [
                    "c4_goal : EqSet.In q0 (EqSet.remove q e)",
                    "c4_H : EqSet2.In q0 (EqSet2.remove q (eqs2 e))"
                ]
            },
            {
                "tactic_sig": "intros _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c3_goal : forall _ : EqSet.In q0 (EqSet.remove q e),\nEqSet2.In q0 (EqSet2.remove q (eqs2 e))"
                ],
                "tactic_res": [
                    "c5_goal : EqSet2.In q0 (EqSet2.remove q (eqs2 e))",
                    "c5_H : EqSet.In q0 (EqSet.remove q e)"
                ]
            },
            {
                "tactic_sig": "destruct ( OrderedEquation'.eq_dec _i _i ) as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct ( OrderedEquation'.eq_dec _i _i ) .",
                "tactic_args": [
                    "c4_goal : EqSet.In q0 (EqSet.remove q e)",
                    "c1_q : equation",
                    "c1_q0 : EqSet2\\.elt",
                    "c4_H : EqSet2.In q0 (EqSet2.remove q (eqs2 e))",
                    "c1_e : eqs"
                ],
                "tactic_res": [
                    "c6_goal : EqSet.In q0 (EqSet.remove q e)",
                    "c6_e0 : eq q q0",
                    "c7_goal : EqSet.In q0 (EqSet.remove q e)",
                    "c7_n : not (eq q q0)"
                ]
            },
            {
                "tactic_sig": "eelim EqSet2.remove_1 .",
                "tactic_sig_no_out_arg": "eelim EqSet2.remove_1 .",
                "tactic_args": [
                    "c6_goal : EqSet.In q0 (EqSet.remove q e)"
                ],
                "tactic_res": [
                    "c8_goal : eq ?x ?y",
                    "c9_goal : EqSet2.In q0 (EqSet2.remove q ?s)"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c8_goal : eq ?x ?y"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c9_goal : EqSet2.In q0 (EqSet2.remove q ?s)",
                    "c4_H : EqSet2.In q0 (EqSet2.remove q (eqs2 e))",
                    "c1_q0 : EqSet2\\.elt",
                    "c1_q : equation"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c7_goal : EqSet.In q0 (EqSet.remove q e)",
                    "_global_EqSet.remove_2 : forall (s : EqSet.t) (x y : EqSet.elt) (_ : not (eq x y))\n         (_ : EqSet.In y s), EqSet.In y (EqSet.remove x s)"
                ],
                "tactic_res": [
                    "c10_goal : not (eq q q0)",
                    "c11_goal : EqSet.In q0 e"
                ]
            },
            {
                "tactic_sig": "assumption .",
                "tactic_sig_no_out_arg": "assumption .",
                "tactic_args": [
                    "c10_goal : not (eq q q0)",
                    "c7_n : not (eq q q0)",
                    "c1_q0 : EqSet2\\.elt",
                    "c1_q : equation"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply ( _i _i ) .",
                "tactic_sig_no_out_arg": "apply ( _i _i ) .",
                "tactic_args": [
                    "c11_goal : EqSet.In q0 e",
                    "_global_eqs_same : forall (e : eqs) (q : EqSet2.elt),\n       iff (EqSet2.In q (eqs2 e)) (EqSet.In q e)",
                    "c1_e : eqs"
                ],
                "tactic_res": [
                    "c12_goal : EqSet2.In q0 (eqs2 e)"
                ]
            },
            {
                "tactic_sig": "apply _i with _i .",
                "tactic_sig_no_out_arg": "apply _i with _i .",
                "tactic_args": [
                    "c12_goal : EqSet2.In q0 (eqs2 e)",
                    "_global_EqSet2.remove_3 : forall (s : EqSet2.t) (x y : EqSet2.elt)\n         (_ : EqSet2.In y (EqSet2.remove x s)), EqSet2.In y s",
                    "c1_q : equation"
                ],
                "tactic_res": [
                    "c13_goal : EqSet2.In q0 (EqSet2.remove q (eqs2 e))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c13_goal : EqSet2.In q0 (EqSet2.remove q (eqs2 e))",
                    "c4_H : EqSet2.In q0 (EqSet2.remove q (eqs2 e))",
                    "c1_q0 : EqSet2\\.elt",
                    "c1_e : eqs",
                    "c1_q : equation"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct ( OrderedEquation.eq_dec _i _i ) as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct ( OrderedEquation.eq_dec _i _i ) .",
                "tactic_args": [
                    "c5_goal : EqSet2.In q0 (EqSet2.remove q (eqs2 e))",
                    "c1_q : equation",
                    "c1_q0 : EqSet2\\.elt",
                    "c5_H : EqSet.In q0 (EqSet.remove q e)",
                    "c1_e : eqs"
                ],
                "tactic_res": [
                    "c14_goal : EqSet2.In q0 (EqSet2.remove q (eqs2 e))",
                    "c14_e0 : eq q q0",
                    "c15_goal : EqSet2.In q0 (EqSet2.remove q (eqs2 e))",
                    "c15_n : not (eq q q0)"
                ]
            },
            {
                "tactic_sig": "eelim EqSet.remove_1 .",
                "tactic_sig_no_out_arg": "eelim EqSet.remove_1 .",
                "tactic_args": [
                    "c14_goal : EqSet2.In q0 (EqSet2.remove q (eqs2 e))"
                ],
                "tactic_res": [
                    "c16_goal : eq ?x ?y",
                    "c17_goal : EqSet.In q0 (EqSet.remove q ?s)"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c16_goal : eq ?x ?y"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c17_goal : EqSet.In q0 (EqSet.remove q ?s)",
                    "c5_H : EqSet.In q0 (EqSet.remove q e)",
                    "c1_q0 : EqSet2\\.elt",
                    "c1_q : equation"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c15_goal : EqSet2.In q0 (EqSet2.remove q (eqs2 e))",
                    "_global_EqSet2.remove_2 : forall (s : EqSet2.t) (x y : EqSet2.elt) (_ : not (eq x y))\n         (_ : EqSet2.In y s), EqSet2.In y (EqSet2.remove x s)"
                ],
                "tactic_res": [
                    "c18_goal : not (eq q q0)",
                    "c19_goal : EqSet2.In q0 (eqs2 e)"
                ]
            },
            {
                "tactic_sig": "assumption .",
                "tactic_sig_no_out_arg": "assumption .",
                "tactic_args": [
                    "c18_goal : not (eq q q0)",
                    "c15_n : not (eq q q0)",
                    "c1_q0 : EqSet2\\.elt",
                    "c1_q : equation"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply ( _i _i ) .",
                "tactic_sig_no_out_arg": "apply ( _i _i ) .",
                "tactic_args": [
                    "c19_goal : EqSet2.In q0 (eqs2 e)",
                    "_global_eqs_same : forall (e : eqs) (q : EqSet2.elt),\n       iff (EqSet2.In q (eqs2 e)) (EqSet.In q e)",
                    "c1_e : eqs"
                ],
                "tactic_res": [
                    "c20_goal : EqSet.In q0 e"
                ]
            },
            {
                "tactic_sig": "apply _i with _i .",
                "tactic_sig_no_out_arg": "apply _i with _i .",
                "tactic_args": [
                    "c20_goal : EqSet.In q0 e",
                    "_global_EqSet.remove_3 : forall (s : EqSet.t) (x y : EqSet.elt)\n         (_ : EqSet.In y (EqSet.remove x s)), EqSet.In y s",
                    "c1_q : equation"
                ],
                "tactic_res": [
                    "c21_goal : EqSet.In q0 (EqSet.remove q e)"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c21_goal : EqSet.In q0 (EqSet.remove q e)",
                    "c5_H : EqSet.In q0 (EqSet.remove q e)",
                    "c1_q0 : EqSet2\\.elt",
                    "c1_e : eqs",
                    "c1_q : equation"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "remove_equation_dup",
        "proof": [
            {
                "tactic_sig": "Lemma remove_equation_dup ( q : equation ) ( e : eqs ) q0 : EqSet2.In q0 ( EqSet2.remove q ( eqs2 e ) ) <- > EqSet.In q0 ( EqSet.remove q e ) .",
                "tactic_sig_no_out_arg": "Lemma remove_equation_dup ( q : equation ) ( e : eqs ) q0 : EqSet2.In q0 ( EqSet2.remove q ( eqs2 e ) ) <- > EqSet.In q0 ( EqSet.remove q e ) .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : iff (EqSet2.In q0 (EqSet2.remove q (eqs2 e)))\n  (EqSet.In q0 (EqSet.remove q e))",
                    "c1_q0 : EqSet2\\.elt",
                    "c1_e : eqs",
                    "c1_q : equation"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c1_goal : iff (EqSet2.In q0 (EqSet2.remove q (eqs2 e)))\n  (EqSet.In q0 (EqSet.remove q e))"
                ],
                "tactic_res": [
                    "c2_goal : forall _ : EqSet2.In q0 (EqSet2.remove q (eqs2 e)),\nEqSet.In q0 (EqSet.remove q e)",
                    "c3_goal : forall _ : EqSet.In q0 (EqSet.remove q e),\nEqSet2.In q0 (EqSet2.remove q (eqs2 e))"
                ]
            },
            {
                "tactic_sig": "intros _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c2_goal : forall _ : EqSet2.In q0 (EqSet2.remove q (eqs2 e)),\nEqSet.In q0 (EqSet.remove q e)"
                ],
                "tactic_res": [
                    "c4_goal : EqSet.In q0 (EqSet.remove q e)",
                    "c4_H : EqSet2.In q0 (EqSet2.remove q (eqs2 e))"
                ]
            },
            {
                "tactic_sig": "intros _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c3_goal : forall _ : EqSet.In q0 (EqSet.remove q e),\nEqSet2.In q0 (EqSet2.remove q (eqs2 e))"
                ],
                "tactic_res": [
                    "c5_goal : EqSet2.In q0 (EqSet2.remove q (eqs2 e))",
                    "c5_H : EqSet.In q0 (EqSet.remove q e)"
                ]
            },
            {
                "tactic_sig": "destruct ( OrderedEquation'.eq_dec _i _i ) as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct ( OrderedEquation'.eq_dec _i _i ) .",
                "tactic_args": [
                    "c4_goal : EqSet.In q0 (EqSet.remove q e)",
                    "c1_q : equation",
                    "c1_q0 : EqSet2\\.elt",
                    "c4_H : EqSet2.In q0 (EqSet2.remove q (eqs2 e))",
                    "c1_e : eqs"
                ],
                "tactic_res": [
                    "c6_goal : EqSet.In q0 (EqSet.remove q e)",
                    "c6_e0 : eq q q0",
                    "c7_goal : EqSet.In q0 (EqSet.remove q e)",
                    "c7_n : not (eq q q0)"
                ]
            },
            {
                "tactic_sig": "eelim EqSet2.remove_1 .",
                "tactic_sig_no_out_arg": "eelim EqSet2.remove_1 .",
                "tactic_args": [
                    "c6_goal : EqSet.In q0 (EqSet.remove q e)"
                ],
                "tactic_res": [
                    "c8_goal : eq ?x ?y",
                    "c9_goal : EqSet2.In q0 (EqSet2.remove q ?s)"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c8_goal : eq ?x ?y"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c9_goal : EqSet2.In q0 (EqSet2.remove q ?s)",
                    "c4_H : EqSet2.In q0 (EqSet2.remove q (eqs2 e))",
                    "c1_q0 : EqSet2\\.elt",
                    "c1_q : equation"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c7_goal : EqSet.In q0 (EqSet.remove q e)",
                    "_global_EqSet.remove_2 : forall (s : EqSet.t) (x y : EqSet.elt) (_ : not (eq x y))\n         (_ : EqSet.In y s), EqSet.In y (EqSet.remove x s)"
                ],
                "tactic_res": [
                    "c10_goal : not (eq q q0)",
                    "c11_goal : EqSet.In q0 e"
                ]
            },
            {
                "tactic_sig": "assumption .",
                "tactic_sig_no_out_arg": "assumption .",
                "tactic_args": [
                    "c10_goal : not (eq q q0)",
                    "c7_n : not (eq q q0)",
                    "c1_q0 : EqSet2\\.elt",
                    "c1_q : equation"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply ( _i _i ) .",
                "tactic_sig_no_out_arg": "apply ( _i _i ) .",
                "tactic_args": [
                    "c11_goal : EqSet.In q0 e",
                    "_global_eqs_same : forall (e : eqs) (q : EqSet2.elt),\n       iff (EqSet2.In q (eqs2 e)) (EqSet.In q e)",
                    "c1_e : eqs"
                ],
                "tactic_res": [
                    "c12_goal : EqSet2.In q0 (eqs2 e)"
                ]
            },
            {
                "tactic_sig": "apply _i with _i .",
                "tactic_sig_no_out_arg": "apply _i with _i .",
                "tactic_args": [
                    "c12_goal : EqSet2.In q0 (eqs2 e)",
                    "_global_EqSet2.remove_3 : forall (s : EqSet2.t) (x y : EqSet2.elt)\n         (_ : EqSet2.In y (EqSet2.remove x s)), EqSet2.In y s",
                    "c1_q : equation"
                ],
                "tactic_res": [
                    "c13_goal : EqSet2.In q0 (EqSet2.remove q (eqs2 e))"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c13_goal : EqSet2.In q0 (EqSet2.remove q (eqs2 e))",
                    "c4_H : EqSet2.In q0 (EqSet2.remove q (eqs2 e))",
                    "c1_q0 : EqSet2\\.elt",
                    "c1_e : eqs",
                    "c1_q : equation"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct ( OrderedEquation.eq_dec _i _i ) as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct ( OrderedEquation.eq_dec _i _i ) .",
                "tactic_args": [
                    "c5_goal : EqSet2.In q0 (EqSet2.remove q (eqs2 e))",
                    "c1_q : equation",
                    "c1_q0 : EqSet2\\.elt",
                    "c5_H : EqSet.In q0 (EqSet.remove q e)",
                    "c1_e : eqs"
                ],
                "tactic_res": [
                    "c14_goal : EqSet2.In q0 (EqSet2.remove q (eqs2 e))",
                    "c14_e0 : eq q q0",
                    "c15_goal : EqSet2.In q0 (EqSet2.remove q (eqs2 e))",
                    "c15_n : not (eq q q0)"
                ]
            },
            {
                "tactic_sig": "eelim EqSet.remove_1 .",
                "tactic_sig_no_out_arg": "eelim EqSet.remove_1 .",
                "tactic_args": [
                    "c14_goal : EqSet2.In q0 (EqSet2.remove q (eqs2 e))"
                ],
                "tactic_res": [
                    "c16_goal : eq ?x ?y",
                    "c17_goal : EqSet.In q0 (EqSet.remove q ?s)"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c16_goal : eq ?x ?y"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c17_goal : EqSet.In q0 (EqSet.remove q ?s)",
                    "c5_H : EqSet.In q0 (EqSet.remove q e)",
                    "c1_q0 : EqSet2\\.elt",
                    "c1_q : equation"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c15_goal : EqSet2.In q0 (EqSet2.remove q (eqs2 e))",
                    "_global_EqSet2.remove_2 : forall (s : EqSet2.t) (x y : EqSet2.elt) (_ : not (eq x y))\n         (_ : EqSet2.In y s), EqSet2.In y (EqSet2.remove x s)"
                ],
                "tactic_res": [
                    "c18_goal : not (eq q q0)",
                    "c19_goal : EqSet2.In q0 (eqs2 e)"
                ]
            },
            {
                "tactic_sig": "assumption .",
                "tactic_sig_no_out_arg": "assumption .",
                "tactic_args": [
                    "c18_goal : not (eq q q0)",
                    "c15_n : not (eq q q0)",
                    "c1_q0 : EqSet2\\.elt",
                    "c1_q : equation"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply ( _i _i ) .",
                "tactic_sig_no_out_arg": "apply ( _i _i ) .",
                "tactic_args": [
                    "c19_goal : EqSet2.In q0 (eqs2 e)",
                    "_global_eqs_same : forall (e : eqs) (q : EqSet2.elt),\n       iff (EqSet2.In q (eqs2 e)) (EqSet.In q e)",
                    "c1_e : eqs"
                ],
                "tactic_res": [
                    "c20_goal : EqSet.In q0 e"
                ]
            },
            {
                "tactic_sig": "apply _i with _i .",
                "tactic_sig_no_out_arg": "apply _i with _i .",
                "tactic_args": [
                    "c20_goal : EqSet.In q0 e",
                    "_global_EqSet.remove_3 : forall (s : EqSet.t) (x y : EqSet.elt)\n         (_ : EqSet.In y (EqSet.remove x s)), EqSet.In y s",
                    "c1_q : equation"
                ],
                "tactic_res": [
                    "c21_goal : EqSet.In q0 (EqSet.remove q e)"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c21_goal : EqSet.In q0 (EqSet.remove q e)",
                    "c5_H : EqSet.In q0 (EqSet.remove q e)",
                    "c1_q0 : EqSet2\\.elt",
                    "c1_e : eqs",
                    "c1_q : equation"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "eq_refl",
        "proof": [
            {
                "tactic_sig": "Lemma eq_refl : forall x , eq x x .",
                "tactic_sig_no_out_arg": "Lemma eq_refl : forall x , eq x x .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall x : t, eq x x"
                ]
            },
            {
                "tactic_sig": "intros _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c1_goal : forall x : t, eq x x"
                ],
                "tactic_res": [
                    "c2_goal : eq x x",
                    "c2_x : True"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c2_goal : eq x x",
                    "c2_x : True"
                ],
                "tactic_res": [
                    "c3_goal : eq (OK e) (OK e)",
                    "c3_e : eqs",
                    "c4_goal : eq (Error e) (Error e)",
                    "c4_e : errmsg"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c3_goal : eq (OK e) (OK e)"
                ],
                "tactic_res": [
                    "c5_goal : EqSet.Equal e e"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c4_goal : eq (Error e) (Error e)"
                ],
                "tactic_res": [
                    "c6_goal : True"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c6_goal : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "red .",
                "tactic_sig_no_out_arg": "red .",
                "tactic_args": [
                    "c5_goal : EqSet.Equal e e"
                ],
                "tactic_res": [
                    "c7_goal : forall a : EqSet.elt, iff (EqSet.In a e) (EqSet.In a e)"
                ]
            },
            {
                "tactic_sig": "tauto .",
                "tactic_sig_no_out_arg": "tauto .",
                "tactic_args": [
                    "c7_goal : forall a : EqSet.elt, iff (EqSet.In a e) (EqSet.In a e)"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "eq_sym",
        "proof": [
            {
                "tactic_sig": "Lemma eq_sym : forall x y , eq x y -> eq y x .",
                "tactic_sig_no_out_arg": "Lemma eq_sym : forall x y , eq x y -> eq y x .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (x y : t) (_ : eq x y), eq y x"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c1_goal : forall (x y : t) (_ : eq x y), eq y x",
                    "_global_eq : forall (_ : t) (_ : t), Prop"
                ],
                "tactic_res": [
                    "c2_goal : forall (x y : t)\n  (_ : match x with\n       | OK a =>\n           match y with\n           | OK b => EqSet.Equal a b\n           | Error _ => False\n           end\n       | Error _ => match y with\n                    | OK _ => False\n                    | Error _ => True\n                    end\n       end),\nmatch y with\n| OK a => match x with\n          | OK b => EqSet.Equal a b\n          | Error _ => False\n          end\n| Error _ => match x with\n             | OK _ => False\n             | Error _ => True\n             end\nend"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c2_goal : forall (x y : t)\n  (_ : match x with\n       | OK a =>\n           match y with\n           | OK b => EqSet.Equal a b\n           | Error _ => False\n           end\n       | Error _ => match y with\n                    | OK _ => False\n                    | Error _ => True\n                    end\n       end),\nmatch y with\n| OK a => match x with\n          | OK b => EqSet.Equal a b\n          | Error _ => False\n          end\n| Error _ => match x with\n             | OK _ => False\n             | Error _ => True\n             end\nend"
                ],
                "tactic_res": [
                    "c3_goal : match y with\n| OK a => match x with\n          | OK b => EqSet.Equal a b\n          | Error _ => False\n          end\n| Error _ => match x with\n             | OK _ => False\n             | Error _ => True\n             end\nend",
                    "c3_x : True",
                    "c3_y : True",
                    "c3_H : match x with\n| OK a => match y with\n          | OK b => EqSet.Equal a b\n          | Error _ => False\n          end\n| Error _ => match y with\n             | OK _ => False\n             | Error _ => True\n             end\nend"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ e|e ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ e|e ] .",
                "tactic_args": [
                    "c3_goal : match y with\n| OK a => match x with\n          | OK b => EqSet.Equal a b\n          | Error _ => False\n          end\n| Error _ => match x with\n             | OK _ => False\n             | Error _ => True\n             end\nend",
                    "c3_x : True",
                    "c3_H : match x with\n| OK a => match y with\n          | OK b => EqSet.Equal a b\n          | Error _ => False\n          end\n| Error _ => match y with\n             | OK _ => False\n             | Error _ => True\n             end\nend",
                    "c3_y : True"
                ],
                "tactic_res": [
                    "c4_goal : match y with\n| OK a => EqSet.Equal a e\n| Error _ => False\nend",
                    "c4_H : match y with\n| OK b => EqSet.Equal e b\n| Error _ => False\nend",
                    "c4_e : eqs",
                    "c5_goal : match y with\n| OK _ => False\n| Error _ => True\nend",
                    "c5_H : match y with\n| OK _ => False\n| Error _ => True\nend",
                    "c5_e : errmsg"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ e0|e0 ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ e0|e0 ] .",
                "tactic_args": [
                    "c4_goal : match y with\n| OK a => EqSet.Equal a e\n| Error _ => False\nend",
                    "c3_y : True",
                    "c4_H : match y with\n| OK b => EqSet.Equal e b\n| Error _ => False\nend",
                    "c4_e : eqs"
                ],
                "tactic_res": [
                    "c6_goal : EqSet.Equal e0 e",
                    "c6_H : EqSet.Equal e e0",
                    "c6_e0 : eqs",
                    "c7_goal : False",
                    "c7_H : False",
                    "c7_e0 : errmsg"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c7_goal : False",
                    "c7_H : False"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [ e0|e0 ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ e0|e0 ] .",
                "tactic_args": [
                    "c5_goal : match y with\n| OK _ => False\n| Error _ => True\nend",
                    "c3_y : True",
                    "c5_H : match y with\n| OK _ => False\n| Error _ => True\nend",
                    "c5_e : errmsg"
                ],
                "tactic_res": [
                    "c8_goal : False",
                    "c8_H : False",
                    "c8_e0 : eqs",
                    "c9_goal : True",
                    "c9_H : True",
                    "c9_e0 : errmsg"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c8_goal : False",
                    "c8_H : False"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c9_goal : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "red in _i .",
                "tactic_sig_no_out_arg": "red in _i .",
                "tactic_args": [
                    "c6_H : EqSet.Equal e e0"
                ],
                "tactic_res": [
                    "c6_H : forall a : EqSet.elt, iff (EqSet.In a e) (EqSet.In a e0)"
                ]
            },
            {
                "tactic_sig": "red .",
                "tactic_sig_no_out_arg": "red .",
                "tactic_args": [
                    "c6_goal : EqSet.Equal e0 e"
                ],
                "tactic_res": [
                    "c10_goal : forall a : EqSet.elt, iff (EqSet.In a e0) (EqSet.In a e)"
                ]
            },
            {
                "tactic_sig": "intros _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c10_goal : forall a : EqSet.elt, iff (EqSet.In a e0) (EqSet.In a e)"
                ],
                "tactic_res": [
                    "c11_goal : iff (EqSet.In a e0) (EqSet.In a e)",
                    "c11_a : EqSet\\.elt"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c11_goal : iff (EqSet.In a e0) (EqSet.In a e)",
                    "c6_H : forall a : EqSet.elt, iff (EqSet.In a e) (EqSet.In a e0)"
                ],
                "tactic_res": [
                    "c12_goal : iff (EqSet.In a e0) (EqSet.In a e0)"
                ]
            },
            {
                "tactic_sig": "tauto .",
                "tactic_sig_no_out_arg": "tauto .",
                "tactic_args": [
                    "c12_goal : iff (EqSet.In a e0) (EqSet.In a e0)"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "eq_trans",
        "proof": [
            {
                "tactic_sig": "Lemma eq_trans : forall x y z , eq x y -> eq y z -> eq x z .",
                "tactic_sig_no_out_arg": "Lemma eq_trans : forall x y z , eq x y -> eq y z -> eq x z .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (x y z : t) (_ : eq x y) (_ : eq y z), eq x z"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c1_goal : forall (x y z : t) (_ : eq x y) (_ : eq y z), eq x z",
                    "_global_eq : forall (_ : t) (_ : t), Prop"
                ],
                "tactic_res": [
                    "c2_goal : forall (x y z : t)\n  (_ : match x with\n       | OK a =>\n           match y with\n           | OK b => EqSet.Equal a b\n           | Error _ => False\n           end\n       | Error _ => match y with\n                    | OK _ => False\n                    | Error _ => True\n                    end\n       end)\n  (_ : match y with\n       | OK a =>\n           match z with\n           | OK b => EqSet.Equal a b\n           | Error _ => False\n           end\n       | Error _ => match z with\n                    | OK _ => False\n                    | Error _ => True\n                    end\n       end),\nmatch x with\n| OK a => match z with\n          | OK b => EqSet.Equal a b\n          | Error _ => False\n          end\n| Error _ => match z with\n             | OK _ => False\n             | Error _ => True\n             end\nend"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c2_goal : forall (x y z : t)\n  (_ : match x with\n       | OK a =>\n           match y with\n           | OK b => EqSet.Equal a b\n           | Error _ => False\n           end\n       | Error _ => match y with\n                    | OK _ => False\n                    | Error _ => True\n                    end\n       end)\n  (_ : match y with\n       | OK a =>\n           match z with\n           | OK b => EqSet.Equal a b\n           | Error _ => False\n           end\n       | Error _ => match z with\n                    | OK _ => False\n                    | Error _ => True\n                    end\n       end),\nmatch x with\n| OK a => match z with\n          | OK b => EqSet.Equal a b\n          | Error _ => False\n          end\n| Error _ => match z with\n             | OK _ => False\n             | Error _ => True\n             end\nend"
                ],
                "tactic_res": [
                    "c3_goal : match x with\n| OK a => match z with\n          | OK b => EqSet.Equal a b\n          | Error _ => False\n          end\n| Error _ => match z with\n             | OK _ => False\n             | Error _ => True\n             end\nend",
                    "c3_x : True",
                    "c3_y : True",
                    "c3_z : True",
                    "c3_H : match x with\n| OK a => match y with\n          | OK b => EqSet.Equal a b\n          | Error _ => False\n          end\n| Error _ => match y with\n             | OK _ => False\n             | Error _ => True\n             end\nend",
                    "c3_H0 : match y with\n| OK a => match z with\n          | OK b => EqSet.Equal a b\n          | Error _ => False\n          end\n| Error _ => match z with\n             | OK _ => False\n             | Error _ => True\n             end\nend"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ e|e ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ e|e ] .",
                "tactic_args": [
                    "c3_goal : match x with\n| OK a => match z with\n          | OK b => EqSet.Equal a b\n          | Error _ => False\n          end\n| Error _ => match z with\n             | OK _ => False\n             | Error _ => True\n             end\nend",
                    "c3_x : True",
                    "c3_H0 : match y with\n| OK a => match z with\n          | OK b => EqSet.Equal a b\n          | Error _ => False\n          end\n| Error _ => match z with\n             | OK _ => False\n             | Error _ => True\n             end\nend",
                    "c3_H : match x with\n| OK a => match y with\n          | OK b => EqSet.Equal a b\n          | Error _ => False\n          end\n| Error _ => match y with\n             | OK _ => False\n             | Error _ => True\n             end\nend",
                    "c3_z : True"
                ],
                "tactic_res": [
                    "c4_goal : match z with\n| OK b => EqSet.Equal e b\n| Error _ => False\nend",
                    "c4_H : match y with\n| OK b => EqSet.Equal e b\n| Error _ => False\nend",
                    "c4_e : eqs",
                    "c5_goal : match z with\n| OK _ => False\n| Error _ => True\nend",
                    "c5_H : match y with\n| OK _ => False\n| Error _ => True\nend",
                    "c5_e : errmsg"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ e0|e0 ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ e0|e0 ] .",
                "tactic_args": [
                    "c4_goal : match z with\n| OK b => EqSet.Equal e b\n| Error _ => False\nend",
                    "c3_y : True",
                    "c3_H0 : match y with\n| OK a => match z with\n          | OK b => EqSet.Equal a b\n          | Error _ => False\n          end\n| Error _ => match z with\n             | OK _ => False\n             | Error _ => True\n             end\nend",
                    "c4_H : match y with\n| OK b => EqSet.Equal e b\n| Error _ => False\nend",
                    "c3_z : True",
                    "c4_e : eqs"
                ],
                "tactic_res": [
                    "c6_goal : match z with\n| OK b => EqSet.Equal e b\n| Error _ => False\nend",
                    "c6_H0 : match z with\n| OK b => EqSet.Equal e0 b\n| Error _ => False\nend",
                    "c6_H : EqSet.Equal e e0",
                    "c6_e0 : eqs",
                    "c7_goal : match z with\n| OK b => EqSet.Equal e b\n| Error _ => False\nend",
                    "c7_H0 : match z with\n| OK _ => False\n| Error _ => True\nend",
                    "c7_H : False",
                    "c7_e0 : errmsg"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ e1|e1 ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ e1|e1 ] .",
                "tactic_args": [
                    "c6_goal : match z with\n| OK b => EqSet.Equal e b\n| Error _ => False\nend",
                    "c3_z : True",
                    "c6_H0 : match z with\n| OK b => EqSet.Equal e0 b\n| Error _ => False\nend",
                    "c6_H : EqSet.Equal e e0",
                    "c4_e : eqs"
                ],
                "tactic_res": [
                    "c8_goal : EqSet.Equal e e1",
                    "c8_H0 : EqSet.Equal e0 e1",
                    "c8_e1 : eqs",
                    "c9_goal : False",
                    "c9_H0 : False",
                    "c9_e1 : errmsg"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c9_goal : False",
                    "c9_H0 : False"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "try contradiction .",
                "tactic_sig_no_out_arg": "try contradiction .",
                "tactic_args": [
                    "c7_goal : match z with\n| OK b => EqSet.Equal e b\n| Error _ => False\nend"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [ e0|e0 ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ e0|e0 ] .",
                "tactic_args": [
                    "c5_goal : match z with\n| OK _ => False\n| Error _ => True\nend",
                    "c3_y : True",
                    "c3_H0 : match y with\n| OK a => match z with\n          | OK b => EqSet.Equal a b\n          | Error _ => False\n          end\n| Error _ => match z with\n             | OK _ => False\n             | Error _ => True\n             end\nend",
                    "c5_H : match y with\n| OK _ => False\n| Error _ => True\nend",
                    "c3_z : True",
                    "c5_e : errmsg"
                ],
                "tactic_res": [
                    "c10_goal : match z with\n| OK _ => False\n| Error _ => True\nend",
                    "c10_H0 : match z with\n| OK b => EqSet.Equal e0 b\n| Error _ => False\nend",
                    "c10_H : False",
                    "c10_e0 : eqs",
                    "c11_goal : match z with\n| OK _ => False\n| Error _ => True\nend",
                    "c11_H0 : match z with\n| OK _ => False\n| Error _ => True\nend",
                    "c11_H : True",
                    "c11_e0 : errmsg"
                ]
            },
            {
                "tactic_sig": "try contradiction .",
                "tactic_sig_no_out_arg": "try contradiction .",
                "tactic_args": [
                    "c10_goal : match z with\n| OK _ => False\n| Error _ => True\nend"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [ e1|e1 ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ e1|e1 ] .",
                "tactic_args": [
                    "c11_goal : match z with\n| OK _ => False\n| Error _ => True\nend",
                    "c3_z : True",
                    "c11_H0 : match z with\n| OK _ => False\n| Error _ => True\nend",
                    "c11_H : True",
                    "c5_e : errmsg",
                    "c11_e0 : errmsg"
                ],
                "tactic_res": [
                    "c12_goal : False",
                    "c12_H0 : False",
                    "c12_e1 : eqs",
                    "c13_goal : True",
                    "c13_H0 : True",
                    "c13_e1 : errmsg"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c12_goal : False",
                    "c12_H0 : False"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c13_goal : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "red in _i .",
                "tactic_sig_no_out_arg": "red in _i .",
                "tactic_args": [
                    "c8_H : EqSet.Equal e e0"
                ],
                "tactic_res": [
                    "c8_H : forall a : EqSet.elt, iff (EqSet.In a e) (EqSet.In a e0)"
                ]
            },
            {
                "tactic_sig": "red in _i .",
                "tactic_sig_no_out_arg": "red in _i .",
                "tactic_args": [
                    "c8_H0 : EqSet.Equal e0 e1"
                ],
                "tactic_res": [
                    "c8_H0 : forall a : EqSet.elt, iff (EqSet.In a e0) (EqSet.In a e1)"
                ]
            },
            {
                "tactic_sig": "red .",
                "tactic_sig_no_out_arg": "red .",
                "tactic_args": [
                    "c8_goal : EqSet.Equal e e1"
                ],
                "tactic_res": [
                    "c14_goal : forall a : EqSet.elt, iff (EqSet.In a e) (EqSet.In a e1)"
                ]
            },
            {
                "tactic_sig": "intros _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c14_goal : forall a : EqSet.elt, iff (EqSet.In a e) (EqSet.In a e1)"
                ],
                "tactic_res": [
                    "c15_goal : iff (EqSet.In a e) (EqSet.In a e1)",
                    "c15_a : EqSet\\.elt"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c15_goal : iff (EqSet.In a e) (EqSet.In a e1)",
                    "c8_H : forall a : EqSet.elt, iff (EqSet.In a e) (EqSet.In a e0)"
                ],
                "tactic_res": [
                    "c16_goal : iff (EqSet.In a e0) (EqSet.In a e1)"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c16_goal : iff (EqSet.In a e0) (EqSet.In a e1)",
                    "c15_a : EqSet\\.elt",
                    "c8_H0 : forall a : EqSet.elt, iff (EqSet.In a e0) (EqSet.In a e1)",
                    "c6_e0 : eqs",
                    "c8_e1 : eqs"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "beq_correct",
        "proof": [
            {
                "tactic_sig": "Lemma beq_correct : forall x y , beq x y = true -> eq x y .",
                "tactic_sig_no_out_arg": "Lemma beq_correct : forall x y , beq x y = true -> eq x y .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (x y : t) (_ : Logic.eq (beq x y) true), eq x y"
                ]
            },
            {
                "tactic_sig": "unfold _i , _i .",
                "tactic_sig_no_out_arg": "unfold _i , _i .",
                "tactic_args": [
                    "c1_goal : forall (x y : t) (_ : Logic.eq (beq x y) true), eq x y",
                    "_global_beq : forall (_ : t) (_ : t), bool",
                    "_global_eq : forall (_ : t) (_ : t), Prop"
                ],
                "tactic_res": [
                    "c2_goal : forall (x y : t)\n  (_ : Logic.eq\n         match x with\n         | OK a =>\n             match y with\n             | OK b => EqSet.equal a b\n             | Error _ => false\n             end\n         | Error _ =>\n             match y with\n             | OK _ => false\n             | Error _ => true\n             end\n         end true),\nmatch x with\n| OK a => match y with\n          | OK b => EqSet.Equal a b\n          | Error _ => False\n          end\n| Error _ => match y with\n             | OK _ => False\n             | Error _ => True\n             end\nend"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c2_goal : forall (x y : t)\n  (_ : Logic.eq\n         match x with\n         | OK a =>\n             match y with\n             | OK b => EqSet.equal a b\n             | Error _ => false\n             end\n         | Error _ =>\n             match y with\n             | OK _ => false\n             | Error _ => true\n             end\n         end true),\nmatch x with\n| OK a => match y with\n          | OK b => EqSet.Equal a b\n          | Error _ => False\n          end\n| Error _ => match y with\n             | OK _ => False\n             | Error _ => True\n             end\nend"
                ],
                "tactic_res": [
                    "c3_goal : match x with\n| OK a => match y with\n          | OK b => EqSet.Equal a b\n          | Error _ => False\n          end\n| Error _ => match y with\n             | OK _ => False\n             | Error _ => True\n             end\nend",
                    "c3_x : True",
                    "c3_y : True",
                    "c3_H : Logic.eq\n  match x with\n  | OK a =>\n      match y with\n      | OK b => EqSet.equal a b\n      | Error _ => false\n      end\n  | Error _ => match y with\n               | OK _ => false\n               | Error _ => true\n               end\n  end true"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ e|e ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ e|e ] .",
                "tactic_args": [
                    "c3_goal : match x with\n| OK a => match y with\n          | OK b => EqSet.Equal a b\n          | Error _ => False\n          end\n| Error _ => match y with\n             | OK _ => False\n             | Error _ => True\n             end\nend",
                    "c3_x : True",
                    "c3_H : Logic.eq\n  match x with\n  | OK a =>\n      match y with\n      | OK b => EqSet.equal a b\n      | Error _ => false\n      end\n  | Error _ => match y with\n               | OK _ => false\n               | Error _ => true\n               end\n  end true",
                    "c3_y : True"
                ],
                "tactic_res": [
                    "c4_goal : match y with\n| OK b => EqSet.Equal e b\n| Error _ => False\nend",
                    "c4_H : Logic.eq match y with\n         | OK b => EqSet.equal e b\n         | Error _ => false\n         end true",
                    "c4_e : eqs",
                    "c5_goal : match y with\n| OK _ => False\n| Error _ => True\nend",
                    "c5_H : Logic.eq match y with\n         | OK _ => false\n         | Error _ => true\n         end true",
                    "c5_e : errmsg"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ e0|e0 ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ e0|e0 ] .",
                "tactic_args": [
                    "c4_goal : match y with\n| OK b => EqSet.Equal e b\n| Error _ => False\nend",
                    "c3_y : True",
                    "c4_H : Logic.eq match y with\n         | OK b => EqSet.equal e b\n         | Error _ => false\n         end true",
                    "c4_e : eqs"
                ],
                "tactic_res": [
                    "c6_goal : EqSet.Equal e e0",
                    "c6_H : Logic.eq (EqSet.equal e e0) true",
                    "c6_e0 : eqs",
                    "c7_goal : False",
                    "c7_H : Logic.eq false true",
                    "c7_e0 : errmsg"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ e0|e0 ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ e0|e0 ] .",
                "tactic_args": [
                    "c5_goal : match y with\n| OK _ => False\n| Error _ => True\nend",
                    "c3_y : True",
                    "c5_H : Logic.eq match y with\n         | OK _ => false\n         | Error _ => true\n         end true",
                    "c5_e : errmsg"
                ],
                "tactic_res": [
                    "c8_goal : False",
                    "c8_H : Logic.eq false true",
                    "c8_e0 : eqs",
                    "c9_goal : True",
                    "c9_H : Logic.eq true true",
                    "c9_e0 : errmsg"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c6_goal : EqSet.Equal e e0",
                    "_global_EqSet.equal_2 : forall (s s' : EqSet.t) (_ : Logic.eq (EqSet.equal s s') true),\n       EqSet.Equal s s'"
                ],
                "tactic_res": [
                    "c10_goal : Logic.eq (EqSet.equal e e0) true"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c10_goal : Logic.eq (EqSet.equal e e0) true",
                    "c6_H : Logic.eq (EqSet.equal e e0) true",
                    "c4_e : eqs",
                    "c6_e0 : eqs"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "discriminate .",
                "tactic_sig_no_out_arg": "discriminate .",
                "tactic_args": [
                    "c7_goal : False"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "discriminate .",
                "tactic_sig_no_out_arg": "discriminate .",
                "tactic_args": [
                    "c8_goal : False"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c9_goal : True"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "ge_refl",
        "proof": [
            {
                "tactic_sig": "Lemma ge_refl : forall x y , eq x y -> ge x y .",
                "tactic_sig_no_out_arg": "Lemma ge_refl : forall x y , eq x y -> ge x y .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (x y : t) (_ : eq x y), ge x y"
                ]
            },
            {
                "tactic_sig": "unfold _i , _i , _i , _i .",
                "tactic_sig_no_out_arg": "unfold _i , _i , _i , _i .",
                "tactic_args": [
                    "c1_goal : forall (x y : t) (_ : eq x y), ge x y",
                    "_global_eq : forall (_ : t) (_ : t), Prop",
                    "_global_ge : forall (_ : t) (_ : t), Prop",
                    "_global_EqSet.Equal : forall (_ : EqSet.t) (_ : EqSet.t), Prop",
                    "_global_EqSet.Subset : forall (_ : EqSet.t) (_ : EqSet.t), Prop"
                ],
                "tactic_res": [
                    "c2_goal : forall (x y : t)\n  (_ : match x with\n       | OK a =>\n           match y with\n           | OK b =>\n               forall a0 : EqSet.elt,\n               iff (EqSet.In a0 a) (EqSet.In a0 b)\n           | Error _ => False\n           end\n       | Error _ => match y with\n                    | OK _ => False\n                    | Error _ => True\n                    end\n       end),\nmatch x with\n| OK a =>\n    match y with\n    | OK b =>\n        forall (a0 : EqSet.elt) (_ : EqSet.In a0 b), EqSet.In a0 a\n    | Error _ => False\n    end\n| Error _ => True\nend"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c2_goal : forall (x y : t)\n  (_ : match x with\n       | OK a =>\n           match y with\n           | OK b =>\n               forall a0 : EqSet.elt,\n               iff (EqSet.In a0 a) (EqSet.In a0 b)\n           | Error _ => False\n           end\n       | Error _ => match y with\n                    | OK _ => False\n                    | Error _ => True\n                    end\n       end),\nmatch x with\n| OK a =>\n    match y with\n    | OK b =>\n        forall (a0 : EqSet.elt) (_ : EqSet.In a0 b), EqSet.In a0 a\n    | Error _ => False\n    end\n| Error _ => True\nend"
                ],
                "tactic_res": [
                    "c3_goal : match x with\n| OK a =>\n    match y with\n    | OK b =>\n        forall (a0 : EqSet.elt) (_ : EqSet.In a0 b), EqSet.In a0 a\n    | Error _ => False\n    end\n| Error _ => True\nend",
                    "c3_x : True",
                    "c3_y : True",
                    "c3_H : match x with\n| OK a =>\n    match y with\n    | OK b =>\n        forall a0 : EqSet.elt, iff (EqSet.In a0 a) (EqSet.In a0 b)\n    | Error _ => False\n    end\n| Error _ => match y with\n             | OK _ => False\n             | Error _ => True\n             end\nend"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ e|e ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ e|e ] .",
                "tactic_args": [
                    "c3_goal : match x with\n| OK a =>\n    match y with\n    | OK b =>\n        forall (a0 : EqSet.elt) (_ : EqSet.In a0 b), EqSet.In a0 a\n    | Error _ => False\n    end\n| Error _ => True\nend",
                    "c3_x : True",
                    "c3_H : match x with\n| OK a =>\n    match y with\n    | OK b =>\n        forall a0 : EqSet.elt, iff (EqSet.In a0 a) (EqSet.In a0 b)\n    | Error _ => False\n    end\n| Error _ => match y with\n             | OK _ => False\n             | Error _ => True\n             end\nend",
                    "c3_y : True"
                ],
                "tactic_res": [
                    "c4_goal : match y with\n| OK b => forall (a : EqSet.elt) (_ : EqSet.In a b), EqSet.In a e\n| Error _ => False\nend",
                    "c4_H : match y with\n| OK b => forall a : EqSet.elt, iff (EqSet.In a e) (EqSet.In a b)\n| Error _ => False\nend",
                    "c4_e : eqs",
                    "c5_goal : True",
                    "c5_H : match y with\n| OK _ => False\n| Error _ => True\nend",
                    "c5_e : errmsg"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ e0|e0 ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ e0|e0 ] .",
                "tactic_args": [
                    "c4_goal : match y with\n| OK b => forall (a : EqSet.elt) (_ : EqSet.In a b), EqSet.In a e\n| Error _ => False\nend",
                    "c3_y : True",
                    "c4_H : match y with\n| OK b => forall a : EqSet.elt, iff (EqSet.In a e) (EqSet.In a b)\n| Error _ => False\nend",
                    "c4_e : eqs"
                ],
                "tactic_res": [
                    "c6_goal : forall (a : EqSet.elt) (_ : EqSet.In a e0), EqSet.In a e",
                    "c6_H : forall a : EqSet.elt, iff (EqSet.In a e) (EqSet.In a e0)",
                    "c6_e0 : eqs",
                    "c7_goal : False",
                    "c7_H : False",
                    "c7_e0 : errmsg"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c7_goal : False",
                    "c7_H : False"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [ e0|e0 ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ e0|e0 ] .",
                "tactic_args": [
                    "c5_goal : True",
                    "c3_y : True",
                    "c5_H : match y with\n| OK _ => False\n| Error _ => True\nend",
                    "c5_e : errmsg"
                ],
                "tactic_res": [
                    "c8_goal : True",
                    "c8_H : False",
                    "c8_e0 : eqs",
                    "c9_goal : True",
                    "c9_H : True",
                    "c9_e0 : errmsg"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c8_goal : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c9_goal : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "intros _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c6_goal : forall (a : EqSet.elt) (_ : EqSet.In a e0), EqSet.In a e"
                ],
                "tactic_res": [
                    "c10_goal : EqSet.In a e",
                    "c10_a : EqSet\\.elt",
                    "c10_H0 : EqSet.In a e0"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c10_goal : EqSet.In a e",
                    "c6_H : forall a : EqSet.elt, iff (EqSet.In a e) (EqSet.In a e0)"
                ],
                "tactic_res": [
                    "c11_goal : EqSet.In a e0"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c11_goal : EqSet.In a e0",
                    "c10_H0 : EqSet.In a e0",
                    "c10_a : EqSet\\.elt",
                    "c6_e0 : eqs"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "ge_trans",
        "proof": [
            {
                "tactic_sig": "Lemma ge_trans : forall x y z , ge x y -> ge y z -> ge x z .",
                "tactic_sig_no_out_arg": "Lemma ge_trans : forall x y z , ge x y -> ge y z -> ge x z .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (x y z : t) (_ : ge x y) (_ : ge y z), ge x z"
                ]
            },
            {
                "tactic_sig": "unfold _i , _i .",
                "tactic_sig_no_out_arg": "unfold _i , _i .",
                "tactic_args": [
                    "c1_goal : forall (x y z : t) (_ : ge x y) (_ : ge y z), ge x z",
                    "_global_ge : forall (_ : t) (_ : t), Prop",
                    "_global_EqSet.Subset : forall (_ : EqSet.t) (_ : EqSet.t), Prop"
                ],
                "tactic_res": [
                    "c2_goal : forall (x y z : t)\n  (_ : match x with\n       | OK a =>\n           match y with\n           | OK b =>\n               forall (a0 : EqSet.elt) (_ : EqSet.In a0 b),\n               EqSet.In a0 a\n           | Error _ => False\n           end\n       | Error _ => True\n       end)\n  (_ : match y with\n       | OK a =>\n           match z with\n           | OK b =>\n               forall (a0 : EqSet.elt) (_ : EqSet.In a0 b),\n               EqSet.In a0 a\n           | Error _ => False\n           end\n       | Error _ => True\n       end),\nmatch x with\n| OK a =>\n    match z with\n    | OK b =>\n        forall (a0 : EqSet.elt) (_ : EqSet.In a0 b), EqSet.In a0 a\n    | Error _ => False\n    end\n| Error _ => True\nend"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c2_goal : forall (x y z : t)\n  (_ : match x with\n       | OK a =>\n           match y with\n           | OK b =>\n               forall (a0 : EqSet.elt) (_ : EqSet.In a0 b),\n               EqSet.In a0 a\n           | Error _ => False\n           end\n       | Error _ => True\n       end)\n  (_ : match y with\n       | OK a =>\n           match z with\n           | OK b =>\n               forall (a0 : EqSet.elt) (_ : EqSet.In a0 b),\n               EqSet.In a0 a\n           | Error _ => False\n           end\n       | Error _ => True\n       end),\nmatch x with\n| OK a =>\n    match z with\n    | OK b =>\n        forall (a0 : EqSet.elt) (_ : EqSet.In a0 b), EqSet.In a0 a\n    | Error _ => False\n    end\n| Error _ => True\nend"
                ],
                "tactic_res": [
                    "c3_goal : match x with\n| OK a =>\n    match z with\n    | OK b =>\n        forall (a0 : EqSet.elt) (_ : EqSet.In a0 b), EqSet.In a0 a\n    | Error _ => False\n    end\n| Error _ => True\nend",
                    "c3_x : True",
                    "c3_y : True",
                    "c3_z : True",
                    "c3_H : match x with\n| OK a =>\n    match y with\n    | OK b =>\n        forall (a0 : EqSet.elt) (_ : EqSet.In a0 b), EqSet.In a0 a\n    | Error _ => False\n    end\n| Error _ => True\nend",
                    "c3_H0 : match y with\n| OK a =>\n    match z with\n    | OK b =>\n        forall (a0 : EqSet.elt) (_ : EqSet.In a0 b), EqSet.In a0 a\n    | Error _ => False\n    end\n| Error _ => True\nend"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ e|e ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ e|e ] .",
                "tactic_args": [
                    "c3_goal : match x with\n| OK a =>\n    match z with\n    | OK b =>\n        forall (a0 : EqSet.elt) (_ : EqSet.In a0 b), EqSet.In a0 a\n    | Error _ => False\n    end\n| Error _ => True\nend",
                    "c3_x : True",
                    "c3_H0 : match y with\n| OK a =>\n    match z with\n    | OK b =>\n        forall (a0 : EqSet.elt) (_ : EqSet.In a0 b), EqSet.In a0 a\n    | Error _ => False\n    end\n| Error _ => True\nend",
                    "c3_H : match x with\n| OK a =>\n    match y with\n    | OK b =>\n        forall (a0 : EqSet.elt) (_ : EqSet.In a0 b), EqSet.In a0 a\n    | Error _ => False\n    end\n| Error _ => True\nend",
                    "c3_z : True"
                ],
                "tactic_res": [
                    "c4_goal : match z with\n| OK b => forall (a : EqSet.elt) (_ : EqSet.In a b), EqSet.In a e\n| Error _ => False\nend",
                    "c4_H : match y with\n| OK b => forall (a : EqSet.elt) (_ : EqSet.In a b), EqSet.In a e\n| Error _ => False\nend",
                    "c4_e : eqs",
                    "c5_goal : True",
                    "c5_H : True",
                    "c5_e : errmsg"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ e0|e0 ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ e0|e0 ] .",
                "tactic_args": [
                    "c4_goal : match z with\n| OK b => forall (a : EqSet.elt) (_ : EqSet.In a b), EqSet.In a e\n| Error _ => False\nend",
                    "c3_y : True",
                    "c3_H0 : match y with\n| OK a =>\n    match z with\n    | OK b =>\n        forall (a0 : EqSet.elt) (_ : EqSet.In a0 b), EqSet.In a0 a\n    | Error _ => False\n    end\n| Error _ => True\nend",
                    "c4_H : match y with\n| OK b => forall (a : EqSet.elt) (_ : EqSet.In a b), EqSet.In a e\n| Error _ => False\nend",
                    "c3_z : True",
                    "c4_e : eqs"
                ],
                "tactic_res": [
                    "c6_goal : match z with\n| OK b => forall (a : EqSet.elt) (_ : EqSet.In a b), EqSet.In a e\n| Error _ => False\nend",
                    "c6_H0 : match z with\n| OK b => forall (a : EqSet.elt) (_ : EqSet.In a b), EqSet.In a e0\n| Error _ => False\nend",
                    "c6_H : forall (a : EqSet.elt) (_ : EqSet.In a e0), EqSet.In a e",
                    "c6_e0 : eqs",
                    "c7_goal : match z with\n| OK b => forall (a : EqSet.elt) (_ : EqSet.In a b), EqSet.In a e\n| Error _ => False\nend",
                    "c7_H0 : True",
                    "c7_H : False",
                    "c7_e0 : errmsg"
                ]
            },
            {
                "tactic_sig": "try contradiction .",
                "tactic_sig_no_out_arg": "try contradiction .",
                "tactic_args": [
                    "c7_goal : match z with\n| OK b => forall (a : EqSet.elt) (_ : EqSet.In a b), EqSet.In a e\n| Error _ => False\nend"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c5_goal : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [ e1|e1 ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ e1|e1 ] .",
                "tactic_args": [
                    "c6_goal : match z with\n| OK b => forall (a : EqSet.elt) (_ : EqSet.In a b), EqSet.In a e\n| Error _ => False\nend",
                    "c3_z : True",
                    "c6_H0 : match z with\n| OK b => forall (a : EqSet.elt) (_ : EqSet.In a b), EqSet.In a e0\n| Error _ => False\nend",
                    "c6_H : forall (a : EqSet.elt) (_ : EqSet.In a e0), EqSet.In a e",
                    "c4_e : eqs"
                ],
                "tactic_res": [
                    "c8_goal : forall (a : EqSet.elt) (_ : EqSet.In a e1), EqSet.In a e",
                    "c8_H0 : forall (a : EqSet.elt) (_ : EqSet.In a e1), EqSet.In a e0",
                    "c8_e1 : eqs",
                    "c9_goal : False",
                    "c9_H0 : False",
                    "c9_e1 : errmsg"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c8_goal : forall (a : EqSet.elt) (_ : EqSet.In a e1), EqSet.In a e",
                    "c8_H0 : forall (a : EqSet.elt) (_ : EqSet.In a e1), EqSet.In a e0",
                    "c6_H : forall (a : EqSet.elt) (_ : EqSet.In a e0), EqSet.In a e",
                    "c4_e : eqs",
                    "c8_e1 : eqs"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c9_goal : False",
                    "c9_H0 : False"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "ge_bot",
        "proof": [
            {
                "tactic_sig": "Lemma ge_bot : forall x , ge x bot .",
                "tactic_sig_no_out_arg": "Lemma ge_bot : forall x , ge x bot .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall x : t, ge x bot"
                ]
            },
            {
                "tactic_sig": "unfold _i , _i , _i .",
                "tactic_sig_no_out_arg": "unfold _i , _i , _i .",
                "tactic_args": [
                    "c1_goal : forall x : t, ge x bot",
                    "_global_ge : forall (_ : t) (_ : t), Prop",
                    "_global_bot : t",
                    "_global_EqSet.Subset : forall (_ : EqSet.t) (_ : EqSet.t), Prop"
                ],
                "tactic_res": [
                    "c2_goal : forall x : t,\nmatch x with\n| OK a =>\n    forall (a0 : EqSet.elt) (_ : EqSet.In a0 empty_eqs), EqSet.In a0 a\n| Error _ => True\nend"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c2_goal : forall x : t,\nmatch x with\n| OK a =>\n    forall (a0 : EqSet.elt) (_ : EqSet.In a0 empty_eqs), EqSet.In a0 a\n| Error _ => True\nend"
                ],
                "tactic_res": [
                    "c3_goal : forall x : t,\nmatch x with\n| OK a =>\n    forall (a0 : EqSet.elt) (_ : EqSet.In a0 EqSet.empty),\n    EqSet.In a0 a\n| Error _ => True\nend"
                ]
            },
            {
                "tactic_sig": "intros _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c3_goal : forall x : t,\nmatch x with\n| OK a =>\n    forall (a0 : EqSet.elt) (_ : EqSet.In a0 EqSet.empty),\n    EqSet.In a0 a\n| Error _ => True\nend"
                ],
                "tactic_res": [
                    "c4_goal : match x with\n| OK a =>\n    forall (a0 : EqSet.elt) (_ : EqSet.In a0 EqSet.empty),\n    EqSet.In a0 a\n| Error _ => True\nend",
                    "c4_x : True"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c4_goal : match x with\n| OK a =>\n    forall (a0 : EqSet.elt) (_ : EqSet.In a0 EqSet.empty),\n    EqSet.In a0 a\n| Error _ => True\nend",
                    "c4_x : True"
                ],
                "tactic_res": [
                    "c5_goal : forall (a : EqSet.elt) (_ : EqSet.In a EqSet.empty), EqSet.In a e",
                    "c5_e : eqs",
                    "c6_goal : True",
                    "c6_e : errmsg"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c6_goal : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "intros _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c5_goal : forall (a : EqSet.elt) (_ : EqSet.In a EqSet.empty), EqSet.In a e"
                ],
                "tactic_res": [
                    "c7_goal : EqSet.In a e",
                    "c7_a : EqSet\\.elt",
                    "c7_H : EqSet.In a EqSet.empty"
                ]
            },
            {
                "tactic_sig": "elim ( EqSet.empty_1 _i ) .",
                "tactic_sig_no_out_arg": "elim ( EqSet.empty_1 _i ) .",
                "tactic_args": [
                    "c7_goal : EqSet.In a e",
                    "c7_H : EqSet.In a EqSet.empty"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": null,
        "proof": [
            {
                "tactic_sig": "Next Obligation .",
                "tactic_sig_no_out_arg": "Next Obligation .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : iff (EqSet2.In q (EqSet2.union (eqs2 a) (eqs2 b)))\n  (EqSet.In q (EqSet.union a b))",
                    "c1_q : EqSet2\\.elt",
                    "c1_b : eqs",
                    "c1_a : eqs",
                    "c1_y : True",
                    "c1_x : True"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c1_goal : iff (EqSet2.In q (EqSet2.union (eqs2 a) (eqs2 b)))\n  (EqSet.In q (EqSet.union a b))"
                ],
                "tactic_res": [
                    "c2_goal : forall _ : EqSet2.In q (EqSet2.union (eqs2 a) (eqs2 b)),\nEqSet.In q (EqSet.union a b)",
                    "c3_goal : forall _ : EqSet.In q (EqSet.union a b),\nEqSet2.In q (EqSet2.union (eqs2 a) (eqs2 b))"
                ]
            },
            {
                "tactic_sig": "intros _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c2_goal : forall _ : EqSet2.In q (EqSet2.union (eqs2 a) (eqs2 b)),\nEqSet.In q (EqSet.union a b)"
                ],
                "tactic_res": [
                    "c4_goal : EqSet.In q (EqSet.union a b)",
                    "c4_H : EqSet2.In q (EqSet2.union (eqs2 a) (eqs2 b))"
                ]
            },
            {
                "tactic_sig": "intros _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c3_goal : forall _ : EqSet.In q (EqSet.union a b),\nEqSet2.In q (EqSet2.union (eqs2 a) (eqs2 b))"
                ],
                "tactic_res": [
                    "c5_goal : EqSet2.In q (EqSet2.union (eqs2 a) (eqs2 b))",
                    "c5_H : EqSet.In q (EqSet.union a b)"
                ]
            },
            {
                "tactic_sig": "apply _i in _i .",
                "tactic_sig_no_out_arg": "apply _i in _i .",
                "tactic_args": [
                    "_global_EqSet2.union_1 : forall (s s' : EqSet2.t) (x : EqSet2.elt)\n         (_ : EqSet2.In x (EqSet2.union s s')),\n       or (EqSet2.In x s) (EqSet2.In x s')",
                    "c4_H : EqSet2.In q (EqSet2.union (eqs2 a) (eqs2 b))"
                ],
                "tactic_res": [
                    "c4_H : or (EqSet2.In q (eqs2 a)) (EqSet2.In q (eqs2 b))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c4_goal : EqSet.In q (EqSet.union a b)",
                    "c4_H : or (EqSet2.In q (eqs2 a)) (EqSet2.In q (eqs2 b))",
                    "c1_q : EqSet2\\.elt",
                    "c1_a : eqs",
                    "c1_b : eqs",
                    "c1_x : True",
                    "c1_y : True"
                ],
                "tactic_res": [
                    "c6_goal : EqSet.In q (EqSet.union a b)",
                    "c6_H : EqSet2.In q (eqs2 a)",
                    "c7_goal : EqSet.In q (EqSet.union a b)",
                    "c7_H : EqSet2.In q (eqs2 b)"
                ]
            },
            {
                "tactic_sig": "rewrite _i in _i .",
                "tactic_sig_no_out_arg": "rewrite _i in _i .",
                "tactic_args": [
                    "_global_eqs_same : forall (e : eqs) (q : EqSet2.elt),\n       iff (EqSet2.In q (eqs2 e)) (EqSet.In q e)",
                    "c6_H : EqSet2.In q (eqs2 a)"
                ],
                "tactic_res": [
                    "c6_H : EqSet.In q a"
                ]
            },
            {
                "tactic_sig": "rewrite _i in _i .",
                "tactic_sig_no_out_arg": "rewrite _i in _i .",
                "tactic_args": [
                    "_global_eqs_same : forall (e : eqs) (q : EqSet2.elt),\n       iff (EqSet2.In q (eqs2 e)) (EqSet.In q e)",
                    "c7_H : EqSet2.In q (eqs2 b)"
                ],
                "tactic_res": [
                    "c7_H : EqSet.In q b"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c6_goal : EqSet.In q (EqSet.union a b)",
                    "_global_EqSet.union_2 : forall (s s' : EqSet.t) (x : EqSet.elt) (_ : EqSet.In x s),\n       EqSet.In x (EqSet.union s s')"
                ],
                "tactic_res": [
                    "c8_goal : EqSet.In q a"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c8_goal : EqSet.In q a",
                    "c6_H : EqSet.In q a",
                    "c1_q : EqSet2\\.elt",
                    "c1_a : eqs"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c7_goal : EqSet.In q (EqSet.union a b)",
                    "_global_EqSet.union_3 : forall (s s' : EqSet.t) (x : EqSet.elt) (_ : EqSet.In x s'),\n       EqSet.In x (EqSet.union s s')"
                ],
                "tactic_res": [
                    "c9_goal : EqSet.In q b"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c9_goal : EqSet.In q b",
                    "c7_H : EqSet.In q b",
                    "c1_q : EqSet2\\.elt",
                    "c1_b : eqs"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i in _i .",
                "tactic_sig_no_out_arg": "apply _i in _i .",
                "tactic_args": [
                    "_global_EqSet.union_1 : forall (s s' : EqSet.t) (x : EqSet.elt)\n         (_ : EqSet.In x (EqSet.union s s')),\n       or (EqSet.In x s) (EqSet.In x s')",
                    "c5_H : EqSet.In q (EqSet.union a b)"
                ],
                "tactic_res": [
                    "c5_H : or (EqSet.In q a) (EqSet.In q b)"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c5_goal : EqSet2.In q (EqSet2.union (eqs2 a) (eqs2 b))",
                    "c5_H : or (EqSet.In q a) (EqSet.In q b)",
                    "c1_q : EqSet2\\.elt",
                    "c1_a : eqs",
                    "c1_b : eqs",
                    "c1_x : True",
                    "c1_y : True"
                ],
                "tactic_res": [
                    "c10_goal : EqSet2.In q (EqSet2.union (eqs2 a) (eqs2 b))",
                    "c10_H : EqSet.In q a",
                    "c11_goal : EqSet2.In q (EqSet2.union (eqs2 a) (eqs2 b))",
                    "c11_H : EqSet.In q b"
                ]
            },
            {
                "tactic_sig": "rewrite <- _i in _i .",
                "tactic_sig_no_out_arg": "rewrite <- _i in _i .",
                "tactic_args": [
                    "_global_eqs_same : forall (e : eqs) (q : EqSet2.elt),\n       iff (EqSet2.In q (eqs2 e)) (EqSet.In q e)",
                    "c10_H : EqSet.In q a"
                ],
                "tactic_res": [
                    "c10_H : EqSet2.In q (eqs2 a)"
                ]
            },
            {
                "tactic_sig": "rewrite <- _i in _i .",
                "tactic_sig_no_out_arg": "rewrite <- _i in _i .",
                "tactic_args": [
                    "_global_eqs_same : forall (e : eqs) (q : EqSet2.elt),\n       iff (EqSet2.In q (eqs2 e)) (EqSet.In q e)",
                    "c11_H : EqSet.In q b"
                ],
                "tactic_res": [
                    "c11_H : EqSet2.In q (eqs2 b)"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c10_goal : EqSet2.In q (EqSet2.union (eqs2 a) (eqs2 b))",
                    "_global_EqSet2.union_2 : forall (s s' : EqSet2.t) (x : EqSet2.elt) (_ : EqSet2.In x s),\n       EqSet2.In x (EqSet2.union s s')"
                ],
                "tactic_res": [
                    "c12_goal : EqSet2.In q (eqs2 a)"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c12_goal : EqSet2.In q (eqs2 a)",
                    "c10_H : EqSet2.In q (eqs2 a)",
                    "c1_q : EqSet2\\.elt",
                    "c1_a : eqs"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c11_goal : EqSet2.In q (EqSet2.union (eqs2 a) (eqs2 b))",
                    "_global_EqSet2.union_3 : forall (s s' : EqSet2.t) (x : EqSet2.elt) (_ : EqSet2.In x s'),\n       EqSet2.In x (EqSet2.union s s')"
                ],
                "tactic_res": [
                    "c13_goal : EqSet2.In q (eqs2 b)"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c13_goal : EqSet2.In q (eqs2 b)",
                    "c11_H : EqSet2.In q (eqs2 b)",
                    "c1_q : EqSet2\\.elt",
                    "c1_b : eqs"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "lub_dup",
        "proof": [
            {
                "tactic_sig": "Lemma lub_dup ( x y : t ) ( a b : eqs ) q : EqSet2.In q ( EqSet2.union ( eqs2 a ) ( eqs2 b ) ) <- > EqSet.In q ( EqSet.union a b ) .",
                "tactic_sig_no_out_arg": "Lemma lub_dup ( x y : t ) ( a b : eqs ) q : EqSet2.In q ( EqSet2.union ( eqs2 a ) ( eqs2 b ) ) <- > EqSet.In q ( EqSet.union a b ) .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : iff (EqSet2.In q (EqSet2.union (eqs2 a) (eqs2 b)))\n  (EqSet.In q (EqSet.union a b))",
                    "c1_q : EqSet2\\.elt",
                    "c1_b : eqs",
                    "c1_a : eqs",
                    "c1_y : True",
                    "c1_x : True"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c1_goal : iff (EqSet2.In q (EqSet2.union (eqs2 a) (eqs2 b)))\n  (EqSet.In q (EqSet.union a b))"
                ],
                "tactic_res": [
                    "c2_goal : forall _ : EqSet2.In q (EqSet2.union (eqs2 a) (eqs2 b)),\nEqSet.In q (EqSet.union a b)",
                    "c3_goal : forall _ : EqSet.In q (EqSet.union a b),\nEqSet2.In q (EqSet2.union (eqs2 a) (eqs2 b))"
                ]
            },
            {
                "tactic_sig": "intros _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c2_goal : forall _ : EqSet2.In q (EqSet2.union (eqs2 a) (eqs2 b)),\nEqSet.In q (EqSet.union a b)"
                ],
                "tactic_res": [
                    "c4_goal : EqSet.In q (EqSet.union a b)",
                    "c4_H : EqSet2.In q (EqSet2.union (eqs2 a) (eqs2 b))"
                ]
            },
            {
                "tactic_sig": "intros _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c3_goal : forall _ : EqSet.In q (EqSet.union a b),\nEqSet2.In q (EqSet2.union (eqs2 a) (eqs2 b))"
                ],
                "tactic_res": [
                    "c5_goal : EqSet2.In q (EqSet2.union (eqs2 a) (eqs2 b))",
                    "c5_H : EqSet.In q (EqSet.union a b)"
                ]
            },
            {
                "tactic_sig": "apply _i in _i .",
                "tactic_sig_no_out_arg": "apply _i in _i .",
                "tactic_args": [
                    "_global_EqSet2.union_1 : forall (s s' : EqSet2.t) (x : EqSet2.elt)\n         (_ : EqSet2.In x (EqSet2.union s s')),\n       or (EqSet2.In x s) (EqSet2.In x s')",
                    "c4_H : EqSet2.In q (EqSet2.union (eqs2 a) (eqs2 b))"
                ],
                "tactic_res": [
                    "c4_H : or (EqSet2.In q (eqs2 a)) (EqSet2.In q (eqs2 b))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c4_goal : EqSet.In q (EqSet.union a b)",
                    "c4_H : or (EqSet2.In q (eqs2 a)) (EqSet2.In q (eqs2 b))",
                    "c1_q : EqSet2\\.elt",
                    "c1_a : eqs",
                    "c1_b : eqs",
                    "c1_x : True",
                    "c1_y : True"
                ],
                "tactic_res": [
                    "c6_goal : EqSet.In q (EqSet.union a b)",
                    "c6_H : EqSet2.In q (eqs2 a)",
                    "c7_goal : EqSet.In q (EqSet.union a b)",
                    "c7_H : EqSet2.In q (eqs2 b)"
                ]
            },
            {
                "tactic_sig": "rewrite _i in _i .",
                "tactic_sig_no_out_arg": "rewrite _i in _i .",
                "tactic_args": [
                    "_global_eqs_same : forall (e : eqs) (q : EqSet2.elt),\n       iff (EqSet2.In q (eqs2 e)) (EqSet.In q e)",
                    "c6_H : EqSet2.In q (eqs2 a)"
                ],
                "tactic_res": [
                    "c6_H : EqSet.In q a"
                ]
            },
            {
                "tactic_sig": "rewrite _i in _i .",
                "tactic_sig_no_out_arg": "rewrite _i in _i .",
                "tactic_args": [
                    "_global_eqs_same : forall (e : eqs) (q : EqSet2.elt),\n       iff (EqSet2.In q (eqs2 e)) (EqSet.In q e)",
                    "c7_H : EqSet2.In q (eqs2 b)"
                ],
                "tactic_res": [
                    "c7_H : EqSet.In q b"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c6_goal : EqSet.In q (EqSet.union a b)",
                    "_global_EqSet.union_2 : forall (s s' : EqSet.t) (x : EqSet.elt) (_ : EqSet.In x s),\n       EqSet.In x (EqSet.union s s')"
                ],
                "tactic_res": [
                    "c8_goal : EqSet.In q a"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c8_goal : EqSet.In q a",
                    "c6_H : EqSet.In q a",
                    "c1_q : EqSet2\\.elt",
                    "c1_a : eqs"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c7_goal : EqSet.In q (EqSet.union a b)",
                    "_global_EqSet.union_3 : forall (s s' : EqSet.t) (x : EqSet.elt) (_ : EqSet.In x s'),\n       EqSet.In x (EqSet.union s s')"
                ],
                "tactic_res": [
                    "c9_goal : EqSet.In q b"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c9_goal : EqSet.In q b",
                    "c7_H : EqSet.In q b",
                    "c1_q : EqSet2\\.elt",
                    "c1_b : eqs"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i in _i .",
                "tactic_sig_no_out_arg": "apply _i in _i .",
                "tactic_args": [
                    "_global_EqSet.union_1 : forall (s s' : EqSet.t) (x : EqSet.elt)\n         (_ : EqSet.In x (EqSet.union s s')),\n       or (EqSet.In x s) (EqSet.In x s')",
                    "c5_H : EqSet.In q (EqSet.union a b)"
                ],
                "tactic_res": [
                    "c5_H : or (EqSet.In q a) (EqSet.In q b)"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c5_goal : EqSet2.In q (EqSet2.union (eqs2 a) (eqs2 b))",
                    "c5_H : or (EqSet.In q a) (EqSet.In q b)",
                    "c1_q : EqSet2\\.elt",
                    "c1_a : eqs",
                    "c1_b : eqs",
                    "c1_x : True",
                    "c1_y : True"
                ],
                "tactic_res": [
                    "c10_goal : EqSet2.In q (EqSet2.union (eqs2 a) (eqs2 b))",
                    "c10_H : EqSet.In q a",
                    "c11_goal : EqSet2.In q (EqSet2.union (eqs2 a) (eqs2 b))",
                    "c11_H : EqSet.In q b"
                ]
            },
            {
                "tactic_sig": "rewrite <- _i in _i .",
                "tactic_sig_no_out_arg": "rewrite <- _i in _i .",
                "tactic_args": [
                    "_global_eqs_same : forall (e : eqs) (q : EqSet2.elt),\n       iff (EqSet2.In q (eqs2 e)) (EqSet.In q e)",
                    "c10_H : EqSet.In q a"
                ],
                "tactic_res": [
                    "c10_H : EqSet2.In q (eqs2 a)"
                ]
            },
            {
                "tactic_sig": "rewrite <- _i in _i .",
                "tactic_sig_no_out_arg": "rewrite <- _i in _i .",
                "tactic_args": [
                    "_global_eqs_same : forall (e : eqs) (q : EqSet2.elt),\n       iff (EqSet2.In q (eqs2 e)) (EqSet.In q e)",
                    "c11_H : EqSet.In q b"
                ],
                "tactic_res": [
                    "c11_H : EqSet2.In q (eqs2 b)"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c10_goal : EqSet2.In q (EqSet2.union (eqs2 a) (eqs2 b))",
                    "_global_EqSet2.union_2 : forall (s s' : EqSet2.t) (x : EqSet2.elt) (_ : EqSet2.In x s),\n       EqSet2.In x (EqSet2.union s s')"
                ],
                "tactic_res": [
                    "c12_goal : EqSet2.In q (eqs2 a)"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c12_goal : EqSet2.In q (eqs2 a)",
                    "c10_H : EqSet2.In q (eqs2 a)",
                    "c1_q : EqSet2\\.elt",
                    "c1_a : eqs"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c11_goal : EqSet2.In q (EqSet2.union (eqs2 a) (eqs2 b))",
                    "_global_EqSet2.union_3 : forall (s s' : EqSet2.t) (x : EqSet2.elt) (_ : EqSet2.In x s'),\n       EqSet2.In x (EqSet2.union s s')"
                ],
                "tactic_res": [
                    "c13_goal : EqSet2.In q (eqs2 b)"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c13_goal : EqSet2.In q (eqs2 b)",
                    "c11_H : EqSet2.In q (eqs2 b)",
                    "c1_q : EqSet2\\.elt",
                    "c1_b : eqs"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "ge_lub_left",
        "proof": [
            {
                "tactic_sig": "Lemma ge_lub_left : forall x y , ge ( lub x y ) x .",
                "tactic_sig_no_out_arg": "Lemma ge_lub_left : forall x y , ge ( lub x y ) x .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall x y : t, ge (lub x y) x"
                ]
            },
            {
                "tactic_sig": "unfold _i , _i , _i .",
                "tactic_sig_no_out_arg": "unfold _i , _i , _i .",
                "tactic_args": [
                    "c1_goal : forall x y : t, ge (lub x y) x",
                    "_global_lub : forall (_ : t) (_ : t), t",
                    "_global_ge : forall (_ : t) (_ : t), Prop",
                    "_global_EqSet.Subset : forall (_ : EqSet.t) (_ : EqSet.t), Prop"
                ],
                "tactic_res": [
                    "c2_goal : forall x y : t,\nmatch\n  match x with\n  | OK a =>\n      match y with\n      | OK b =>\n          OK\n            {|\n              eqs1 := EqSet.union a b;\n              eqs2 := EqSet2.union (eqs2 a) (eqs2 b);\n              eqs_same := fun q : EqSet2.elt => lub_obligation_1 a b q\n            |}\n      | Error _ => y\n      end\n  | Error _ => x\n  end\nwith\n| OK a =>\n    match x with\n    | OK b =>\n        forall (a0 : EqSet.elt) (_ : EqSet.In a0 b), EqSet.In a0 a\n    | Error _ => False\n    end\n| Error _ => True\nend"
                ]
            },
            {
                "tactic_sig": "intros _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c2_goal : forall x y : t,\nmatch\n  match x with\n  | OK a =>\n      match y with\n      | OK b =>\n          OK\n            {|\n              eqs1 := EqSet.union a b;\n              eqs2 := EqSet2.union (eqs2 a) (eqs2 b);\n              eqs_same := fun q : EqSet2.elt => lub_obligation_1 a b q\n            |}\n      | Error _ => y\n      end\n  | Error _ => x\n  end\nwith\n| OK a =>\n    match x with\n    | OK b =>\n        forall (a0 : EqSet.elt) (_ : EqSet.In a0 b), EqSet.In a0 a\n    | Error _ => False\n    end\n| Error _ => True\nend"
                ],
                "tactic_res": [
                    "c3_goal : match\n  match x with\n  | OK a =>\n      match y with\n      | OK b =>\n          OK\n            {|\n              eqs1 := EqSet.union a b;\n              eqs2 := EqSet2.union (eqs2 a) (eqs2 b);\n              eqs_same := fun q : EqSet2.elt => lub_obligation_1 a b q\n            |}\n      | Error _ => y\n      end\n  | Error _ => x\n  end\nwith\n| OK a =>\n    match x with\n    | OK b =>\n        forall (a0 : EqSet.elt) (_ : EqSet.In a0 b), EqSet.In a0 a\n    | Error _ => False\n    end\n| Error _ => True\nend",
                    "c3_x : True",
                    "c3_y : True"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c3_goal : match\n  match x with\n  | OK a =>\n      match y with\n      | OK b =>\n          OK\n            {|\n              eqs1 := EqSet.union a b;\n              eqs2 := EqSet2.union (eqs2 a) (eqs2 b);\n              eqs_same := fun q : EqSet2.elt => lub_obligation_1 a b q\n            |}\n      | Error _ => y\n      end\n  | Error _ => x\n  end\nwith\n| OK a =>\n    match x with\n    | OK b =>\n        forall (a0 : EqSet.elt) (_ : EqSet.In a0 b), EqSet.In a0 a\n    | Error _ => False\n    end\n| Error _ => True\nend",
                    "c3_x : True",
                    "c3_y : True"
                ],
                "tactic_res": [
                    "c4_goal : match\n  match y with\n  | OK b =>\n      OK\n        {|\n          eqs1 := EqSet.union e b;\n          eqs2 := EqSet2.union (eqs2 e) (eqs2 b);\n          eqs_same := fun q : EqSet2.elt => lub_obligation_1 e b q\n        |}\n  | Error _ => y\n  end\nwith\n| OK a => forall (a0 : EqSet.elt) (_ : EqSet.In a0 e), EqSet.In a0 a\n| Error _ => True\nend",
                    "c4_e : eqs",
                    "c5_goal : True",
                    "c5_e : errmsg"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c4_goal : match\n  match y with\n  | OK b =>\n      OK\n        {|\n          eqs1 := EqSet.union e b;\n          eqs2 := EqSet2.union (eqs2 e) (eqs2 b);\n          eqs_same := fun q : EqSet2.elt => lub_obligation_1 e b q\n        |}\n  | Error _ => y\n  end\nwith\n| OK a => forall (a0 : EqSet.elt) (_ : EqSet.In a0 e), EqSet.In a0 a\n| Error _ => True\nend",
                    "c3_y : True",
                    "c4_e : eqs"
                ],
                "tactic_res": [
                    "c6_goal : forall (a : EqSet.elt) (_ : EqSet.In a e),\nEqSet.In a\n  {|\n    eqs1 := EqSet.union e e0;\n    eqs2 := EqSet2.union (eqs2 e) (eqs2 e0);\n    eqs_same := fun q : EqSet2.elt => lub_obligation_1 e e0 q\n  |}",
                    "c6_e0 : eqs",
                    "c7_goal : True",
                    "c7_e0 : errmsg"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c7_goal : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c5_goal : True",
                    "c3_y : True",
                    "c5_e : errmsg"
                ],
                "tactic_res": [
                    "c8_goal : True",
                    "c8_e0 : eqs",
                    "c9_goal : True",
                    "c9_e0 : errmsg"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c8_goal : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c9_goal : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "intros _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c6_goal : forall (a : EqSet.elt) (_ : EqSet.In a e),\nEqSet.In a\n  {|\n    eqs1 := EqSet.union e e0;\n    eqs2 := EqSet2.union (eqs2 e) (eqs2 e0);\n    eqs_same := fun q : EqSet2.elt => lub_obligation_1 e e0 q\n  |}"
                ],
                "tactic_res": [
                    "c10_goal : EqSet.In a\n  {|\n    eqs1 := EqSet.union e e0;\n    eqs2 := EqSet2.union (eqs2 e) (eqs2 e0);\n    eqs_same := fun q : EqSet2.elt => lub_obligation_1 e e0 q\n  |}",
                    "c10_a : EqSet\\.elt",
                    "c10_H : EqSet.In a e"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c10_goal : EqSet.In a\n  {|\n    eqs1 := EqSet.union e e0;\n    eqs2 := EqSet2.union (eqs2 e) (eqs2 e0);\n    eqs_same := fun q : EqSet2.elt => lub_obligation_1 e e0 q\n  |}",
                    "_global_EqSet.union_2 : forall (s s' : EqSet.t) (x : EqSet.elt) (_ : EqSet.In x s),\n       EqSet.In x (EqSet.union s s')"
                ],
                "tactic_res": [
                    "c11_goal : EqSet.In a e"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c11_goal : EqSet.In a e",
                    "c10_H : EqSet.In a e",
                    "c10_a : EqSet\\.elt",
                    "c4_e : eqs"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "ge_lub_right",
        "proof": [
            {
                "tactic_sig": "Lemma ge_lub_right : forall x y , ge ( lub x y ) y .",
                "tactic_sig_no_out_arg": "Lemma ge_lub_right : forall x y , ge ( lub x y ) y .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall x y : t, ge (lub x y) y"
                ]
            },
            {
                "tactic_sig": "unfold _i , _i , _i .",
                "tactic_sig_no_out_arg": "unfold _i , _i , _i .",
                "tactic_args": [
                    "c1_goal : forall x y : t, ge (lub x y) y",
                    "_global_lub : forall (_ : t) (_ : t), t",
                    "_global_ge : forall (_ : t) (_ : t), Prop",
                    "_global_EqSet.Subset : forall (_ : EqSet.t) (_ : EqSet.t), Prop"
                ],
                "tactic_res": [
                    "c2_goal : forall x y : t,\nmatch\n  match x with\n  | OK a =>\n      match y with\n      | OK b =>\n          OK\n            {|\n              eqs1 := EqSet.union a b;\n              eqs2 := EqSet2.union (eqs2 a) (eqs2 b);\n              eqs_same := fun q : EqSet2.elt => lub_obligation_1 a b q\n            |}\n      | Error _ => y\n      end\n  | Error _ => x\n  end\nwith\n| OK a =>\n    match y with\n    | OK b =>\n        forall (a0 : EqSet.elt) (_ : EqSet.In a0 b), EqSet.In a0 a\n    | Error _ => False\n    end\n| Error _ => True\nend"
                ]
            },
            {
                "tactic_sig": "intros _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c2_goal : forall x y : t,\nmatch\n  match x with\n  | OK a =>\n      match y with\n      | OK b =>\n          OK\n            {|\n              eqs1 := EqSet.union a b;\n              eqs2 := EqSet2.union (eqs2 a) (eqs2 b);\n              eqs_same := fun q : EqSet2.elt => lub_obligation_1 a b q\n            |}\n      | Error _ => y\n      end\n  | Error _ => x\n  end\nwith\n| OK a =>\n    match y with\n    | OK b =>\n        forall (a0 : EqSet.elt) (_ : EqSet.In a0 b), EqSet.In a0 a\n    | Error _ => False\n    end\n| Error _ => True\nend"
                ],
                "tactic_res": [
                    "c3_goal : match\n  match x with\n  | OK a =>\n      match y with\n      | OK b =>\n          OK\n            {|\n              eqs1 := EqSet.union a b;\n              eqs2 := EqSet2.union (eqs2 a) (eqs2 b);\n              eqs_same := fun q : EqSet2.elt => lub_obligation_1 a b q\n            |}\n      | Error _ => y\n      end\n  | Error _ => x\n  end\nwith\n| OK a =>\n    match y with\n    | OK b =>\n        forall (a0 : EqSet.elt) (_ : EqSet.In a0 b), EqSet.In a0 a\n    | Error _ => False\n    end\n| Error _ => True\nend",
                    "c3_x : True",
                    "c3_y : True"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c3_goal : match\n  match x with\n  | OK a =>\n      match y with\n      | OK b =>\n          OK\n            {|\n              eqs1 := EqSet.union a b;\n              eqs2 := EqSet2.union (eqs2 a) (eqs2 b);\n              eqs_same := fun q : EqSet2.elt => lub_obligation_1 a b q\n            |}\n      | Error _ => y\n      end\n  | Error _ => x\n  end\nwith\n| OK a =>\n    match y with\n    | OK b =>\n        forall (a0 : EqSet.elt) (_ : EqSet.In a0 b), EqSet.In a0 a\n    | Error _ => False\n    end\n| Error _ => True\nend",
                    "c3_x : True",
                    "c3_y : True"
                ],
                "tactic_res": [
                    "c4_goal : match\n  match y with\n  | OK b =>\n      OK\n        {|\n          eqs1 := EqSet.union e b;\n          eqs2 := EqSet2.union (eqs2 e) (eqs2 b);\n          eqs_same := fun q : EqSet2.elt => lub_obligation_1 e b q\n        |}\n  | Error _ => y\n  end\nwith\n| OK a =>\n    match y with\n    | OK b =>\n        forall (a0 : EqSet.elt) (_ : EqSet.In a0 b), EqSet.In a0 a\n    | Error _ => False\n    end\n| Error _ => True\nend",
                    "c4_e : eqs",
                    "c5_goal : True",
                    "c5_e : errmsg"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c4_goal : match\n  match y with\n  | OK b =>\n      OK\n        {|\n          eqs1 := EqSet.union e b;\n          eqs2 := EqSet2.union (eqs2 e) (eqs2 b);\n          eqs_same := fun q : EqSet2.elt => lub_obligation_1 e b q\n        |}\n  | Error _ => y\n  end\nwith\n| OK a =>\n    match y with\n    | OK b =>\n        forall (a0 : EqSet.elt) (_ : EqSet.In a0 b), EqSet.In a0 a\n    | Error _ => False\n    end\n| Error _ => True\nend",
                    "c3_y : True",
                    "c4_e : eqs"
                ],
                "tactic_res": [
                    "c6_goal : forall (a : EqSet.elt) (_ : EqSet.In a e0),\nEqSet.In a\n  {|\n    eqs1 := EqSet.union e e0;\n    eqs2 := EqSet2.union (eqs2 e) (eqs2 e0);\n    eqs_same := fun q : EqSet2.elt => lub_obligation_1 e e0 q\n  |}",
                    "c6_e0 : eqs",
                    "c7_goal : True",
                    "c7_e0 : errmsg"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c7_goal : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c5_goal : True",
                    "c3_y : True",
                    "c5_e : errmsg"
                ],
                "tactic_res": [
                    "c8_goal : True",
                    "c8_e0 : eqs",
                    "c9_goal : True",
                    "c9_e0 : errmsg"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c8_goal : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c9_goal : True"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "intros _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c6_goal : forall (a : EqSet.elt) (_ : EqSet.In a e0),\nEqSet.In a\n  {|\n    eqs1 := EqSet.union e e0;\n    eqs2 := EqSet2.union (eqs2 e) (eqs2 e0);\n    eqs_same := fun q : EqSet2.elt => lub_obligation_1 e e0 q\n  |}"
                ],
                "tactic_res": [
                    "c10_goal : EqSet.In a\n  {|\n    eqs1 := EqSet.union e e0;\n    eqs2 := EqSet2.union (eqs2 e) (eqs2 e0);\n    eqs_same := fun q : EqSet2.elt => lub_obligation_1 e e0 q\n  |}",
                    "c10_a : EqSet\\.elt",
                    "c10_H : EqSet.In a e0"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c10_goal : EqSet.In a\n  {|\n    eqs1 := EqSet.union e e0;\n    eqs2 := EqSet2.union (eqs2 e) (eqs2 e0);\n    eqs_same := fun q : EqSet2.elt => lub_obligation_1 e e0 q\n  |}",
                    "_global_EqSet.union_3 : forall (s s' : EqSet.t) (x : EqSet.elt) (_ : EqSet.In x s'),\n       EqSet.In x (EqSet.union s s')"
                ],
                "tactic_res": [
                    "c11_goal : EqSet.In a e0"
                ]
            },
            {
                "tactic_sig": "auto .",
                "tactic_sig_no_out_arg": "auto .",
                "tactic_args": [
                    "c11_goal : EqSet.In a e0",
                    "c10_H : EqSet.In a e0",
                    "c10_a : EqSet\\.elt",
                    "c6_e0 : eqs"
                ],
                "tactic_res": []
            }
        ]
    }
]