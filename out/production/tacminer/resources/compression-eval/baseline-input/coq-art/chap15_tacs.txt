coq-art/./chap15.v
-----
coq-art/./chap15_compr.v
-----
Ltac custom_tac3 H0 H1 H2 := intros H0 H1; unfold H2; case ( le_gt_dec H0 H1); auto with arith.
Ltac custom_tac0 H0 := intros H0; elim H0.
Ltac custom_tac2 H0 := case H0; intros.
Ltac custom_tac1 H0 H1 H2 := elim H0; intros H1 H2.
Ltac custom_tac4 H0 H1 := intros H0 H1; elim H1.
Ltac custom_tac5  := simpl; auto with arith.
Ltac custom_tac7  := intro; lia.
Ltac custom_tac6 H0 H1 := intros H0 H1; case H1.
-----
bdiv_aux_correct1
Proof. intros b; elim b; simpl. - intros m n Hle; inversion Hle; auto. - intros b' Hrec m n Hleb Hlt; case (le_gt_dec n m); simpl; auto. intros Hle; generalize (Hrec (m-n) n); case (bdiv_aux b' (m-n) n); simpl; intros q r Hrec'. rewrite <- Nat.add_assoc; rewrite <- Hrec'; auto with arith. lia. Qed.
bdiv_aux_correct2
Proof. intros b; elim b; simpl;auto. intros b' Hrec m n Hleb Hlt; case (le_gt_dec n m); simpl; auto. intros Hle; generalize (Hrec (m-n) n); case (bdiv_aux b' (m-n) n); simpl; intros q r Hrec'. apply Hrec'; [lia | auto]. Qed.
bdiv
Proof. refine (fun (m n:nat) (h:0 < n) => let p := bdiv_aux m m n in existT (fun q:nat => {r : nat | m = q*n+r /\ r < n}) (fst p) (exist _ (snd p) _)). unfold p; split. - apply bdiv_aux_correct1; auto. - eapply bdiv_aux_correct2; eauto. Defined.
lt_Acc
Proof. induction n. - split; intros p H; inversion H. - split; intros y H0. inversion H0. + assumption. + destruct IHn; auto. Qed.
lt_wf
Proof. constructor. apply lt_Acc. Qed.
Rpos_div2_wf
Proof. unfold well_founded; intros a; elim a; (intros; apply Acc_intro; intros y Hr; inversion Hr; auto). Qed.
div_F
Proof. unfold div_type at 2. refine (fun m div_rec n Hlt => match le_gt_dec n m with | left H_n_le_m => match div_rec (m-n) _ n _ with | existT _ q (exist _ r H_spec) => existT (div_type' m n) (S q) (exist (div_type'' m n (S q)) r _) end | right H_n_gt_m => existT (div_type' m n) 0 (exist (div_type'' m n 0) m _) end); unfold div_type''; auto with arith. elim H_spec; intros H1 H2; split; auto. rewrite <- (Nat.sub_add n m H_n_le_m), H1; ring. Qed.
f_lemma
Proof. intros x v H; generalize (double_div2_le x); lia. Qed.
nested_F
Proof. refine (fun x => match x return (forall y:nat, y < x ->{v:nat | v <= y})-> {v:nat | v <= x} with O => fun f => exist _ 0 _ | S x' => fun f => match f (div2 x') _ with exist _ v H1 => match f (div2 x' + v) _ with exist _ v1 H2 => exist _ (S v1) _ end end end); auto with arith. apply le_n_S; eauto with arith. Defined.
div_it_terminates
Proof. intros n; elim n using (well_founded_induction lt_wf). intros n' Hrec m Hlt. case_eq (le_gt_dec m n'); intros H Heq_test. - case Hrec with (y := n'-m) (2 := Hlt); auto with arith. intros [q r]; intros Hex; exists (S q, r). elim Hex; intros p Heq. exists (S p). intros k. case k. + intros; elim (Nat.nlt_0_r (S p)); auto. + intros k' Hplt g; simpl; unfold div_it_F at 1. rewrite Heq; auto with arith. rewrite Heq_test; auto. - exists (0, n'); exists 0; intros k; case k. + intros; elim (Nat.lt_irrefl 0); auto. + intros k' Hltp g; simpl; unfold div_it_F at 1. rewrite Heq_test; auto. Defined.
max1_correct
Proof. intros n m; unfold max; case (le_gt_dec n m); auto with arith. Qed.
max2_correct
Proof. intros n m; unfold max; case (le_gt_dec n m); auto with arith. Qed.
div_it_fix_eqn
Proof. intros n m h; unfold div_it; case (div_it_terminates n m h). intros v Hex1; case (div_it_terminates (n-m) m h). intros v' Hex2; elim Hex2; elim Hex1; intros p Heq1 p' Heq2. rewrite <- Heq1 with (k := S (S (max p p'))) (g := fun x y: nat => v). - rewrite <- Heq2 with (k := S (max p p')) (g := fun x y: nat => v). reflexivity. eauto with arith. - eauto with arith. Qed.
div_it_correct1
Proof. intros m; elim m using (well_founded_ind lt_wf). intros m' Hrec n h; rewrite div_it_fix_eqn. case (le_gt_dec n m'); intros H; trivial. pattern m' at 1; rewrite <- (Nat.sub_add n m'), Nat.add_comm; auto. pattern (m'-n) at 1. rewrite Hrec with (m'-n) n h; auto with arith. case (div_it (m'-n) n h); simpl; auto with arith. Qed.
log_domain_non_O
Proof. intros x H; case H; intros; discriminate. Qed.
log_domain_inv
Proof. intros x p H; case H; try (intros H'; discriminate H'). intros p' H1 H2; injection H2; intros H3; rewrite <- H3; assumption. Defined.
log2_domain_non_zero
Proof. induction 1. - discriminate. - generalize (div2_le x); intro; lia. Qed.
log2_domain_invert
Proof. custom_tac6 x h. - custom_tac4 h1 h2; reflexivity. - intros; assumption. Defined.
pow_log_le
Proof. intros x h; elim h using log_domain_ind2. simpl; auto with arith. intros p l Hle. lazy beta iota zeta delta [two_power log_domain_inv log]; fold log two_power. apply Nat.le_trans with (2 * S (div2 p)); auto with arith. generalize (double_div2_le (S (S p))); simpl;intro;lia. Qed.
