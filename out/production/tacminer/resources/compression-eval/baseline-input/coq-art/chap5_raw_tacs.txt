coq-art/chap5_raw.v
-----
coq-art/chap5_raw_compr.v
-----
Ltac custom_tac0 H0 := apply H0; assumption.
-----
conv_example
Proof. intros. assumption. Qed.
imp_trans
Proof. intros P Q R H H0 p. apply H0. apply H. assumption. Qed.
one_neutral_left
Proof. intro z; ring. Qed.
le_i_SSi
Proof. intro i. do 2 apply le_S; apply le_n. Qed.
all_imp_dist
Proof. intros A P Q H H0 z. apply H. apply H0. Qed.
mult_le_compat_r
Proof. intros m n p H. rewrite (Nat.mul_comm n m). rewrite (Nat.mul_comm p m). apply Nat.mul_le_mono_l. assumption. Qed.
le_mult_mult
Proof. intros a b c d H H0. apply Nat.le_trans with (m := c * b). - apply mult_le_compat_r; assumption. - apply Nat.mul_le_mono_l; assumption. Qed.
le_mult_mult'
Proof. intros a b c d H H0. eapply Nat.le_trans. - eapply Nat.mul_le_mono_l. eexact H0. - apply mult_le_compat_r. assumption. Qed.
le_O_mult
Proof. intros n p; apply le_n. Qed.
lt_8_9
Proof. unfold lt; apply le_n. Qed.
lt_S
Proof. intros n p H. unfold lt; apply le_S. assumption. Qed.
unfold_example
Proof. intros x y Heq. unfold Zsquare_diff at 1. rewrite Heq; ring. Qed.
ex1
Proof. apply False_ind. exact ff. Qed.
ex2
Proof. destruct ff. Qed.
absurd
Proof. intros P Q p H. elim H. assumption. Qed.
double_neg_i
Proof. intros P p H. apply H; assumption. Qed.
modus_ponens
Proof. auto. Qed.
double_neg_i'
Proof. intro P; exact (modus_ponens P False). Qed.
contrap
Proof. intros A B; unfold not. apply imp_trans. Qed.
disj4_3'
Proof. right; right; left; assumption. Qed.
and_commutes
Proof. intros A B H; destruct H. split; assumption. Qed.
or_commutes
Proof. intros A B H; destruct H as [H | H]; auto. Qed.
ex_imp_ex
Proof. intros A P Q H H0; destruct H as [a Ha]. exists a; custom_tac0 H0. Qed.
L36
Proof. reflexivity. Qed.
diff_of_squares
Proof. intros; ring. Qed.
eq_sym'
Proof. intros A a b e; rewrite e; reflexivity. Qed.
Zmult_distr_1
Proof. intros n x ; rewrite Zmult_plus_distr_l. now rewrite Zmult_1_l. Qed.
regroup
Proof. intro x; pattern x at 1. rewrite <- Zmult_1_l. repeat rewrite Zmult_distr_1. reflexivity. Qed.
le_lt_S_eq
Proof. intros n p. intros. lia. Qed.
conditional_rewrite_example
Proof. intros n H H0. rewrite <- (le_lt_S_eq 2 n). - reflexivity. - apply Nat.add_le_mono_l with (p := 6). rewrite Nat.add_comm in H; auto with arith. - apply Nat.add_lt_mono_l with (p:= 3); auto with arith. Qed.
conditional_rewrite_example'
Proof. intros n H H0. assert (n = 2) by lia. now subst n. Qed.
eq_trans
Proof. intros A x y z H. rewrite H; auto. Qed.
my_I
Proof. intros P p; assumption. Qed.
my_False_ind
Proof. intros P F; apply F. Qed.
leibniz_sym
Proof. intros x y H Q; apply H; trivial. Qed.
