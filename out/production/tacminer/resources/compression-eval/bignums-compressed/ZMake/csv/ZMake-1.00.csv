extracted tactics -----------
Ltac custom0 H0 H1 H2 :=  intros H0 H1; [unfold H2; [destr_norm_pos H0; [destr_norm_pos H1; [simpl; [rewrite ?NN.spec_succ, ?NN.spec_land, ?NN.spec_ldiff, ?NN.spec_lor, ?NN.spec_pred, ?Z.max_r, ?Zlnot_alt1; [auto with zarith | .. ] | .. ] | simpl; [rewrite ?NN.spec_succ, ?NN.spec_land, ?NN.spec_ldiff, ?NN.spec_lor, ?NN.spec_pred, ?Z.max_r, ?Zlnot_alt1; [ | auto with zarith | .. ] | .. ] | .. ] | destr_norm_pos H1; [simpl; [rewrite ?NN.spec_succ, ?NN.spec_land, ?NN.spec_ldiff, ?NN.spec_lor, ?NN.spec_pred, ?Z.max_r, ?Zlnot_alt1; [ | auto with zarith | .. ] | .. ] | simpl; [rewrite ?NN.spec_succ, ?NN.spec_land, ?NN.spec_ldiff, ?NN.spec_lor, ?NN.spec_pred, ?Z.max_r, ?Zlnot_alt1; [ | .. ] | .. ] | .. ] | .. ] | .. ] | .. ].
Ltac custom1 H0 H1 H3 H2 H5 :=  simpl; [symmetry; [rewrite H0; [destruct ( Z.eq_dec ( NN.to_Z H1 ) 0 ) as [ EQ|NEQ ]; [try ( rewrite H3 ; now destruct ( NN.to_Z H2 ) ) | try ( rewrite EQ ; now destruct ( NN.to_Z H2 ) )rewrite ?Z.quot_opp_r, ?Z.quot_opp_l, ?Z.opp_involutive, ?Z.opp_inj_wd; [apply H5; [generalize ( NN.spec_pos H2 ) ( NN.spec_pos H1 ); [Z.order | .. ] | generalize ( NN.spec_pos H2 ) ( NN.spec_pos H1 ); [Z.order | .. ] | .. ] | trivial | .. ] | .. ] | .. ] | .. ] | .. ].
Ltac custom2 H0 H1 :=  rewrite H0; [unfold H1; [case NN.to_Z; [ | simpl; [case NN.to_Z; [simpl; [auto with zarith | .. ] | simpl; [auto with zarith | .. ] | simpl; [auto with zarith | .. ] | .. ] | .. ] | simpl; [case NN.to_Z; [simpl; [auto with zarith | .. ] | simpl; [auto with zarith | .. ] | simpl; [auto with zarith | .. ] | .. ] | .. ] | .. ] | .. ] | .. ].
Ltac custom3 H0 H1 :=  rewrite H0; [case Z.compare_spec; [unfold H1; [rewrite ?NN.spec_0, ?NN.spec_sub; [lia | .. ] | .. ] | rewrite ?NN.spec_0, ?NN.spec_sub; [lia | .. ] | rewrite ?NN.spec_0, ?NN.spec_sub; [lia | .. ] | .. ] | .. ].
Ltac custom4 H1 H2 H3 H4 :=  simpl in *; [symmetry; [rewrite H1, ?Z.rem_opp_r, ?Z.rem_opp_l, ?Z.opp_involutive, ?Z.opp_inj_wd; [apply H2; [generalize ( NN.spec_pos H3 ) ( NN.spec_pos H4 ); [Z.order | .. ] | generalize ( NN.spec_pos H3 ) ( NN.spec_pos H4 ); [Z.order | .. ] | .. ] | .. ] | .. ] | .. ].
Ltac custom6 H1 H2 H3 H4 :=  simpl in *; [symmetry; [rewrite H1, ?Z.rem_opp_r, ?Z.rem_opp_l, ?Z.opp_involutive, ?Z.opp_inj_wd; [apply H2; [generalize ( NN.spec_pos H3 ) ( NN.spec_pos H4 ); [Z.order | .. ] | generalize ( NN.spec_pos H3 ) ( NN.spec_pos H4 ); [Z.order | .. ] | .. ] | trivial | .. ] | .. ] | .. ].
Ltac custom7 H0 H1 H9 H13 H14 H8 H22 H3 H23 :=  cbn; [destruct ( Z.pos_div_eucl H0 ( Zpos H1 ) ) as ( q', r' ); [cbn in H9; [intros [ = H13 H14 ]; [break_nonneg H8 pr' EQr'; [subst; [cbn; [now rewrite NN.spec_0 | .. ] | .. ] | subst; [rewrite H22, H3, H23 | .. ] | .. ] | .. ] | .. ] | .. ] | .. ].
Ltac custom8  :=  case NN.to_Z; [simpl; [auto with zarith | .. ] | simpl; [auto with zarith | .. ] | simpl; [auto with zarith | .. ] | .. ].
Ltac custom9 H2 H0 H3 H4 :=  intros [ n|n ]; [simpl; [rewrite H2; [trivial | .. ] | .. ] | simpl; [rewrite H2; [destruct ( NN.to_Z H0 ) as [ |p|p ]; [now try destruct p | now try destruct H3 | now try destruct H4 | .. ] | .. ] | .. ] | .. ].
Ltac custom11 H0 H1 :=  cbn; [intros [ = H0 H1 ]; [rewrite H1, H0; [cbn; [now rewrite NN.spec_0 | .. ] | .. ] | .. ] | .. ].
Ltac custom13 H0 H1 H2 H3 H4 H5 H6 H7 H8 :=  intros H0 H1; [generalize ( spec_div_eucl H0 H1 ); [unfold H2, H3; [case div_eucl; [case Z.div_eucl; [simpl; [intros H4 H5 H6 H7 H8; [injection H8; [auto | .. ] | .. ] | .. ] | .. ] | .. ] | .. ] | .. ] | .. ].
Ltac custom14  :=  simpl; [case NN.to_Z; [simpl; [auto with zarith | .. ] | simpl; [auto with zarith | .. ] | simpl; [auto with zarith | .. ] | .. ] | .. ].
Ltac custom15 H0 H1 H2 H3 H4 :=  unfold H0, H1; [intros H2 H3; [rewrite H4; [destruct Z.compare; [auto | auto | auto | .. ] | .. ] | .. ] | .. ].
Ltac custom16 H0 H1 H4 H3 :=  simpl; [rewrite H0; [destruct ( Z_le_lt_eq_dec _ _ ( NN.spec_pos H1 ) ) as [ LT|EQ ]; [rewrite H4; [auto with zarith | auto with zarith | .. ] | now rewrite <- H3 | .. ] | .. ] | .. ].
Ltac custom17 H0 H1 :=  generalize ( NN.spec_div_eucl H0 H1 ); [destruct ( NN.div_eucl H0 H1 ) as ( q, r ); [break_nonneg H0 px EQx; [break_nonneg H1 py EQy | break_nonneg H1 py EQy | .. ] | .. ] | .. ].
Ltac custom18 H0 H1 H2 :=  apply H0; [generalize ( NN.spec_pos H1 ) ( NN.spec_pos H2 ); [Z.order | .. ] | generalize ( NN.spec_pos H1 ) ( NN.spec_pos H2 ); [Z.order | .. ] | .. ].
Ltac custom19 H1 :=  repeat rewrite Z.pow_mul_r; [rewrite H1; [ring | .. ] | auto with zarith | auto with zarith | auto with zarith | auto with zarith | .. ].
Ltac custom20 H0 H3 :=  try rewrite NN.spec_pow_pos; [assert ( F : 0 <= 2 * Zpos H0 ); [assert ( 0 <= Zpos H0 ); [auto with zarith | auto with zarith | .. ] | rewrite H3 | .. ] | .. ].
Ltac custom21 H0 H1 H3 H2 :=  simpl; [symmetry; [rewrite H0; [destruct ( Z.eq_dec ( NN.to_Z H1 ) 0 ) as [ EQ|NEQ ]; [try ( rewrite H3 ; now destruct ( NN.to_Z H2 ) ) | try ( rewrite EQ ; now destruct ( NN.to_Z H2 ) ) | .. ] | .. ] | .. ] | .. ].
Ltac custom22 H0 H1 H2 H3 :=  rewrite H0, H1; [cbn; [intros [ = H2 H3 ]; [rewrite H3, H2; [cbn; [now rewrite NN.spec_0 | .. ] | .. ] | .. ] | .. ] | .. ].
Ltac custom23 H0 H1 H2 :=  intros H0; [case H0; [clear H0intros H1 | intros H2; [simpl | .. ] | .. ] | .. ].
Ltac custom24 H0 :=  destr_norm_pos H0; [simpl; [rewrite ?NN.spec_succ, ?NN.spec_lxor, ?NN.spec_pred, ?Z.max_r, ?Zlnot_alt1 | .. ] | simpl; [rewrite ?NN.spec_succ, ?NN.spec_lxor, ?NN.spec_pred, ?Z.max_r, ?Zlnot_alt1; [ | auto with zarith | .. ] | .. ] | .. ].
Ltac custom25 H0 :=  simpl; [apply H0 | .. ].
Ltac custom26  :=  simpl; [auto with zarith | .. ].
Ltac custom27 H0 :=  cbn; [f_equal; [rewrite H0; [lia | lia | .. ] | .. ] | .. ].
Ltac custom29 H0 :=  rewrite H0; [ring | .. ].
Ltac custom30 H0 :=  rewrite ?NN.spec_0, ?NN.spec_1, ?NN.spec_pred; [generalize ( NN.spec_pos H0 ); [lia | .. ] | .. ].
Ltac custom31 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].
Ltac custom32 H0 H3 H2 H5 :=  rewrite ?NN.spec_compare, ?NN.spec_0, ?Z.compare_opp; [set ( X := NN.to_Z H0 ) in *; [set ( Y := NN.to_Z H3 ) in *; [clearbody H2 H5 | .. ] | .. ] | .. ].
Ltac custom33 H0 H1 H2 H3 H4 :=  unfold H0, H1, H2; [intros H3; [rewrite H4; [auto | .. ] | .. ] | .. ].
Ltac custom34 H0 H1 H2 :=  intros H0 H1; [unfold H2 | .. ].
Ltac custom35 H0 H3 H4 :=  destruct H0 as [ p|p ]; [assert ( Hp := NN.spec_pos H3 ); [assert ( Hp := NN.spec_pos H4 )] | simpl | .. ].
Ltac custom36 H0 H1 H3 :=  rewrite H0, H1; [symmetry; [rewrite H3 | .. ] | .. ].
Ltac custom37 H0 H1 H2 H3 H4 H5 :=  unfold H0, H1; [intros [ H2 | H3 ] [ H4 | H5 ]; [ | .. ] | .. ].
Ltac custom38  :=  simpl; [rewrite ?NN.spec_succ, ?NN.spec_lxor, ?NN.spec_pred, ?Z.max_r, ?Zlnot_alt1; [ | auto with zarith | .. ] | .. ].
Ltac custom39 H0 :=  simpl; [rewrite H0; [auto | .. ] | .. ].
Ltac custom40 H0 H1 :=  rewrite H0; [rewrite H1 | .. ].
Ltac custom41  :=  split; [now destruct Z.compare | now intros -> | .. ].
Ltac custom42 H1 H2 H0 :=  custom0 H1 H2 H0; [ |  |  | auto with zarith | auto with zarith | .. ].
Ltac custom43 H0 :=  symmetry; [apply H0 | .. ].
Ltac custom44  :=  try rewrite NN.spec_pow_pos; [try ring | .. ].
Ltac custom45 H0 H1 :=  rewrite H0; [unfold H1 | .. ].
Ltac custom46 H0 :=  rewrite H0; [case Z.compare_spec; [ | .. ] | .. ].
Ltac custom47  :=  rewrite ?NN.spec_0; [simpl | .. ].
Ltac custom48 H0 H1 :=  rewrite H0, H1; [case Z.eqb_spec | .. ].
Ltac custom49 H0 H1 :=  unfold H0, H1; [auto with zarith | .. ].
Ltac custom50 H0 H1 :=  generalize ( NN.spec_pos H0 ) ( NN.spec_pos H1 ); [Z.order | .. ].
Ltac custom51 H0 :=  generalize ( NN.spec_pos H0 ); [auto with zarith | .. ].
Ltac custom52 H0 :=  break_nonneg H0 py EQy; [try ( injection 1 as -> -> ; auto ) | .. ].
Ltac custom53  :=  exfalso; [lia | .. ].
Ltac custom54 H0 H1 H2 :=  custom23 H0 H1 H2; [ | clear H0 | .. ].
Ltac custom55 H0 H1 H2 H3 :=  custom40 H0 H1; [custom11 H2 H3 | .. ].
Ltac custom56  :=  rewrite ?NN.spec_compare, ?NN.spec_0, ?Z.compare_opp; [auto | .. ].
Ltac custom58  :=  intros <-; [auto | .. ].
Ltac custom59  :=  case NN.to_Z; [custom26  | .. ].
Ltac custom60 H0 :=  intros H0; [case H0; [ | .. ] | .. ].
---------------------------
 , , 1.0
ZMake, Number of Tactics, 56
 , Average Tactic Size, 4.80
 , Total Tactic Size, 269
 , Max Tactic Size, 19
 , Overall CP, 0.00